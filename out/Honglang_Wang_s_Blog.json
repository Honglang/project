[{"blogurl": "http://honglangwang.wordpress.com\n", "blogroll": [], "title": "Honglang Wang's Blog"}, {"content": ["\u201cThe best thing about being a statistician is that you get to play in everyone\u2019s backyard.\u201d\u2014John Tukey \n Being a statistician, work on a diverse range of problems, many of which come from real scientific issues: the challenge of analyzing experimental data or of constructing a stochastic model to explain the experimental puzzles. Along the way, get the chance to learn some science. \n Advice for PhD students from Professor Samuel Kou: \n Follow the heart, not the trend. I think only by doing what you love to do, by listening to your heart, can you proceed forward and enjoy the process and the fruits in the long run. I feel it is worth keeping in mind that what is hot right now might not be so hot five or ten years down the line. \n A statistician is like a nineteenth-century mathematician: on one hand they were working on problems in mechanics, fluid dynamics, optics, astronomy, etc., and on the other hand, they were working on theories, structures and methods. In the modern world, statistics is one of the very few disciplines that still enjoys such interplay.\u2014Samuel Kou"], "link": "https://honglangwang.wordpress.com/2012/10/28/being-a-statistician/", "bloglinks": {}, "links": {"http://feeds.wordpress.com/": 1}, "blogtitle": "Honglang Wang's Blog"}, {"content": ["The following four big issues related with big data are really taking the big four aspects into consideration: \n \n Jelani Nelson, \u201c Sketching and streaming algorithms for processing massive data \u201d \n Ronitt Rubinfeld, \u201c Taming big probability distributions \u201d \n Jeff Ullman, \u201c Designing good MapReduce algorithms \u201d \n Ashwin Machanavajjhala and Jerome P. Reiter, \u201c Big Privacy \u201d \n \n From XRDS . \n And how to deal with the above four big issues? Here is a post about the Five Trendy Open Source\u00a0Technologies to help you to deal with big data."], "link": "https://honglangwang.wordpress.com/2012/10/27/big-issue-on-big-data/", "bloglinks": {}, "links": {"http://xrds.acm.org/": 4, "http://feeds.wordpress.com/": 1, "http://xrds.acm.org/blog": 1, "http://techcrunch.com/": 1}, "blogtitle": "Honglang Wang's Blog"}, {"content": ["I just attended GAW18, which was held October 13-17, 2012 at the Skamania Lodge in the beautiful Colombia River Gorge, Stevenson WA. It is a good experience for me and I think I will come back later to talk more about what I have learned from there."], "link": "https://honglangwang.wordpress.com/2012/10/24/gaw18/", "bloglinks": {}, "links": {"http://honglangwang.wordpress.com/": 1, "http://feeds.wordpress.com/": 1}, "blogtitle": "Honglang Wang's Blog"}, {"content": ["Towards Better PDF Management with the Filesystem \n What is life like for PhDs in computer science who go into industry? \n Online REPL for 17 programming languages \n Logistic regression vs. multiple\u00a0regression \u2014\u2013Many statisticians seem to advise the use of logistic regression over multiple regression by invoking this logic: \u201cA probability value can\u2019t exceed 1 nor can it be less than 0. Since multiple regression often yields values less than 0 and greater than 1, use logistic regression.\u201d\u00a0While we can understand this argument, our feeling is that, in the applied fields we toil in, that argument is not a very practical one. In fact a seasoned statistics professor we know says (in effect): \u201cWhat\u2019s the big deal? If multiple regression yields any predicted values less than 0, consider them 0. If multiple regression yields any values greater than 1, consider them 1. End of story.\u201d We agree. \n Scientific Python \n An everyday essential: the timer + My personal productivity rules \n Bill\u00a0Thurston \u2014by Terrace Tao; Bill Thurston, 1946-2012 \u2014by Peter Woit; Bill Thurston\u00a01946-2012 \u2014by David Speyer . \n \u00a0 Surviving a PhD : 10 top tips that shows how to survive your PhD \n How different PhD\u2019s work ifferences and similarities between departments about PhD process \n Countdown Begins : Countdown starts for submission of the thesis \n PhD Life is Wonderful oing PhD at Warwick University is a wonderful experience \n Too Many Emails In You r Inbox : Use Outlook folders to manage your emails \n Introduction to REX Facility : Videos for introducing Wolfson Research Exchange and its facilities \n Power of Supervisors : Control,inner happiness and optimisim \n \u00a0 Unorthodox Tools of a Researcher : Reflection and examples of unorthodox tools that helps you PhD period \n Homesickness and Culture Clashes : Homesickness of international students and cultural differences \n Choosing Your PhD Examiners : Tips for choosing the relevant examiners for PhD Viva \n Effective Research Tools : Examples of useful research tools \n PhD,Risks and Murphy\u2019s Law : \u201cAnything that can go wrong will go wrong\u201d according to Murphy\u2019s Law \n Will Data Scientists Be Replaced by Tools? \n Update: TeX Writer for iPad (+ LaTeX + AMS) \n Why physicists like models, and why biologists should \n The ENCODE project: lessons for scientific publication \n Perspectives From A Postdoc: What is a Postdoc? \n Chris Blattman gives advice on PhD students\u2019 NSF applications \n ENCODE floods the news networks\u2026 \n Maybe mostly useful for me, but for other people with Tumblr blogs, here is a way to insert Latex .\u2014From Simply Statistics \n Harvard Business school is getting in on the fun, calling the data scientist the sexy profession for the 21st century . Although I am a little worried that by the time it gets into a Harvard Business document, the hype may be outstripping the real promise of the discipline. Still, good news for statisticians! (via Rafa via Francesca D.\u2019s Facebook feed).\u2014From Simply Statistics \n The counterpoint is this article which suggests that data scientists might be able to be replaced by tools/software. I think this is also a bit too much hype for my tastes. Certain things will definitely be automated and we may even end up with a deterministic statistical machine or two. But there will continually be new problems to solve which require the expertise of people with data analysis skills and good intuition (link via Samara K.)\u2014From Simply Statistics"], "link": "https://honglangwang.wordpress.com/2012/09/23/useful-for-referring-9-23-2012/", "bloglinks": {}, "links": {"http://www.gradhacker.org/": 1, "http://repl.it/": 1, "http://www.forbes.com/": 1, "http://chrisblattman.com/": 1, "http://www.thinksciencenow.com/blog": 1, "http://terrytao.wordpress.com/": 1, "http://feeds.wordpress.com/": 1, "http://simplystatistics.org/": 1, "http://is-r.tumblr.com/": 1, "http://www.johnmyleswhite.com/": 1, "http://www.columbia.edu/": 1, "http://blog.openhelix.eu/": 1, "http://blogs.ac.uk/": 13, "http://sbseminar.wordpress.com/": 1, "http://www.genomesunzipped.org/": 1, "http://longnow.org/": 1, "http://chronicle.com/blog": 2, "http://cooldata.wordpress.com/": 1, "http://digitheadslabnotebook.blogspot.com/": 1, "http://blog.vivekhaldar.com/": 1, "http://hbr.org/": 1, "http://litchie.com/blog": 1}, "blogtitle": "Honglang Wang's Blog"}, {"content": ["Getting Started with the WordPress Competition \n Simple Made Easy \n An Education\u00a0Tsunami \u2014 Will on-line courses destroy universities? \n Universities Reshaping Education on the Web \n Explanation or Prediction? An Amazing Quote from Phil Schrodt \n Should you apply PCA to your data? \n Which classifiers are fast enough for exploring medium-sized data? \n Quick classifiers for exploring medium-sized data (redux) \n Is C++ worth it? \n Unbiased estimators can be terrible \n Things You Should Never Do, Part I \n The Joel Test: 12 Steps to Better Code \n Methodologists\u2019 Audience \n Bayesian Methodology in the Genetic\u00a0Age \n Interview with Michael Hammel, author of The Artist\u2019s Guide to GIMP \n Being Happy in Grad School \n 10 Fresh Tips for Finding Time to Blog \n A Quick Guide to Using Tumblr for Business \n Statistics Done Wrong \n Top N Reasons To Do A Ph.D. or Post-Doc in Bioinformatics/Computational\u00a0Biology \n Interview(s) with Vladimir Voevodsky with an introduction on motivic homotopy along with the video and transcript . \n Are there examples of non-orientable manifolds in nature? \n Kolmogorov Complexity \u2013 A\u00a0Primer \n Adventures at My First JSM (Joint Statistical Meetings) #JSM2012 \n Yes, I was hacked. Hard. \n Does Julia have any hope of sticking in the statistical community? \n How Genome Sequencing is Revolutionizing Clinical Diagnostics, from the ISMB Conference \n Advice for an Undergraduate \n 4 things you should know about choosing examiners for your\u00a0thesis \n The long tail of free online\u00a0education : The author also plans to teach a class on graph partitioning, expander graphs, and random walks online in Winter 2013. \n Teaching the World to Search \n Beyond Pinterest and Instagram \u2013 ten visual social networks that should be on your radar \n Making Ubuntu 12.04 useable \n Basic Understanding of Compressed Sensing"], "link": "https://honglangwang.wordpress.com/2012/08/12/useful-for-referring-8-12-2012/", "bloglinks": {}, "links": {"http://www.entrepreneur.com/": 1, "http://www.carlislerainey.com/": 1, "http://blog.nygenome.org/": 1, "http://caseybergman.wordpress.com/": 1, "http://lemire.me/blog": 1, "http://www.infoq.com/": 1, "http://blog.carlislerainey.com/": 1, "http://www.emptyage.com/": 1, "http://www.bytemining.com/": 1, "http://googleresearch.blogspot.com/": 1, "http://lanayarosh.com/": 1, "http://rjlipton.wordpress.com/": 1, "http://www.columbia.edu/": 1, "http://www.nytimes.com/": 1, "http://lucatrevisan.wordpress.com/": 1, "http://nuit-blanche.blogspot.com/": 1, "http://blog.kaggle.com/": 1, "http://thesiswhisperer.com/": 1, "http://stats.stackexchange.com/": 1, "http://www.problogger.net/": 1, "http://jeremykun.wordpress.com/": 1, "http://hao1990.blogspot.ca/": 1, "http://www.umn.edu/": 1, "http://blog.explainmydata.com/": 3, "http://www.johndcook.com/blog": 1, "http://www.walkingrandomly.com/": 1, "http://www.cwru.edu/": 1, "http://sciencemeanderthal.wordpress.com/": 1, "http://www.joelonsoftware.com/": 2, "http://theory.stanford.edu/": 1, "http://www.youtube.com/": 1, "http://mathoverflow.net/": 1, "http://liesdamnedliesstatistics.com/": 1, "http://www.refsmmat.com/": 1, "http://feeds.wordpress.com/": 1}, "blogtitle": "Honglang Wang's Blog"}, {"content": ["Today I saw a link question from reddit: How important is Java/C++ vs just using R/Matlab for big data? \u00a0 I learned C++ and Matlab when I was undergraduate and I am now using R by self learning as a PhD student in Stats Department. But living in this big data time, R is really not enough for scientific computing. Hence this link question is really what I want to know. Here I want to organize the interesting materials, including posts, about the programming, especially R and C++. \n First I want to mention that top projects languages in GitHub :\u00a0 JavaScript 20%, Ruby 14%, Python 9%, Shell 8%, Java 8%, PHP 7%, C 7%, C++ 4%, Perl 4%, Objective-C 3% among lots of other languages including R, Julia, Matlab. But for me, I only know about C and C++ among these Top 10 languages. For learning for people like me, I give the description list as follows: \n \n JavaScript \nJavascript is an ojbect-oriented, scripting programming language that runs in your web browser. It runs on a simplified set of commands, easier to code and doesn\u2019t require compiling. It\u2019s an important language since it\u2019s embedded into html that happens to to used in millions of web pages to validate forms, create cookies, detect browsers and improve page design and formatting. Big plus, it\u2019s easy to learn and use. \n Ruby and Ruby on Rails \nRuby is a dynamic, object-oriented, open-source programming language; Ruby on Rails is an open-source Web application framework written in Ruby that closely follows the MVC (Model-View-Controller) architecture. With a focus on simplicity, productivity and letting the computers do the work, in a few years, its usage has spread quickly. Ruby is very similar to Python, but with different syntax and libraries. There\u2019s little reason to learn both, so unless you have a specific reason to choose Ruby (i.e. if this is the language your colleagues all use), I\u2019d go with Python. \n Ruby on Rails \u00a0is one of the most popular web development frameworks out there, so if you\u2019re looking to do primarily web development you should compare\u00a0 Django \u00a0(Python framework) and RoR first. \n Python \nPython is an\u00a0 interpreted ,\u00a0 dynamically-typed \u00a0programming language. Python programs stress code readability, so even non-programmers should be able to decipher a Python program with relative ease. This also makes the language one of the easiest to learn and write code in quickly. Python is very popular and has a strong set of libraries for everything from numerical and symbolic computing to data visualization and graphical user interfaces. \n Java \nJava is an object-oriented programming language developed by James Gosling and colleagues at Sun Microsystems in the early 1990s. Why you should learn it: Hailed by many developers as a \u201cbeautiful\u201d language, it is central to the non-.Net programming experience. Learning Java is critical if you are non-Microsoft. \n PHP \nWhat is PHP? PHP is an open-source, server side html scripting language well suited for web developers as it can easily be embedded into standard html pages. You can run 100% dynamic pages or hybrid pages, 50% html + 50% php. \n C \nC is a standardized, general-purpose programming language. It\u2019s one of the most pervasive languages and the basis for several others (such as C++). It\u2019s important to learn C. Once you do, making the jump to Java or C# is fairly easy, because a lot of the syntax is common. C is a low-level, statically typed , compiled language . The main benefit of C is its speed, so it\u2019s useful for tasks that are very computationally intensive. Because it\u2019s compiled into an executable, it\u2019s also easier to distribute C programs than programs written in interpreted languages like Python. The trade-off of increased speed is decreased programmer efficiency. C++ is C with some additional object-oriented features built in. It can be slower than C, but the two are pretty comparable, so it\u2019s up to you whether these additional features are worth it. \n Perl \nPerl is an open-source, cross-platform, server-side interpretive programming language used extensively to process text through CGI programs. Perls power in processing of piles of text has made it very popular and widely used to write Web server programs for a range of tasks. \n \n This rank is only for the users on GitHub, which is biased for you. For me, I think C/C++, R, Julia, Matlab, Java, Python, Perl will be popular among stats sphere. \n \n Advice on learning C++ from an R background \n Integrating C or C++ into R, where to start? \n R for testing, C++ for implementation? \n Some thoughts on\u00a0Java \u2014compared with C++ \n A list of RSS C++ blogs \n Get started with C++ AMP \n C++11 Concurrency Series \n Google\u2019s Python Class and Google\u2019s C++ Class from Google Code University \n Integrating R and C++ \n Learn Python on Codecademy \n Learn How to Code Without Leaving Your Browser \n Minimal Advice to Undergrads on Programming \n Learning R Via Python (or the other way around). \n Bloom teaches Python for Scientific Computing at Berkeley ( available as a podcast ). \n \n What are the three most important programming languages to learn? \u2014The following is from Waleed Kadous , PhD in Computer Science: \n I would focus on learning three classes of languages to really understand the nature of programming and to have a decent toolkit. Everything else is basically variants on that. Learn a low-level language so you understand what goes on at the bare metal and so you can make hardware dance \nThe obvious choice here is C, but assembly language might also be good. Learn a language for architecting large systems \nIf you want to build large code bases, you\u2019re going to need one of the strongly typed languages. Personally, I think Java is the best choice here; but C++, Scala and even Ada are acceptable. Learn a language for scripting things together quickly \nThere are a few choices here: shell, Python, Perl, Lua. Any of these will do, but Python is probably the foremost. These are great for gluing existing pieces together. \n Now, if you only get three, that\u2019s it. But I\u2019m going to suggest two more categories. \n Learn a language that forces you to think differently about programming \nThese are majorly different world perspectives. Examples here would be functional programming, like Haskell, ML, etc, but also logic programming like Prolog. \n Learn a language that lets you build web-based applications quickly \nThis could be web2py or Javascript \u2014 but the ability to quickly hack together a web demo is really useful today."], "link": "https://honglangwang.wordpress.com/2012/07/30/c-and-r/", "bloglinks": {}, "links": {"http://dirk.eddelbuettel.com/blog": 1, "http://www.reddit.com/": 5, "https://github.com/": 1, "http://files.meetup.com/": 1, "http://www.quora.com/": 2, "http://cse.berkeley.edu/": 1, "http://cscs.umich.edu/": 1, "http://itunes.apple.com/": 1, "http://bartoszmilewski.com/": 1, "http://askldjd.wordpress.com/": 1, "http://en.wikipedia.org/": 6, "http://code.google.com/": 3, "http://feeds.wordpress.com/": 1, "http://www.codecademy.com/": 2, "http://www.myasmine.com/": 1, "http://feedproxy.google.com/": 1}, "blogtitle": "Honglang Wang's Blog"}, {"content": ["Lana Yarosh shared her with us 5 practices (developed through much trial and error) that helped her stay happy in grad school: \n \n Pick a good conference in your field and go to it every year (including your first year, even if you have to pay for it out of pocket) \u2014 when there were times that I thought about quitting (and there were those times), a conference has always brought me the energy, the influx of new ideas, and the wonderful people that I needed to get back in gear. My two chosen conferences are CHI (Human Factors in Computing) and IDC (Interaction Design and Children). \n Avoid \u201ctime shifting\u201d whenever possible \u2014 time shifting is when you end up shifting something you need to do today to another day in order to do some piece of work (e.g., \u201cI\u2019ll sleep tomorrow,\u201d \u201cI\u2019ll get in touch with my advisor some other day, today I need to focus on this paper,\u201d etc.). In my experience, time shifting only makes me more stressed out and less productive in the long run. If you need to skip this conference deadline and try for another, then maybe that\u2019s the thing to do. \n Get to know the people in your program \u2014 these folks are not only great to get to know as friends, but also will likely be your colleagues in the years to come. Also, they can commiserate with anything that you\u2019re currently facing so they\u2019re a great source of social support. \n Have a routine that includes all of the things that are important to you \u2014 make a list of what is important to your happiness and make sure that you get a chance to do these things. My list includes things like swimming, hanging out with friends, exploring new places, reading for fun, and yes, research. You may have to set boundaries to make sure that the important things actually make it on your schedule, but it\u2019s totally worth it to your overall level of happiness. I once told my advisor that I would not do certain types of academic activities because it would interfere with my work/life balance. He wasn\u2019t happy at first, but later on accepted it and even said he admired me sticking to my guns on this (but, do pick your battles). \n Don\u2019t be afraid to ask for help \u2014 when you\u2019re struggling or need something, ask for it. I hate asking for help, but I basically went crazy when I tried to handle everything myself. I\u2019ve gotten help from my advisor, my committee members, my lab mates, my roommates, my extended academic family, my biological family, people I\u2019ve met at CoC Happy Hour, and professionals (the Counseling Center at Georgia Tech is free for students, may be the same at your school). Don\u2019t be afraid of looking lame. Sometimes you have to decide whether you want to save your face or your ass and the choice should be clear. \n \n At the end of the post , he mentioned that \n For me, I\u2019m more productive when I\u2019m happy. So, when I plan to \u201cswim, do 8 hours of work, and have dinner with friends,\u201d I actually get a lot more done than when I plan to \u201cwork for the next 16 hours.\u201d And, I\u2019m\u00a0immeasurably happier. \n This is really what I want!!! \n Something is worth learning ahead of time: from the post \n A real-time skill is something you need for live performance. If you\u2019re going to speak French, you have to memorize a large number words before you need them in conversation. Looking up every word in a English-French dictionary as needed might work in the privacy of your study, but it would be infuriatingly slow in a face-to-face conversation. Some skills that we don\u2019t think of as being real-time become real-time when you have to use them while interacting with other people. \n More subtle than real-time skills are what I\u2019m calling bicycle skills . Suppose you own a bicycle but haven\u2019t learned to ride it. Each day you need to go to a store half a mile away. Each day you face the decision whether to walk or learn to ride the bicycle. It takes less time to just walk to the store than to learn to ride the bicycle and ride to the store. If you always do what is fastest that day, you\u2019ll walk every day. I\u2019m thinking of a bicycle skill as anything that doesn\u2019t take too long to learn, quickly repays time invested, but will never happen without deliberate effort."], "link": "https://honglangwang.wordpress.com/2012/07/30/being-happy-in-grad-school/", "bloglinks": {}, "links": {"http://feeds.wordpress.com/": 1, "http://lanayarosh.com/": 2, "http://www.johndcook.com/blog": 1}, "blogtitle": "Honglang Wang's Blog"}, {"content": ["The Hardy-Weinberg equilibrium is a principle stating that the genetic variation in a population will remain constant from one generation to the next in the absence of disturbing factors. When mating is random in a large population with no disruptive circumstances, the law predicts that both genotype and allele frequencies will remain constant because they are in equilibrium. \n The Hardy-Weinberg equilibrium can be disturbed by a number of forces, including mutations, natural selection, nonrandom mating, genetic drift, and gene flow. For instance, mutations disrupt the equilibrium of allele frequencies by introducing new alleles into a population. Similarly, natural selection and nonrandom mating disrupt the Hardy-Weinberg equilibrium because they result in changes in gene frequencies. This occurs because certain alleles help or harm the reproductive success of the organisms that carry them. Another factor that can upset this equilibrium is genetic drift, which occurs when allele frequencies grow higher or lower by chance and typically takes place in small populations. Gene flow, which occurs when breeding between two populations transfers new alleles into a population, can also alter the Hardy-Weinberg equilibrium. \n Because all of these disruptive forces commonly occur in nature, the Hardy-Weinberg equilibrium rarely applies in reality. Therefore, the Hardy-Weinberg equilibrium describes an idealized state, and genetic variations in nature can be measured as changes from this equilibrium state. \n From Hardy-Weinberg equilibrium . \n PS: In a mathematical way, we have the following: \n ."], "link": "https://honglangwang.wordpress.com/2012/07/23/%e3%80%90bio-glossary%e3%80%91hardy-weinberg-equilibrium/", "bloglinks": {}, "links": {"http://www.nature.com/": 1, "http://feeds.wordpress.com/": 1}, "blogtitle": "Honglang Wang's Blog"}, {"content": ["The following from Revolutions : \n \n \n John Myles White, self-described \u201cstatistics hacker\u201d and co-author of \u201c Machine Learning for Hackers \u201d was interviewed recently by The Setup . In the interview, he describes his some of his go-to R packages for data science: \n Most of my work involves programming, so programming languages and their libraries are the bulk of the software I use. I primarily program in\u00a0 R , but, if the situation calls for it, I\u2019ll use Matlab ,\u00a0 Ruby or Python .\u00a0\u2026 \n That said, for me the specific language I use is much less important than the libraries availble for that language. In R, I do most of my graphics using ggplot2 , and I clean my data using plyr , reshape , lubridate and stringr . I do most of my analysis using rjags , which interfaces with JAGS , and I\u2019ll sometimes use glmnet \u00a0for regression modeling. And, of course, I use\u00a0 ProjectTemplate \u00a0to organize all of my statistical modeling work. To do text analysis, I\u2019ll use the\u00a0 tm and lda \u00a0packages. \n Also in JMW\u2019s toolbox: Julia, TextMate 2, MySQL, Dropbox and a beefy MacBook. Read the full interview linked below for an insightful look at how he uses these and other tools day to day. \n The Setup / Interview:\u00a0 John Myles White"], "link": "https://honglangwang.wordpress.com/2012/07/18/the-r-packages-in-a-data-scientists-toolbox/", "bloglinks": {}, "links": {"http://www.mathworks.com/": 1, "http://www.ruby-lang.org/": 1, "http://blog.revolutionanalytics.com/": 3, "http://mcmc-jags.sourceforge.net/": 1, "http://john.usesthis.com/": 2, "http://had.co.nz/": 2, "http://www.johnmyleswhite.com/": 1, "http://www.python.org/": 1, "http://www.r-project.org/": 1, "http://usesthis.com/": 1, "https://github.com/": 2, "http://plyr.co.nz/": 1, "http://feeds.wordpress.com/": 1, "http://cran.r-project.org/": 3, "http://www.projecttemplate.net/": 1, "http://www.revolutionanalytics.com/": 1}, "blogtitle": "Honglang Wang's Blog"}, {"content": ["The basics of statistical simulation \n A statistical simulation often consists of the following steps: \n \n Simulate a random sample of size N from a statistical model. \n Compute a statistic for the sample. \n Repeat 1 and 2 many times and accumulate the results. \n Examine the union of the statistics, which approximates the sampling distribution of the statistic and tells you how the statistic varies due to sampling variation. \n \n The key to improving the simulation is to restructure the simulation algorithm as follows: \n \n Simulate many random samples of size N from a statistical model. \n Compute a statistic for each sample. \n Examine the union of the statistics, which approximates the sampling distribution of the statistic and tells you how the statistic varies due to sampling variation. \n \n Please refer to the two posts @RickWicklin , 1) Eight tips to make your simulation run faster and 2) Simulation in SAS: The slow way or the BY way for details."], "link": "https://honglangwang.wordpress.com/2012/07/18/statistical-simulation/", "bloglinks": {}, "links": {"http://twitter.com/": 1, "http://feeds.wordpress.com/": 1, "http://blogs.sas.com/": 2}, "blogtitle": "Honglang Wang's Blog"}]