[{"blogurl": "http://blogs.sas.com/sasdummy\n", "blogroll": [], "title": "The SAS Dummy"}, {"content": ["I work on a variety of projects at SAS, most of which require some level of team collaboration in source management systems. Due to the many technologies that we work with, SAS developers use different source management tools for different purposes. I've got projects in CVS , Subversion , and Git . \n When it comes to writing and maintaining SAS programs (are you ready for this shocker?), I use SAS Enterprise Guide almost exclusively. I know how to use all of the other tools, but this is where I'm most productive. \n So, here's the question that I hear all of the time: Does SAS Enterprise Guide integrate with a source control system? The answer is No. But, it does integrate with the Windows file system. And the Windows file system integrates with source control. \n Frankly, this approach is how I prefer to work anyway. Probably due to bad past experiences with source control integration in other IDEs, I prefer to deal with source control on the file system. When my content is ready to commit, I use the file system integration (usually in the form of Windows shell extensions) to review the commit, check differences and history, manage file merges (if needed), and actually commit the files. \n For example, here is a picture of one of my project directories where we're using Subversion. I'm using TortoiseSVN to access the repository . You can see the icon overlays that indicate the files that are up-to-date (green checks) and those that are modified locally (red exclamation). \n \n How to enable relative file references \n SAS Enterprise Guide allows you to link in SAS programs and external data files (such as Excel or CSV files), so you don't have to lock up all of your content in the project (EGP) file. When working with source control, you need to enable one additional trick: tell SAS Enterprise Guide to treat these file references as relative paths. (There's nothing like an absolute file path -- specific to your machine -- for messing up your collaboration effort.) \n This setting is maintained per project . To set it: \n \n Select File->Project Properties. The Properties window appears.\n \n Select the File References tab.\n \n Check the box: \"Use paths relative to the project for programs and importable files\"\n \n \n An example on github \n To prove that this actually works, I \"refactored\" one of my own projects to share with you. It's the project that analyzes my Netflix rental/streaming history . I placed the Excel files in a \"./data\" subfolder, and all of the SAS programs in a \"./programs\" subfolder. These assets, combined with the process flow \"recipes\" within the project, should allow anybody to re-run my project and to replicate my results. ( Note : these projects do assume a Local SAS session. If you don't have a Local SAS, you must use Tools->Project Maintenance to replace the server references for your environment.) \n The projects (one for v4.3, one for v5.1) are in this github repository . Git is fast becoming the most popular source control repository for all types of developers, so it doesn't get much more modern than this. If you're brave and you have some time to kill, give it a try. And please, don't be too critical of my movie rental history.\n tags: CVS , github , SAS Enterprise Guide , scm , source control , Subversion"], "link": "http://feedproxy.google.com/~r/ASasBlogForTheRestOfUs/~3/tGt-Sevhz0M/", "bloglinks": {}, "links": {"http://tortoisesvn.net/": 1, "https://github.com/": 1, "http://en.wikipedia.org/": 3, "http://blogs.sas.com/": 9}, "blogtitle": "The SAS Dummy"}, {"content": ["According to the Daily Writing Tips blog , describing a thing as \"somewhat unique\" is bad form. Unique means \"one of a kind\", so either it is or it is not . The famous example (which the style police will use to chide you) is that you can't have something as \"somewhat unique\" any more than a woman can be \"somewhat pregnant\". \n But when programming and dealing with computers, we often deal with the concept of \"unique enough\". And to fill that niche, we have the Globally Unique Identifiers, or GUIDs . (Most people pronounce this \"GOO-ids\".) These are also called UUIDs, for \"universal unique identifiers\". (But the Universe is pretty big, isn't it? Therefore using this term makes a pretty bold claim.) \n A GUID is a 128-bit value, allowing for 2 128 (or 3.4028237e+38) possibilities. Computer processes generate GUIDs behind the scenes all of the time for lots of purposes, and among geeks we joke that they will become a scarce resource, like helium . But rest assured: it will take us a long time to go through all of the possible GUID values. \n When we see GUID values in the wild, they are usually expressed as a series of 32 hexadecimal characters, often containing hyphens like a crazy sort of phone number (as if you might attempt to commit it to memory): \n \n efb40385-6b5c-4e7f-9f19-1daeb7e97ed9\n \nI created the above GUID fresh for this blog (it's never been seen before!) using a tool on my PC called uuidgen , which is part of the Windows SDK. \n In the SAS world, I can use the UUIDGEN function to create these as needed from within my SAS program: \n\n data wastedGuids;\n do x = 1 to 10 ;\n guid = uuidgen ( ) ;\n output ;\n end ;\n run ; \n\n Result: \n \n The UUIDGEN function relies on code libraries that are system-dependent , as there are different algorithms for creating GUID values. When I run the above program on a Linux version of SAS, I get a different pattern of results: \n \n I suppose -- now that I've promoted this function on the blog -- we'll have SAS programmers cranking GUIDs out day-and-night. At this rate, will there be any GUIDs left for our grandchildren? Well, I can't worry about that -- live for today, I say. \n Bonus joke: How do you catch a unique rabbit? (Reply in the comments, please.) \n tags: SAS programming , uuidgen"], "link": "http://feedproxy.google.com/~r/ASasBlogForTheRestOfUs/~3/ixpGpz_iUoE/", "bloglinks": {}, "links": {"http://msdn.microsoft.com/": 1, "http://betterexplained.com/": 1, "http://blogs.sas.com/": 4, "http://support.sas.com/": 2, "http://www.popularmechanics.com/": 1, "http://www.dailywritingtips.com/": 1}, "blogtitle": "The SAS Dummy"}, {"content": ["I've been finishing up just a bit of the \"boilerplate\" content for my forthcoming book about custom tasks . One of the final tasks is to write the introduction, also known as the \"About this Book\" section. \n SAS Press offers a template with examples of a few essential topics to address in this part. One of the topics describes the typographical standards that are used throughout the book. This describes the obvious stuff: what code sections look like, the special meaning of words in bold type, and so on. \n SAS Press authors have considerable leeway when choosing how to cover such topics. As the author of several technical books, papers, and this blog, I doubted that a section on typography was even needed. However, in the event that the editors deem it essential, I provided a draft, which follows. \n Typographical Conventions Used in this Book \n The following typographic conventions are used in this book: \n \n \n regular \n used for most of the regular words in this book. Longer words have more regular letters than shorter words. \n \n \n Italic \n used for the words that are slanted, or leaning just a little bit to the right. \n \n \n Bold \n used to indicate that this word is slightly thicker than the other words around it. \n \n \n Word\u2192Another Word \n used when one word points to another word. It's a subtle encouragement to continue reading from left-to-right. \n \n \n As a result, I've been told to expect that this section will most likely not appear in the book. I hope that my readers don't miss it too much.\n tags: sas press"], "link": "http://feedproxy.google.com/~r/ASasBlogForTheRestOfUs/~3/3FTZ-REvORY/", "bloglinks": {}, "links": {"http://blogs.sas.com/": 2}, "blogtitle": "The SAS Dummy"}, {"content": ["You might know about the many automatic macro variables that are available in SAS . They provide plenty of information about the SAS environment, such as the current user ( SYSUSERID ), the SAS version ( SYSVER and SASVLONG ), and the operating system where SAS is running ( SYSCP and SYSCPL ). That information is often useful for your SAS programs and reporting output. \n Did you know that SAS Enterprise Guide also generates several macro variables? These provide information about the SAS Enterprise Guide environment, which is often different than the SAS environment when you're connected to a remote SAS workspace. \n You can use these macro variables to code various logic tricks into your programs, such as to determine where the current project file resides and assign a library to its path . \n Or, even if you don't write SAS programs, you can use the macro variables in task titles and footnotes. For example: \n Generated by &_CLIENTUSERNAME (&_CLIENTUSERID) with SAS Enterprise Guide &_CLIENTVERSION \n For me, this yields: \n Generated by 'Chris Hemedinger' ('sascrh') with SAS Enterprise Guide '5.100.0.12019' \n Here's the complete list of the generated macro variables (as of SAS Enterprise Guide 4.3 and 5.1). These macro variables are also generated in the SAS Add-In for Microsoft Office. You can always find this list in the SAS Enterprise Guide online help, which you access from the help menu. Simply search the keyword index for \"macro\". \n \n Macro Variable \n Description \n \n _CLIENTAPP \n Name of the client application. \n \n \n _CLIENTMACHINE \n Client machine node name. \n \n \n _CLIENTPROJECTNAME \n The filename for the project. \n \n \n _CLIENTPROJECTPATH \n The full path and filename for the project. \n \n \n _CLIENTTASKFILTER \n The filter that is defined for the task. You can use this macro variable in the titles and footnotes of the task, so that the filter information is displayed in the title or footnote of your results. \n \n \n _CLIENTTASKLABEL \n Label for the current task. This is the text label that is displayed in the project tree and the process flow. \n \n \n _CLIENTUSERID \n User ID of the client user. \n \n \n _CLIENTUSERNAME \n Full user name, if that information is available. \n \n \n _CLIENTVERSION \n Application version, including build number. \n \n \n _SASHOSTNAME \n Server node name (IP address or DNS name). \n \n \n _SASPROGRAMFILE \n The full path and filename of the SAS program that is currently being run. This macro variable is available only for SAS program files that are saved on the same server on which your SAS Enterprise Guide code is being run. \n \n \n _SASSERVERNAME \n Name of the logical server. \n \n \n And remember, you can easily see all of the available macro variables, along with their current values, by using the SAS Macro Variable viewer custom task .\n tags: macro programming , SAS Enterprise Guide"], "link": "http://feedproxy.google.com/~r/ASasBlogForTheRestOfUs/~3/uw6-XPMcV9s/", "bloglinks": {}, "links": {"http://blogs.sas.com/": 4, "http://support.sas.com/": 4}, "blogtitle": "The SAS Dummy"}, {"content": ["As citizens of the Internet, we are all familiar with IP addresses -- probably more so than our Internet founding fathers had ever intended. These addresses are typically represented in a 4-piece segmented list of numbers separated by dots. Here is an example: \"149.173.5.120\". \n Each segment is called an octet because it contains 8 (count 'em, eight!) bits. The four-octect IP address is part of the IPv4 standard. \n Note: There is a newer IPv6 standard (featuring 16 octets) that many newer networks use and which allows for more addresses. This has become necessary because all new consumer products are required by law to connect to the Internet. (I think that each of my daughter's \"Polly Pocket\" pieces can connect to WiFi.) But in this article I'm ignoring IPv6. \n The easy-to-read segmented IP address is actually a 32-bit number, and sometimes it is useful to convert the display value into its numeric form. For example, consider the databases that help you to map an IP address to a geographic location in the world. These databases use a numerical range to map an address to a country or city. ( For more on range-based geocoding, see this topic in the PROC GEOCODE documentation. ) \n Here is a SAS program that converts a character-based, 4-segment IP address into its equivalent numeric value. It uses the SCAN function, a DATA step ARRAY, and a little bit of math to do the work: \n\n /* Calculate the numerical IP from \"segmented\" IP address   */ \n /* Example: (from Right to Left)          */ \n /* 1.2.3.4 = 4 + (3 * 256) + (2 * 256 * 256) + (1 * 256 * 256 * 256) */ \n /* is 4 + 768 + 13,1072 + 16,777,216 = 16,909,060     */ \n data ip_numbers ( keep =ip_address ip_numeric ) ;\n infile datalines dsd;\n length ip_address $ 20 ip_numeric 8 ;\n input ip_address;\n array ip_part { 4 } ;\n do i = 1 to 4 ;\n ip_part { i } = scan ( ip_address,i, '.' ) ;\n end ;\n ip_numeric = ip_part { 4 } +\n  ( ip_part { 3 } * 256 ) +\n  ( ip_part { 2 } * 256 * 256 ) +\n  ( ip_part { 1 } * 256 * 256 * 256 ) ;\ndatalines;\n115.85.65.148\n117.203.114.198\n118.96.201.156\n119.247.220.11\n12.201.116.58\n128.2.38.96\n128.204.197.27\n128.204.207.83\n134.102.237.2\n141.155.113.98\n169.2.124.79\n172.16.26.231\n172.16.30.229\n173.234.211.69\n176.63.76.232\n178.157.198.132\n178.32.145.44\n178.32.177.184\n178.33.174.213\n178.63.199.204\n184.82.208.149\n188.165.187.71\n;\n run ; \n\n Here's the output: \n \n With this mapping, I can then combine my collection of IP addresses with one of the IP-to-geolocation databases that are available. (SAS provides a macro to help work with MaxMind, which you can learn about in this topic. ) Here's a sample result: \n \n tags: geocode , IP addresses , IPv4 , SAS programming , SAS tips"], "link": "http://feedproxy.google.com/~r/ASasBlogForTheRestOfUs/~3/UZb6algesH0/", "bloglinks": {}, "links": {"http://blogs.sas.com/": 7, "http://en.wikipedia.org/": 2, "http://support.sas.com/": 2}, "blogtitle": "The SAS Dummy"}, {"content": ["Milestone achieved: I've completed the final chapter of Creating Custom Tasks for SAS Enterprise Guide using Microsoft .NET and turned it over to SAS Press for editing and production. It's scheduled to be available in early 2013. \n I committed to writing this book nearly 5 years ago. I'll engage in more navel gazing about this process in some future post; I'll use this post to share some metrics (some useful, some not) about the final result. \n I used Microsoft Word to create and edit the chapters of my book. Did you know that Microsoft Word keeps track of several interesting properties of your documents? If you right-click on the document in Windows Explorer, select Properties and then the Details tab, you'll see what I mean: \n  \nI figured that there must be a way to \"harvest\" these values automatically, and...I was correct! (Thank you, Internet.) I used this scripting technique in Windows PowerShell to create a CSV version of several of these fields for the book chapters. \n I imported the CSV file into SAS Enterprise Guide, and used the generated program as the basis for this SAS program, which you are welcome to review . \n I learned a few things in the process, some of which I suspect aren't exactly true. Or perhaps they are simply misleading. Here's what the numbers say about the book: \n \n There are 17 chapters. (That's a fact.)\n \n These 17 chapters underwent a total of 434 revisions. (That number is suspicious, and discounts chapters that got broken out of other chapters or merged along the way.)\n \n The book has 257 pages (not counting front/back matter, adjustments likely for images resizing, using the \"small\" book profile/page size).\n \n A better metric: the book contains nearly 66,000 words.\n \n There are approximately 60 pictures/screenshots.\n \n First chapter file was created on 22JAN2008 and final revision happened on 29SEP2012. ( That sounds about right to me. )\n \n Total \"editing time\" according to Word: 10,572 minutes. That's about 176 hours. That feels like a low number to me, but maybe it depends on how Word works with its timer .\n \n \n In addition to all of the writing, I developed several beefy examples as companion material. Some of those examples have been presented already on this blog as ready-to-use tools (like this one and this one ). Soon, those readers who are interested will have a behind-the-scenes look at how the tasks are put together. \n I'm excited to be on this side of the writing process, though there is still much work yet to do. Thanks for sticking with me so far; you'll see more examples and excerpts coming via this blog over the next few months.\n tags: SAS custom tasks , sas press"], "link": "http://feedproxy.google.com/~r/ASasBlogForTheRestOfUs/~3/2P2hjuB2xBU/", "bloglinks": {}, "links": {"http://blogs.technet.com/": 1, "http://blogs.sas.com/": 7, "http://laurencetimms.wordpress.com/": 1, "http://support.sas.com/": 1}, "blogtitle": "The SAS Dummy"}, {"content": ["The following is an excerpt from my forthcoming book: Creating Custom Tasks for SAS Enterprise Guide using Microsoft .NET . \n If your custom task generates a SAS program, the chances are pretty high that your program will reference one or more variables within a SAS data set. Despite our best efforts, not all variable names follow the old-style SAS naming rules, and SAS has an option for that. \n The option is called VALIDVARNAME=ANY . When enabled, SAS allows you to use variable names that contain spaces or special characters in their names. However, SAS requires that you express these variable names by using special \" name literal \" syntax, which includes quoting the name and adding n as a name indicator. \n For example, you can create a variable named \"My Crazy Variable Name!\" with SAS code like this: \n\n length \"My Crazy Variable Name!\" n 8 ; \n\n While most SAS programmers don't willingly use variable names like this, SAS Enterprise Guide makes it easy for you to create such names unwittingly. For example, when you import data from a Microsoft Excel spreadsheet, the column headings might not comply with SAS naming rules. Since these column headings automatically become the variable names in your data set, SAS Enterprise Guide generates the proper literal syntax automatically. \n As a task developer, you have to make sure that you also handle such variable names, as they might be found in the task's input data. The SAS Task Toolkit library provides a helper function that automatically applies the name literal syntax: SAS.Tasks.Toolkit.Helpers.UtilityFunctions.SASValidLiteral() . Here's an example of how to use it in C# (where VariableTotal and VariableMeasure are local string fields that contain names of SAS variables): \n \nusing SAS.Tasks.Toolkit.Helpers; \n/* ... */\nprogram.AppendFormat(\" COLUMNS {0} {1}; \\n\",\n UtilityFunctions.SASValidLiteral(VariableTotal), \n UtilityFunctions.SASValidLiteral(VariableMeasure));\n \n The SASValidLiteral function simply returns the name of the variable as-is, unless the variable name doesn't comply with SAS naming rules. In that case, it quotes the name and adds the n indicator. It also handles other evil little nuances, such as the case where the variable name contains a quote, in which case it uses the proper approach to escape that character and thus keep the SAS language parser happy. \n tags: .net , SAS custom tasks , SAS options"], "link": "http://feedproxy.google.com/~r/ASasBlogForTheRestOfUs/~3/OpVX3QAhMcI/", "bloglinks": {}, "links": {"http://blogs.sas.com/": 3, "http://support.sas.com/": 3}, "blogtitle": "The SAS Dummy"}, {"content": ["Last week I attended a meeting of the Toronto Area SAS Society . (Okay, I didn't just attend; I was a presenter as well .) This user group meeting contained a feature that I had never seen before: \"Solutions to the Posed Problem\". \n Weeks before the meeting, an \"open problem\" was posted to the TASS community group site . The problem included 134 records of time series data and an objective: create a data set that contains just the most recent record (according to the date and time values) for each unique identifier in the set. \n Here's a snapshot of a data sample, with the desired output records highlighted. \n \nIt's a simple little puzzle similar to those that SAS programmers must deal with every day. But the instructions for this particular problem were to \"use an interface product\" to solve it. The implication was \"use SAS Enterprise Guide\", but the entrants got creative with that requirement. Some used SAS Enterprise Guide to import the data (which was provided as an Excel file), but then wrote a program to do the rest. Some simply opened a program node and wrote code to do the whole shebang. \n Art Tabachneck, one of the TASS leaders and a frequent SAS-L contributor, tried to use just \"point-and-click\" to solve the problem without resorting to a program node, but he didn't manage it. He knew that the Query Builder was the best chance for an SQL solution, and that he would need a HAVING clause to make it work. He was on the right track! But in the limited time that he had to devote to the problem, he couldn't bend the Query Builder to his will. In the end, Art wound up working within the program node, just like most other participants. \n When I returned home, I made it my mission to devise a \"pure\" task-based solution. And here it is: \n  \n Step 1: Import the Excel file \nThat's easy. Even as Art observed, you simply select File->Import Data, point to the XLS file on your local machine, and then click Finish when the wizard appears. The default behavior produces a perfect SAS data set. \n Step 2: Start with the query \nWith the output from the import step, select the Query Builder task. We need the all of the columns represented, so drag all columns over to the Select Data tab. \n Step 3: Create a computed column for a combined date-time value \nAll of the successful solutions did this step somehow. I borrowed from the most elegant of these and created an \"Advanced expression\"-based column named \"Test_DateTime\" as: \n \nDHMS(t1.Test_Date,0,0,t1.test_time)\n \n Step 4: Create a MAX aggregation version of that computed column \nCreate another column based on Test_DateTime column, and this time apply the MAX summarization. Name the new column MAX_of_Test_DateTime. \n This is the trick! As soon as you have an aggregated measure as part of the query, the Filter tab will divide into two sections, revealing a \"Filter the summarized data\" section. That's the piece that allows you to generate a \"Having\" structure. \n Step 5: Create a Having filter based on the summarized column \nThe filter is effectively: \n \n CALCULATED MAX_of_Test_DateTime = CALCULATED Test_DateTime\n \nThe Query Builder generates more verbose SQL than the above, but you get the idea. Here's a screen shot that shows the Having filter in place. \n  \n Step 6: Change the Grouping to include just SAMPLE_ID \nWhen you have a summarized measure in the query the Query Builder provides control over the grouping behavior. By default, the query is \"grouped by\" all non-summarized columns. But for this query, we want to group only by each value of the Sample_ID column. On the Select Data tab, uncheck \"Automatically select groups\". Then click the Edit Groups button and exclude all except for t1.Sample_ID. \n Here's the Select Data tab with the proper grouping in place: \n  \n When you run the query, you should get the desired result. Here's the SQL that was generated: \n\n PROC SQL ;\n CREATE TABLE WORK.LATEST_TIME_PER_ID AS \n SELECT DISTINCT t1.Sample_id, \n t1.Test_Date, \n t1.test_time, \n t1.test_value\n FROM WORK.OPEN_QUESTIONS t1\n GROUP BY t1.Sample_id\n HAVING ( MAX ( DHMS ( t1.Test_Date, 0 , 0 , t1.test_time ) ) ) \n   = ( DHMS ( t1.Test_Date, 0 , 0 , t1.test_time ) ) ;\n QUIT ; \n\n I want to thank the members of TASS for this little puzzle. I actually learned some new things by reviewing the various solutions that were entered -- and I think that's the point of the exercise. If you're curious, here's a link to the complete \"report\" of submitted solutions .\n tags: SAS Enterprise Guide , sas users , sql , TASS"], "link": "http://feedproxy.google.com/~r/ASasBlogForTheRestOfUs/~3/53oQ1LC9wYQ/", "bloglinks": {}, "links": {"http://www.sas.com/": 1, "http://blogs.sas.com/": 9, "http://sascanada.ning.com/": 1, "http://www.torsas.ca/": 1}, "blogtitle": "The SAS Dummy"}, {"content": ["One of the often-cited side effects of moving from \"Base SAS\" (SAS on your PC, or Display Manager) to SAS Enterprise Guide is the loss of \"X\" command privileges -- that is, the ability for your SAS programs to invoke other programs via the operating system shell. We call this \"XCMD\" thanks to the SAS system option that controls it , but in practice this means that SYSTASK, FILENAME PIPE, and similar invocations no longer work. \n These statements would have continued to work from SAS Enterprise Guide but for one decision that SAS R&D made back before the turn of the century (yes, 1999): by default, SAS workspace servers are configured with NOXCMD in place. (That decision applied even when using SAS Enterprise Guide and your local SAS install - a silly restriction that has been lifted in SAS 9.3 .) \n SAS workspace servers (and their multiuser cousins, SAS stored process servers) can run all types of SAS programs on the user's behalf, where the user might not be a savvy SAS programmer or at all familiar with the operating environment. For example: today an analyst might click a button in Excel and have SAS-produced results magically appear in his spreadsheet. Should that guy have the ability (inadvertently or purposefully) to submit a shell command where SAS is running? SAS R&D erred on the side of the conservative IT admin and said \"nope\". \n Initially, it was difficult to override this restriction. The only way to allow the XCMD operations was to specify a less-than-documented double-negative option -NONOXCMD . But today it's much easier to throw the switch back the other way, implying that allowing shell commands in a SAS workspace session is indeed a sanctioned configuration. Paul Homes has a very good blog post on the process for toggling \"Allow XCMD\" - it's a simple checkbox in SAS Management Console. \n So if you're a SAS administrator who is faced with the plea from users to \"please allow XCMD!\", how should you decide whether to grant the request? (Don't hide behind the excuse that NOXCMD must be the default for a reason -- often, the default settings aren't good enough for every situation .) \n Admins need to know that there is nothing nefarious about SAS processes that make them especially risky. The SAS executive does not run as root or as some kind of super user -- at least not in the traditional SAS workspace session, which runs under the user account of the authenticated user. \n I believe that the decision to enable XCMD can be made at most sites by following a simple questionnaire: \n 1. Do your SAS users have user accounts on the host server system, and are those accounts used when connecting via SAS Enterprise Guide? \n 2. If YES, can those users SSH into (or otherwise terminal into) the host server and run commands? \n If the answer is YES to both, then the users already can technically do what they need and the NOXCMD is an artificial, inconvenient barrier. There is no additional risk to toggle it, so why not make your users happy? \n If the answer is NO to 1 or 2, then you may need to vet the user and/or his task further before taking action. It's an opportunity for further conversation. (Hey, don't laugh! Some SAS admins do talk to users!) \n There are scenarios where admins should proceed with more caution. For example, what if your SAS workspace is configured to use a group account, and not that of the person using SAS Enterprise Guide? Or what about SAS stored process servers, which run under system account (like sassrv)? If your configuration doesn't guarantee that any SAS-launched shell process will run with the end user's identity (and therefore, with his privileges and accountability), then it's wise to be more conservative. \n None of us want to see a SAS-related process get blamed for some system catastrophe. But good information, and perhaps a bit of onsite testing, should drive the decision. \n (This post was inspired by this thread on SAS-L. ) \n tags: SAS Enterprise Guide , sas-l , xcmd"], "link": "http://feedproxy.google.com/~r/ASasBlogForTheRestOfUs/~3/9I-w4VWlrp0/", "bloglinks": {}, "links": {"http://listserv.uga.edu/": 1, "http://www.sas.com/": 1, "http://blogs.sas.com/": 5, "http://en.wikipedia.org/": 1, "http://support.sas.com/": 2, "http://platformadmin.com/blog": 1}, "blogtitle": "The SAS Dummy"}, {"content": ["Regular expressions provide a powerful method to find patterns in a string of text. However, the syntax for regular expressions is somewhat cryptic and difficult to devise. This is why, by my reckoning, approximately 97% of the regular expressions used in code today were copied and pasted from somewhere else. (Who knows who the original authors were? Some experts believe they were copied from ancient cave paintings in New Mexico.) \n You can use regular expressions in your SAS programs, via the PRX* family of functions. These include PRXPARSE and PRXMATCH , among others. The classic example for regular expressions is to validate and standardize data values that might have been entered in different ways, such as a phone number or a zip code (with or without the plus-4 notation) . \n In this post I'll present another, less-trodden example. It's a regular expression that validates the syntax of a SAS variable name. (Now, I'm talking about the regular old traditional SAS variable names, and not those abominations that you can use with OPTIONS VALIDVARNAME=ANY .) \n SAS variable names, as you know, can be 1 to 32 characters long, begin with a letter or underscore, and then contain letters, numbers, or underscores in any combination after that. If all you need is a way to validate such names, stop reading here and go learn about the NVALID function , which does exactly this. But if you want to learn a little bit about regular expressions, read on. \n The following program shows the regular expression used in context: \n\n data vars ( keep = varname valid ) ;\n length varname $ 50 ;\n input varname 1 - 50 ;\n re = prxparse ( '/^(?=.{1,32}$)([a-zA-Z_][a-zA-Z0-9_]*)$/' ) ;\n pos = prxmatch ( re, trim ( varname ) ) ;\n valid = ifc ( pos> 0 , \"YES\" , \"NO\" ) ;\ncards;\nvar1\nno space\n1var\n_temp\nthisVarIsOver32charactersInLength\nthisContainsFunkyChar!\n_\nyes_underscore_is_valid_name\n run ; \n\n And the results: \n \nHere's a closer look at the regular expression in \"diagram\" form, lightly annotated. (This reminds me a little of how we used to diagram sentences in 4th grade. Does anybody do that anymore?) \n  \nAmong the more interesting aspects of this expression is the lookahead portion , which checks that the value is between 1 and 32 characters right out of the gate. If that test fails, the expression fails to match immediately. Of course, you could use the LENGTHN function to check that, but it's nice to include all of the tests in a single expression. I mean, if you're going to write a cryptic expression, you might as well go all the way. \n Unless you live an alternate reality where normal text looks like cartoon-style swear words, there really isn't much that's \"regular\" about regular expressions. But they are extremely powerful as a data validation and cleansing tool, and they exist in just about every programming language, so it's a transferable skill. If you take the time to learn how to use them effectively, it's sure to pay off.\n tags: prxmatch , regular expressions , SAS programming"], "link": "http://feedproxy.google.com/~r/ASasBlogForTheRestOfUs/~3/IcfiA08_EJo/", "bloglinks": {}, "links": {"http://www.regular-expressions.info/": 1, "http://blogs.sas.com/": 5, "http://www.viewzone.com/": 1, "http://support.sas.com/": 5}, "blogtitle": "The SAS Dummy"}]