[{"blogurl": "http://lkozma.net/blog\n", "blogroll": [], "title": "next big thing syndrome"}, {"content": ["Some years ago I was reading about the game of Nim, then a bit more about the theory of impartial games, and as the rabbithole seemed to go deeper and deeper, I needed some pretext to continue. So I came up with the rules of a simple paper-pencil game that I could try to analyze with the theory that I was reading about. I never managed to fully analyze the game, but it seemed to be reasonably fun to play anyway. Later I found that some very similar games have already been described. \n The rules are simple: two players take turns in marking squares on a grid (say, of size 8*8). You can only mark a square if all of its neighbors (including the diagonal neighbors) are empty. The first player unable to move loses. \n More details of the game are here . \n Recently, I had the pleasure of discovering a website that contains the descriptions of many paper and pencil games, most of them playable on the website against the computer. The site is maintained by David Johnson-Davies . In fact, I found out about the website from him, when he told me that he also included the game I described above. The game is filed under the name \u201cObstruction game\u201d which very well describes what it is about. You can even play it against the computer. Here is the website with all the games and here is the link to the Obstruction game . There is even a description with some useful strategy-tips. \n Happy playing!"], "link": "http://lkozma.net/blog/obstruction-game/", "bloglinks": {}, "links": {"http://www.papg.com/": 2, "http://www.lkozma.net/": 1, "http://www.org.uk/": 1, "http://www.papg.com": 1}, "blogtitle": "next big thing syndrome"}, {"content": ["Suppose there are n sports teams, some of them play each other, in each game one team wins and the other loses and in the end we want to rank all teams by their performance. If two teams A and B played each other multiple times but, say, A clearly dominated B, we consider as if they would have played once and A beat B. If they played each other several times and there is no clear winner, or if they played only one draw, we consider as if they would have played twice and once A won, once B. \n We can represent the whole situation as a directed graph with n vertices {1, \u2026, n } and an edge from i to j if i won against j . Clearly, there are no self-loops. If the graph has no cycles, we can efficiently compute a topological sorting of the vertices and we are done. What if the graph has cycles (two teams that played a draw, or a sequence of teams where A beat B, B beat C, \u2026, X beat A), but we still want to output a reasonable ordering? What is a reasonable ordering? \n This is the vertex ordering problem and we can formulate many different criteria. I\u2019ll go through some variants and mention for each of them, whether they are NP-hard or polynomially solvable. It turns out that almost all of them are NP-hard, and those which are not are quite trivial (plus the topological sorting mentioned before, which is also polynomially \u2013 in fact, linearly \u2013 computable). I\u2019ll try to refer to sources where I found some, where I didn\u2019t find any, the result is simple enough to be considered folklore. Not all the criteria that I list are reasonable \u2013 a reasonable criterion should actually lead to the topological sorting when there are no cycles. Did I forget some sensible criteria? Let me know what you think. \n The general set-up is the following: we search for a permutation f:[n] -> [n] , such as to minimize or maximize some quantity as follows: \n 1. The first criterion is that we want to minimize/maximize some reasonable function of the number of wins and the number of losses of a team. This includes the methods used in most sport tournaments where wins and loses are worth some number of points and in the end the teams are ranked by their accumulated number of points. This criterion is easy, because we can just compute the indegree/outdegree of each vertex, compute the necessary function values and sort vertices according to it. \n Now we move to some more interesting criteria. \n \n We either minimize (MIN) or maximize (MAX) some quantity. \n The quantity is either the SUM, the MAXimum, the MINimum or the COUNT of something. \n That something is either the length of EDGEs, the length of BACK-EDGEs, or SIGNED length of EDGEs. \n \n This gives 2*4*3=24 cases. \n For example, if i->j means that there is an edge from i to j: \n \n MIN COUNT EDGE refers to  \n \n MAX SUM EDGE refers to  \n \n MIN SUM BACK-EDGE refers to  \n \n MAX MIN SIGNED-EDGE refers to  . \n These are all for directed graphs, as mentioned earlier. Before starting to enumerate all these cases, let\u2019s define the same problem for undirected graphs. For undirected graphs there are less cases, as we don\u2019t have to consider separately any edge or back-edge or signed edge. Thus there are just 2*4=8 possibilities here. \n Now let\u2019s see what we\u2019ve got, numbering continuously all the cases. \n Undirected graphs \n 2. MIN SUM: This is called Minimum Linear Arrangement , a known NP-hard problem. \n 3. MIN MAX: This is called Minimum Bandwidth , a known NP-hard problem. \n 4. MIN MIN: makes no sense, it can always be 1. \n 5. MIN COUNT: makes no sense, it is always the number of edges. \n 6. MAX SUM: this is equivalent to 2. on the complement graph, therefore NP-hard. \n 7. MAX MAX: makes no sense, it can always be n-1. \n 8. MAX MIN: This is the anti-bandwidth problem, studied in literature, see here , or here (leads to paywall). It is NP-hard. This can be seen via the following reduction: \u201cDoes G have a Hamiltonian path ?\u201d is the same as \u201ccan the vertices of G be arranged such that there are edges between neighbors?\u201d is the same as \u201ccan the vertices of G be arranged such that the complement of G has anti-bandwith at least 2?\u201d. If we could answer the last question efficiently, we could answer the first. \n 9. MAX COUNT: makes no sense, it is always the number of edges. \n Now we move on to the original question: \n Directed graphs \n 10. MIN SUM EDGE: NP-hard. From 2. if we replace every undirected edge with a directed edge. \n 11. MIN SUM BACK-EDGE: NP-hard. From 2. if we replace every undirected edge with two directed edges. \n 12. MIN SUM SIGNED-EDGE: this is quite interesting. Notice that we can replace a path a->b->c with a single edge a->c without changing the sum. If we do this sufficiently many times we will be left with vertices with only incoming or only outgoing edges. Two minimize the sum we clearly have to put vertices with outgoing edges first, then vertices with incoming edges. Otherwise we could make a simple replacement that would decrease the sum. Furthermore, vertices with outgoing edges have to be ordered in decreasing order of degree, vertices with incoming edges ordered in increasing order of degree. Again, otherwise, a simple swap would decrease the sum. That\u2019s all.. Observe that what we\u2019ve got is the same as ordering the original vertices in decreasing order of [outderee-indegree]. In this sense, this is a special case of 1. \n 13. MAX SUM EDGE: NP-hard. From 6. if we replace every edge with a directed edge. \n 14. MAX SUM BACK-EDGE: NP-hard. From 6. if we replace every edge with two directed edges. \n 15. MAX SUM SIGNED-EDGE: solution is the reverse order of 12. \n 16. MIN MAX EDGE: NP-hard. From 3. if we replace every undirected edge with a directed edge. \n 17. MIN MAX BACK-EDGE: NP-hard. From 3. if we replace every undirected edge with two directed edges. \n 18. MIN MAX SIGNED-EDGE: NP-hard. From 3. if we replace every undirected edge with two directed edges. Known as Minimum Directed Bandwidth . \n 19. MAX MAX EDGE: makes no sense, it can always be n-1. \n 20. MAX MAX BACK-EDGE: makes no sense, it can always be n-1. \n 21. MAX MAX SIGNED-EDGE: makes no sense, it can always be n-1. \n 22. MIN MIN EDGE: makes no sense, it can always be 1. \n 23. MIN MIN BACK-EDGE: makes no sense, it can always be 1 and has to be at least 1 if there are cycles. \n 24. MIN MIN SIGNED-EDGE: makes no sense, it can always be -(n-1). \n 25. MAX MIN EDGE: NP-hard. From 8. if we replace every undirected edge with a directed edge. \n 26. MAX MIN BACK-EDGE: NP-hard. From 8. if we replace every undirected edge with two directed edges. \n 27. MAX MIN SIGNED-EDGE: NP-hard. From 8. if we replace every undirected edge with two directed edges. \n 28. MIN COUNT EDGE: makes no sense, it is always the number of edges. \n 29. MIN COUNT BACK-EDGE: NP-hard, known as Minimum Feedback Arc Set . \n 30. MIN COUNT SIGNED-EDGE: makes no sense, it is always the number of edges. \n 31. MAX COUNT EDGE: makes no sense, it is always the number of edges. \n 32. MAX COUNT BACK-EDGE: NP-hard, it is the reverse order of 29. \n 33. MAX COUNT SIGNED-EDGE: makes no sense, it is always the number of edges. \n Phew :) Did I forget any interesting criteria? \n From the point of view of the original motivation (a ranking of teams) the criteria that seem to some extent reasonable are: 11, 12, 17, 18, 29."], "link": "http://lkozma.net/blog/ordering-cyclic-graphs/", "bloglinks": {}, "links": {"http://dl.acm.org/": 1, "http://www.kth.se/": 4, "http://en.wikipedia.org/": 2, "http://www.optsicom.es/": 1}, "blogtitle": "next big thing syndrome"}, {"content": ["Let\u2019s revisit the topic of the previous post on self-counting sentences . We looked at sentences like this: \n In this sentence the number of occurrences of 1 is __, of 2 is __, ..., of n is __. \n Let\u2019s go up one more step on the ladder of abstraction, to arrive at sentences of the type: \n In this sentence, there are 3 numbers appearing 1 time, 1 number appearing 2 times, 1 number appearing 3 times, 0 numbers appearing 4 times. \n In this sentence, there are 2 numbers appearing 1 time, 3 numbers appearing 2 times, 0 numbers appearing 3 times, 0 numbers appearing 4 time. \n Observe, that both say the truth about themselves. Below are three puzzles. In all cases the task is to fill in the gaps such as to make the sentence say the truth and the questions are: for what values of n does a solution exist and what are the solutions (if they exist). \n In this sentence there are __ numbers occurring 1 time, __ numbers occurring 2 times, ..., __ numbers occurring n times. \n In this sentence, from the numbers 0,1, ..., n-1, there are __ numbers occurring underlined 0 time, __ numbers occurring underlined 1 time, ..., __ numbers occurring underlined n-1 times. \n In this sentence there are __ numbers occurring underlined 1 time, __ numbers occurring underlined 2 times, ..., __ numbers occurring underlined n times. \n . \n . \n . \n . \n . \n . \n The second problem is equivalent to the first problem. There exists a solution to problem 1, if and only if the same sequence of numbers is a solution to problem 2 (note that in problem 2 the counting starts from 0). Therefore we only look at the first and the third problems. \n Solution of problem 1: \n For small values of n, we can find the solutions by trial and error or with a small program. We denote the numbers of the solution as f(1), f(2), \u2026, f(n). \n For n=1, there is a single solution: f(1)=2. \n For n=2, there is a single solution: f(1)=4, f(2)=0. \n For n=3, there is a single solution: f(1)=4, f(2)=1, f(3)=0. \n For n=4, there are two solutions (see the beginning of the post). \n For n=5, n=6, there are no solutions. \n For n=7, there are two solutions: f(1)=4, f(2)=3, f(3)=0, f(4)=1, f(5)=0, f(6)=0, f(7)=0, and f(1)=5, f(2)=1, f(3)=1, f(4)=1, f(5)=0, f(6)=0, f(7)=0. \n For n=8, there are two solutions: f(1)=5, f(2)=2, f(3)=1, f(4)=1, f(5)=0, f(6)=0, f(7)=0, f(8)=0, and f(1)=5, f(2)=3, f(3)=0, f(4)=0, f(5)=1, f(6)=0, f(7)=0, f(8)=0. \n For every n>=9 there are exactly three solutions: \na) f(1)=n-3, f(2)=3, f(n-3)=1, and the remaining values 0, \nb) f(1)=n-2, f(2)=1, f(4)=1, f(n-4)=1, and the remaining values 0, \nc) f(1)=n-3, f(2)=2, f(3)=1, f(n-4)=1, and the remaining values 0. \n These solutions clearly work. Let\u2019s prove that no other solutions exist. \n We can observe two properties of the sequence f(i): \n Property 1: \u2211\u2006 i \u2005*\u2005 f ( i ) = 2n. (where i goes from 1 to n) \nProof: \nThere are 2n numbers in the sentence and each i*f(i) term counts how many numbers are there with multiplicity i. To have a multiplicity greater than n would mean that all gaps are filled with the same value, which cannot yield a true sentence for any value. Thus the possible multiplicities are between 1 and n, therefore \u2211\u2006 i \u2005*\u2005 f ( i ) gives the total number of numbers in the sentence, which is 2n. \n Property 2: \u2211\u2006 f ( i ) = n+1. (where i goes from 1 to n) \nProof: \nClearly, for all i, f(i)>=0 and f(i) \nIf for all i, f(i)>0 would hold, \u2211\u2006 i \u2005*\u2005 f ( i ) would be larger than 2n, violating Property 1. Therefore, some of the f(i) values have to be equal to 0, which means that all numbers 0,1,\u2026,n appear in the sentence. Furthermore, all numbers that appear in the sentence have multiplicity between 1 and n. Thus, \u2211\u2006 f ( i ) gives the total number of distinct values, which is n+1. \n Now we prove that a) b) c) are the only solutions for n>=9. \n If f(1)>n-2, \n it must be that f(1)=n-1, but now n-1 occurs twice, so to maintain that n-1 values occur once, we need to write n-1 in every other position as well. This is not a correct solution. \n If f(1)=n-2, \n we must have exactly one other nonzero value (besides n-2) written in the gaps. We cannot write n-2 anywhere else, as that would violate Property 2. To get a sum of n+1, the possibilities are writing one time 3, or three times 1. Writing 3 anywhere doesn\u2019t make the sentence correct, so it remains to write three 1\u2032s. But then the number of 0\u2032s will be n-4, the number of 1\u2032s will be 4 and the number of (n-2)\u2019s will be 2. This gives us solution b). \n If f(1)=n-3, \n we have two other nonzero values (besides n-3) written in the gaps. They also have to add up to 4 (Property 2). That can be as 3+1 or as 2+1+1. The first case means that 1,3 and n-3 have multiplicities 2 and 0 has multiplicity n-3. The second case means that 2 and n-3 have multiplicity 2, 0 has multiplicity n-4 and 1 has multiplicity 3. These cases uniquely lead to solutions a) and c). \n If f(1)<n-3, \n suppose f(1)=n-k (where k>3). The value 0 has to appear more than one time (otherwise the sum of Property 1 would be too large). Therefore, among the values 1, \u2026, n, there are k distinct values which are written somewhere in the gaps (to make their multiplicities larger than one in the whole sentence). We know that n-k appears in the first gap, so we have k-1 other values in the gaps starting from the second. Let\u2019s denote these values by a 1 \u2004<\u2004 a 2 \u2004<\u2004.\u2006.\u2006.\u2006\u2004<\u2004 a k \u2005\u2212\u20051 . Since they are written in the gaps after the first one, it follows that there are at least a 1 \u2005+\u2005 a 2 \u2005+\u2005.\u2006.\u2006.\u2006\u2005+\u2005 a k \u2005\u2212\u20051 distinct numbers that appear more than once in the sentence. Even if one of them is n-k, and one of them is 0, that still leaves S \u2004=\u2004 a 1 \u2005+\u2005 a 2 \u2005+\u2005.\u2006.\u2006.\u2006\u2005+\u2005 a k \u2005\u2212\u20051 \u2005\u2212\u20052 distinct numbers appearing more than once (therefore, also in the gaps). Since a 1 \u2004\u2265\u20041 , we have S >= k(k-1)/2 \u2013 2. Even if the smallest of these numbers is 1, we get that \u2211 f ( i ) >> n+1, for k>3. This violates Property 2, therefore no solution of this kind is possible. \n Solution of problem 3: \n For n=1, we have f(1)=1, unique solution. \nFor n=2, we have f(1)=2, f(2)=0, unique solution. \nFor n=3, we have f(1)=1, f(2)=1, f(3)=0, unique solution. \nFor n=4, we have f(1)=2, f(2)=1, f(3)=0, f(4)=0, unique solution. \n For n>=5, we have exactly two solutions: \na) f(2)=1, f(n-2)=1, the remaining values 0 \nb) f(1)=2, f(n-2)=1, the remaining values 0. \n Proof: \n Similarly to the first problem, now we have the property: \n \u2211\u2006 i \u2005*\u2005 f ( i ) = n. \n Clearly f(n)=0, otherwise all values would have to be equal, which is not a correct solution. \nAlso, f(n-1)=0. The only alternative would be f(n-1)=1, and all other values equal to zero, but this is not a correct solution either. \n If f(n-2)=1 we need that \u2211\u2006 i \u2005*\u2005 f ( i ) over all other values is 2. This leads to solutions a) and b) only. \nf(n-2)>=2 is not possible, as it would violate the property for n>=5. \n Now suppose f(n-k) is the last nonzero value, for k>=3. This means that there are k numbers that are not equal to one of the most frequent values. If 0 is one of the most frequent values, then there are k nonzero values. All of them cannot be equal to 1, as that would not be a correct solution, so \u2211\u2006 i \u2005*\u2005 f ( i ) >= k(k-1)/2 + n-k + 1, which is larger than n for k>=3, violating the required property. On the other hand, if less than half of the elements are 0, the property is clearly violated, which shows that there are no other solutions."], "link": "http://lkozma.net/blog/self-counting-sentences-ii/", "bloglinks": {}, "links": {"http://lkozma.net/blog": 1}, "blogtitle": "next big thing syndrome"}, {"content": ["In this sentence the number of occurrences of 1 is 2, of 2 is 3, of 3 is 2, of 4 is 1. \n This self-referential, true sentence is a variant of a puzzle attributed to the logician Raphael Robinson, popularized in Douglas Hofstadter\u2019s book Metamagical Themas. In the book the puzzle appears in the following form: \n Fill in the gaps such as to make the sentence true: \n \nIn this sentence the number of occurrences of the digit 0 is __, of digit 1 is __, of digit 2 is __, ..., of digit 9 is __. \n With some trial and error you can find two different solutions, and it has been shown that no other solutions are possible. The problem has also been studied using some theory from the field of dynamical systems. Here are two interesting links , both containing the solution of the puzzle. \n In this post, however, I would like to look at a slightly different puzzle. Instead of counting digits, I am counting the numbers as indivisible units. If, for instance, \u201c15\u2033 appears in the sentence, I count it as \u201c15\u2033, not as one \u201c1\u2033 and one \u201c5\u2033. In this way the problem is independent of the base in which the numbers are represented. \n In both of the following two puzzles the task is to fill in the gaps such as to make the sentences true. In the first sentence the values can be between 1 and n (including 1 and n), in the second sentence the values can be between 0 and n-1 (both included). For what values of n are the problems solvable? How many solutions are there? \n In this sentence the number of occurrences of 1 is __, of 2 is __, ..., of n is __. \n In this sentence the number of underlined occurrences of 0 is __, of 1 is __, of 2 is __, ..., of n-1 is __. \n Think about the puzzles for some time, or scroll down for the solution. Let me know if you find a simpler solution. I also wrote a follow-up post , with a different variant of the problem. \n . \n . \n . \n . \n . \n . \n It can be shown that the two problems are equivalent: let\u2019s denote the numbers written in the gaps of the first sentence by f(1), \u2026, f(n). It can be seen easily that f(1), \u2026, f(n) form a solution for the first problem if and only if f(1)-1, \u2026, f(n)-1 form a solution for the second problem. So it\u2019s enough to look at the first puzzle only. \n With some case-based analysis we can show that there is no solution for the cases n=1, n=2, n=3 and n=6. \nFor n=4, there are two solutions, the one given in the beginning of the post and the following: f(1)=3, f(2)=1, f(3)=3, f(4)=1. \n For n=5, the solution is given by the sequence: f(1)=3, f(2)=2, f(3)=3, f(4)=1, f(5)=1 and it is unique. These can be verified manually. \n For every n>=7, there is a solution, given by f(1)=n-3, f(2)=3, f(3)=2, f(n-3)=2, and f(k)=1, for every k other than 1,2,3, and n-3. Let\u2019s prove that this is the only solution: \n Suppose there is some other solution. \nIf f(1)=n-3, then f(n-3)>=2. \n\u2014> If f(n-3)=2, then we need f(2)>=3. \n\u2014\u2014> If f(2)=3, then we get the same solution. \n\u2014\u2014> If f(2)>3, then there exist distinct x and y (also different from n-3, 1 and 2), for which f(x)=f(y)=2, so we have a value different from 1 at places 1,2,x,y,n-3, which means that we don\u2019t have enough places to put 1\u2032s, to satisfy f(1)=n-3. \n\u2014> If f(n-3)>2, then we have some x (different from 1 and n-3), for which f(x)=n-3. But then there are n-4 places where we need to put x, again not leaving enough places to satisfy f(1)=n-3. \n If f(1)>n-3, then f(f(1))>=2. \n\u2014> If f(f(1))=2, then we need f(2)>=3 and f(f(2))>=2. We ran out of places for 1\u2032s, since 1,2,f(2) and f(1) are distinct and they map to values different from 1. \n\u2014> If f(f(1))>2, then there is some x (other than 1) with f(x)=f(1)>=n-2, which means that we need to fill at least n-3 places with the value x, not leaving enough place for the 1\u2032s. \n The interesting case remains when f(1)<n-3. This condition means that in at least 5 places we need to write a number different from 1. \nSuppose there are exactly k places, corresponding to the indices x1, \u2026, xk, where we have an entry different from 1. This means that f(x1), \u2026, f(xk) are different from 1 and k>=5. Let x1=1, since we know that in place 1 we have an entry different from 1. \n Observe that among f(x1), \u2026, f(xk) there have to be exactly k-1 distinct elements. This is because we need a value different from 1 in all places 1, f(x1), \u2026, f(xk), and unless there are exactly k such places, we reached a contradiction. Since we have k-1 distinct elements all different from 1, the maximum among them is at least k and the second largest element is at least k-1. This means that there is a number t different from 1, such that f(t)>=k-1, therefore, t appears as a count in at least k-2 places. If out of k counts we have k-2 equal, we cannot have k-1 distinct values, so we reached a blatant contradiction. Therefore this case is impossible and the solution given above is unique."], "link": "http://lkozma.net/blog/self-counting-sentences/", "bloglinks": {}, "links": {"http://lkozma.net/blog": 1, "http://www.ac.uk/": 1, "http://www.uni-hamburg.de/": 1}, "blogtitle": "next big thing syndrome"}, {"content": ["\u201cVerdi is the Puccini of music\u201d \u2013 this quip attributed to the composer Igor Stravinsky appears in Douglas Hofstadter\u2019s book Metamagical Themas . In a similar vein he adds: \u201cThe knee is the Achilles\u2019 heel of the leg\u201d. A well-known humorist, probably inspired by the first sentence, uses the line \u201cBeethoven is the Mozart of classical music\u201d. Looking at a lavishly decorated building, we might say \u201cIt seems that Baroque has a renaissance\u201d. \n What is common in these humorous and somewhat faulty metaphors? Is there a name for this phenomenon? Are there other good examples? \n To explain the obvious, suppose we are using analogies or metaphors of the form \u201cX is Y\u201d, where Y is the \u201csource\u201d, whose attributes we borrow, ascribing them to the \u201ctarget\u201d X. In this set-up, Y seems to play two roles: one concrete, immediate and one abstract, idealized. In the case of Mozart, the concrete role is that of the 18th century composer, while the abstract role is something along \u201ca widely celebrated, brilliant and prolific, classical master of a genre\u201d. Renaissance is the cultural movement started in Europe in the 14th century, but also the revival of a style, in the case of Renaissance itself, mostly of the classical Greek and Roman. Never mind that in this case the capitalization of the word betrays which meaning we are referring to. \n The trick for the faulty metaphor to work (or in this case, for it not to work, i.e. to sound broken and to generate tension and/or humor), seems to hinge on our ability to move back and forth between the two roles, the concrete and the abstract. Furthermore, it is necessary that the analogy is understandable, in other words, that the abstract meaning is well established. In fact, the more overused the metaphor, the better it is for comical effect. The \u201cAchilles\u2019 heel of something\u201d clearly fulfills this requirement. Still, \u201cShakespeare is the Mozart of English literature\u201d and \u201cStone-washed jeans are having a renaissance\u201d would be perfectly valid, if not very interesting analogies. To produce the effect we are looking for, we need one more ingredient: if we denote by Y1 and Y2 the concrete, resp. the abstract meanings of the source, we should choose Y in such a way that \u201cX is Y2\u2033 sounds fine, but X and Y1 are somehow clashing, for example, by being members of the same category, or by being downright contradictory. In this way, shifting to the \u201cX is Y1\u2033 meaning feels like falling into a trap. \n Since there already exist snowclones , malapropisms , solecisms , contronyms , garden path sentences , it seems unfair that such a clearly delimited phenomenon does not have its own name. Can you suggest one? The examples above are all, in some sense, mixed metaphors , but the mixing happens in a well defined way. What would be a good neologism for metaphors broken in this particular way? \n Here are some more examples that loosely fit the same structural pattern, although they are not necessarily funny. Please, let me know, if you can think of more! \n \n The queen is the king of chess pieces.\n The Russian campaign was Napoleon\u2019s Waterloo moment.\n The lizard you keep in the kitchen has become the elephant in the living room in our relationship.\n The gold plating is the crown jewel of that necklace.\n The bald eagle is the canary in the coal mine of the ecosystem.\n The 700 pound gorilla that escaped the zoo is the 800 pound gorilla.\n That blue whale has become his white whale.\n The new fighter jet is the flagship of the army.\n \u201cRaincoat\u201d is an umbrella term for many different products.\n Alexander the Great solved the Gordian knot of defeating the Persian army.\n Theseus performed the herculean task of killing the Minotaur.\n Euro cents are a dime a dozen.\n A blue swan would be a black swan.\n \u201cBlack swan\u201d is a textbook example of a metaphor.\n A notebook is a textbook example of a stationery product.\n \u201d \u201cBlack swan\u201d is a textbook example of a metaphor \u201d is the black sheep of these sentences, since the target has an abstract meaning X2 clashing with the abstract meaning Y2 of the source, rather than X1 clashing with Y1.\n \n EDIT : \n \n From niklasni1 , over at reddit :\n \n Humans are the tortoises of the animal kingdom. \n Noah suggests the term Locaphor . Like it!\n Another one, similar to some of the above:\n \n By crossing the Po, Caesar crossed the Rubicon. \n cnan1u adds:\n \n Copper is the gold standard of electric wires. \n cnan1u also adds the following:\n \n Tobacco is the smoking gun of lung cancer.\n Women are the founding fathers of feminism.\n Bison were the bread and butter of early humans. (or: Meat is the bread and butter of my diet.)\n The SI unit is the yardstick of measurement.\n Espresso is the barista\u2019s cup of tea. \n and many more . Thanks!"], "link": "http://lkozma.net/blog/mixed-metaphors/", "bloglinks": {}, "links": {"http://www.reddit.com/": 2, "http://www.rinkworks.com/": 1, "http://www.youtube.com/": 1, "http://en.wikipedia.org/": 3, "http://snowclones.org/": 1, "http://lkozma.net/blog": 4, "http://www.fun-with-words.com/": 1}, "blogtitle": "next big thing syndrome"}, {"content": ["The website you attempted to visit has not yet been approved as appropriate content for general audiences. Either provide a certificate indicating that you have been granted a permission that overrides our default content guidelines, or submit the website for our review and approval process. In the latter case, allow at least two business weeks for the regular review process to take place. Make sure to provide a detailed motivation of why you believe that the content of the website should be accessible to the general public, and particularly, why is the purpose of the website not already fulfilled by any of the plethora of approved websites. \n At the same time, for cautionary reasons and in your best interest, an incident ticket has been auto-generated by this event and your area supervisor has been notified. You are strongly advised not to leave your designated living area in the next 48 hours, to allow one of our safe content counselors to meet you and discuss about the causes of this incident and advise you on safe and compliant perusal of the World Wide Web. In the mean time, feel free to visit any of the safe, family-friendly and approved websites, such as Google , Facebook , Twitter , iTunes or many more . \n Come on, this can never happen\u2026 \n So what, I don\u2019t have anything to hide\u2026 \n So what, what would anyone lose\u2026"], "link": "http://lkozma.net/blog/the-curated-internet/", "bloglinks": {}, "links": {"http://www.schneier.com/": 1, "http://torrentfreak.com/": 1, "http://www.theverge.com/": 1}, "blogtitle": "next big thing syndrome"}, {"content": ["As 2011 approaches its end, as usual, I copy-paste the links to some of the most interesting, most over-the-top, most random and most obscure stuff I read on the internet (in English) throughout the year, in case you desperately need some reading material for dark and long evenings. Much (but not all) of the more opinionated stuff is the kind that I strongly agree with. Note to self: in 2012 read stuff that challenges, rather than reinforces your biases. So here it goes: \n Motivation, lighter stuff \n Ribbonfarm: In the real world . Also . \n Hanging out with a different crowd . \n Xamuel: ways to be more present . \n Derek Sivers: flip the stick . \n Changing perspective . \n Anonymous psychedelic experience . \n Ribbonfarm: being an illegible person . \n Interesting observations, more substantial stuff \n Norvig vs. Chomsky . \n Ribbonfarm: Legibility . \n Ribbonfarm: Bargaining with your right brain . \n Daniel Mendelsohn: Arthur Rimbaud\u2019s brief career . \n Idlewords: Rocket to Nowhere \u2013 the story of the Shuttle . \n Roger Ebert on why he hates 3D movies . \n Less Wrong: Excuses . \n Ribbonfarm: The Milo criterion . \n Essay of N.N. Taleb, a summary of his ideas . \n Idlewords: The social graph is neither . \n Idlewords: Argentina \u2013 on two steaks a day . \n RIP Michael Hart . \n RIP Steve Jobs. Eulogy by Mona Simpson and by ESR . \n Startups, Business, Programming \n Ribbonfarm: the end of the Middle Class . \n Tips for contract work on websites from a Reddit comment. \n Raganwald: You need a degree for BigCo . \n Why HR did not respond . \n Joel: We hire the best 1% . \n Joel: Architecture Astronouts . \n Some of us just like to program . \n Apenwarr: Interoperability, robustness, etc. . \n Two essays pointing out a pragmatic way towards startups. \n Two other pieces of pragmatic advice on a similar topic. \n The Gervais principle or office life according to The Office . \n Steve Yegge: Code\u2019s worst enemy . \n Life at Google , life at Amazon , and a glimpse of both . \n Don\u2019t call yourself a programmer . \n Maths, Research \n Is it really power law ? \n Terence Tao: Problem solving strategies . \n Michael Nielsen: Open access \u2013 a summary . \n The Uppsala-affair . \n Humorous \n Two pieces lightly poking fun at Paul Graham. \n How to criticize a computer scientist ? \n Burnout prevention at MIT . \n The credit card prank . \n Missy the lost cat . \n As a bonus, here are the best books I\u2019ve read in 2011:"], "link": "http://lkozma.net/blog/linkfest2011/", "bloglinks": {}, "links": {"http://www.kalzumeus.com/": 1, "http://petdance.com/": 1, "http://weblog.raganwald.com/": 1, "http://news.ycombinator.com/": 5, "http://www.xach.com/": 1, "http://www.xamuel.com/": 1, "http://www.economist.com/": 1, "http://www.thedailybeast.com/": 1, "https://raw.github.com/": 1, "http://www.edge.org/": 1, "http://esr.ibiblio.org/": 1, "http://sivers.org/": 1, "http://www.evenmere.org/": 1, "http://norvig.com/": 1, "http://www.viruscomix.com/": 1, "http://www.sharebookbox.com/": 1, "http://www.nytimes.com/": 1, "http://www.purdue.edu/": 1, "http://www.newyorker.com/": 1, "http://steve-yegge.blogspot.com/": 1, "http://www.reddit.com/": 1, "http://www.idlewords.com/": 2, "http://cscs.umich.edu/": 1, "http://terrytao.wordpress.com/": 1, "http://www.ribbonfarm.com/": 7, "http://lesswrong.com/": 1, "http://michaelnielsen.org/blog": 1, "http://mastercom.over-blog.com/": 1, "http://patterico.com/": 1, "http://programming-motherfucker.com/": 1, "http://apenwarr.ca/": 1, "http://www.joelonsoftware.com/": 2, "http://www.zug.com/": 1, "http://blog.pinboard.in/": 1, "http://www.aaronsw.com/": 1, "http://paraschopra.com/blog": 2, "http://www.ras.ru/": 1, "http://idlewords.com/": 1}, "blogtitle": "next big thing syndrome"}, {"content": ["Here\u2019s a small idea I wrote about before : change the desktop wallpaper automatically using random images from Wikipedia. Why Wikipedia and not some other source? Because these images are generally more interesting, more diverse and better quality than any other collection I know. \n Click this link a couple of times for some examples of random wiki images: \n http://commons.wikimedia.org/wiki/Special:Random/File \n Finally I managed to hack it together and here it is for you to download. I only tried it on Linux but probably it can be ran with small modifications on a Mac as well. If you manage to put together something like this on Windows let me know in the comments. Here are the steps: \n \n 1. What we need \n \n \n feh \u2013 this is a nice, lightweight image viewer ( https://wiki.archlinux.org/index.php/Feh ) \n convert, mogrify \u2013 these are some utilities from the imagemagick set of tools (easily available on most distributions) \n wget \u2013 for fetching files from the internet \n sed, awk, grep, xargs \u2013 you have these already \n \n If you don\u2019t have the first three, on Ubuntu all you need to do is: \n sudo apt-get install feh\nsudo apt-get install imagemagick\nsudo apt-get install wget \n \n 2. The main thing \n \nMake a folder where you put the files needed for this wallpaper-changing-business. For me that is ~/random_wallpaper \n Create the file run.sh in this newly created folder and copy the code below into it. The code does the following: it fetches the URL of a random image from Wikipedia, it fetches the image itself, makes an attempt to convert it to a decent size (change resolution in the code if necessary), makes an attempt to add the title of the image to the image, sets it as wallpaper, waits for an hour, removes the image and repeats. Additionally, it saves filenames and timestamps in an archive.txt file, so that if you see something interesting, you can look it up later. Feel free to tweak it to your needs, for example, the 60 minutes repeat period in the end could be made 20s or whatever else. \n #!/bin/sh\nwhile true; do\n\t# Remove old file and get new random image\n\tcat filename.txt | xargs rm\n\techo -n \"http://upload\" > url.txt\n\twget -q -O - \"$@\" http://commons.wikimedia.org/wiki/Special:Random/File | grep -m 1 \"href=\\\"//upload\" | sed -e 's/.*href\\=\\\"\\/\\/upload//g' | sed -e 's/\\\".*//g' >> url.txt\n\turl=`cat url.txt`\n\twget -O temp_image.tmp \"$url\"\n\techo -n \"temp_image.\" > filename.txt\n\tcat url.txt | sed -e 's/.*\\///g' | sed -e 's/.*\\.//g' >> filename.txt\n\tfilename=`cat filename.txt`\n\tmv temp_image.tmp \"$filename\"\n\n\t# Get filename of image for display\n\techo $url | awk -F\"/\" '{print $NF}' | awk -F. '{print $1}' > urldisplay.txt\n\turldisplay=`cat urldisplay.txt`\n\n\t# Resize image and add title (filename)\n\tmogrify -resize 1024x768\\> \"$filename\"\n\tconvert -pointsize 20 -fill red -draw \"text 10,30 \"$urldisplay\"\" \"$filename\" \"$filename\"\n\n\t# Set as wallpaper\n\tfeh --bg-center \"$filename\"\n\n\t# Leave some traces in the logfile\n\techo -n `date` >> archive.txt\n\techo -n \" \" >> archive.txt\n\techo $url >> archive.txt\n\n\t# Go to sleep\n\tsleep 60m\ndone\n \n Make this file executable: \n chmod +x run.sh \n \n 3. Wrapping it up \n \nAll we need now is a way of running our script. If you want to try it out just once, or you want to use it as a slideshow on a birthday party, you can simply run it from the terminal: \n ./run.sh & \n If you want to use it all the time, it should be called at each startup. This can be achieved in different ways, depending a bit on the setup used. \nI run Fluxbox as a window manager, which is closely related to Blackbox or Openbox. \nHere I add towards the end of my startup file the following: \n ~/random_wallpaper/run.sh & \n If you use Gnome, you could add the same line to your ~/.xinitrc file. The Feh documentation says that to make it play nicely with Feh, you should disable Nautilus\u2019 control of the desktop: \n gconftool-2 --set /apps/nautilus/preferences/show_desktop --type boolean false \n An alternative way of calling run.sh would be to set up a periodic job using cron. In this case the loop (the while- and the done- lines) are not needed. \n Let me know in the comments how it worked out, or if you know a simpler way of setting it all up. \nENJOY!"], "link": "http://lkozma.net/blog/random-wiki-image-wallpaper/", "bloglinks": {}, "links": {"http://fluxbox.org/": 1, "http://lkozma.net/blog": 1, "http://commons.wikimedia.org/": 1, "https://wiki.archlinux.org/": 1}, "blogtitle": "next big thing syndrome"}, {"content": ["A few quick web app ideas, not the kind that would lead to the next Facebook, but some that might be slightly interesting/useful if executed properly (for which unfortunately I have too little time, therefore this post). I\u2019ve been pumping out these half-baked ideas at a steady rate on this blog, if you are interested in the previous ones, you could start from here . \n 1. Your English is so 1890. \n There was a popular widget some time ago, in which you paste some text that you wrote (or it processes your blog) and through a statistical analysis of word frequencies it tells you whether you write like Hemingway or more like Virginia Woolf or like Edgar Allan Poe or whoever. Then you get a badge you can put on your blog or on your wall in your favorite social network. It was quite nice and popular, although I can\u2019t find it anymore (EDIT: here it is ). \n Mine is a tweak on this idea. Google has released a data set with the frequencies of words in books throughout the years ( ngrams.googlelabs.com ). Say, you might find that \u201ccomputer\u201d appeared in 5% of the books in 1970 and in 15% of those in 1985 (I am making this up). So, given any year, you can easily find out how likely a certain word is to appear in a randomly picked text. With Bayes rule and some reasonable assumptions we could reverse this and for a given snippet of text, compute the probability that the text was written in 1800 or in 1850 or in 1900, etc. We would pretend that a priori the text is just as likely to come from any year. This is not exactly true, since we know the text comes from the present, or at least we know that the amount of text available from any year grows as we get closer to the present, but let\u2019s ignore all that for a moment. It would be more fun than exact science anyway. However, it could still generate interesting comparisons between the style, choice of words, favorite topics of different people, or the styles of different authors from the past. For example we might discover that some authors had a language that anticipated (or influenced) the future, while others were stuck using the language of the past. \n 2. World map with radios. \n Online radios are a nice tool in learning any language, but often it is hard to find suitable ones. For learning or practicing a language the topic is perhaps less important as long as it is at least mildly interesting and as long as there is sufficient amount of talking (instead of just music), with a clear pronunciation that is representative for a given language/dialect. So what I would like is a world map with a curated list of online radio stations, placed on the map with pins, and for each station it would be given exactly what language/dialect they use, approximately how difficult are the topics discussed, what is the amount of slang, etc. \n 3. World map with unofficial regions. \n Finding a political map with the official borders for countries/states/counties/etc. is easy. There exist however, many other types of regions: \n \n historical ones (those that in the past might have formed an administrative unit but they don\u2019t anymore) \n linguistic regions (the region where a language/dialect is spoken) \n geographic regions not necessarily corresponding to administrative units (Silicon Valley, Gangetic Plain, etc.) \n regions of scientific interest: (the range of the Neanderthal man, the region of influence of classical Greek culture, the range of\u00a0the Bengal tiger in 1900) \n etc. \n \n It would be nice to have a tool for annotating maps in this way (possibly based on Google Maps) just as easily as we can add locations or paths between different points. Such regions, once drawn could be saved, embedded, printed, used in presentations, news articles, lectures, etc. or shared similarly to how users can share photos attached to places on Google Maps. Then, instead of the usual political/geographic view of the world, we could choose other filters/overlays created by others. \n Another type of overlay would not have strict borders like regions, but would be a mapping of values onto geographical coordinates. The function value could be shown in colors or using contour curves or any other visualization, and the values could come from uploaded datasets or from some specified function. These types of visualizations exist of course, but I don\u2019t know of a simple interface where users could create such maps. \n 4. World map live postcard. \n A simple service that shows an empty world map and generates a unique url on demand. If someone visits the url, their geographic location appears on the map. This can be done of course with analytics software, but the key here is that a) this is real-time b) accessible to everyone who has the url and c) starting a new map is just one click with no registration and then the url can simply be copy/pasted and sent to others. \n Example usage: I am regularly visiting a forum, I am curious where the other visitors are from, so I put the link in the message and watch the map in real time. \n Example 2: I am chatting with a group of friends and I hear that a common friend of ours is ill. I create a new map, and send the link to everyone, so when they click it, they appear on the map. They can also watch as more and more people click the link. They can also leave one liner messages that will be displayed on the map next to their location. As our friend checks the link, he/she can see \u201cget well soon\u201d messages popping up from all over the world. This is all a bit similar to Wikipediavision, but more user-generated and with throw-away urls. \n 5. Centralized phpBB spam filter. \n PhpBB is a robust, well-known and loved dicussion board (forum) software that has been around for a long time. The main aspect in which I find it inferior to centralized services like Disqus is spam. Spam filtering is something that is simply easier to do in a centralized way than for each individual board separately. This centralized filter would be a subscription-based API that I can call whenever I get a message on my board and it returns a spam/not spam flag. This can be integrated into my phpBB installation and the necessary action is taken automatically. This way, I wouldn\u2019t have to bother users with captcha\u2019s, registration, senseless restrictions, and I could still have them use the familiar interface of phpBB. If such a service works for WordPress comments and other blogging software, surely it can be retrofitted for phpBB (?). \n 6. Name face search. \n When picking a baby name, many parents would like to find out as much as possible about it, including the history and etymology of the name, which historical persons have had that name, current popularity of the name, etc. \n In this service you type in a first name and it gives you the photos of 100 random people having that name. Looking at the age of people on the photos, you can guess whether the name was more popular one or two generations ago than it is today. Also useful if you hear a name in a foreign language and you are not sure whether it is a male or female name. Images of faces can be found on Facebook or on Google Images, but there are still some technical difficulties: a) all 100 should be different persons b) the images should be filtered so that they only contain photos of people and not other random images."], "link": "http://lkozma.net/blog/quick-web-app-ideas/", "bloglinks": {}, "links": {"http://yudkowsky.net/": 1, "http://lkozma.net/blog": 2, "http://ngrams.googlelabs.com": 1, "http://iwl.me/": 1, "http://en.wikipedia.org/": 1}, "blogtitle": "next big thing syndrome"}, {"content": ["Bongard problems are a type of puzzle invented by Russian computer scientist M. M. Bongard, intended as challenges for pattern recognition algorithms. Regardless of the possible relevance to computer science, they are much fun simply as puzzles created by people for other people to solve. They were popularized in the G\u00f6del, Escher, Bach book and Hofstadter himself designed many Bongard problems. Harry Foundalis has several pages dedicated to these problems, with an extensive index of example Bongard problems . \n The idea of a Bongard problem is the following: given a set A of six figures (examples) and another set B of six figures (counter-examples), discover what is the rule that the figures in A obey and figures in B violate. \n Here are some very nice examples of varying difficulty and a much more detailed description: \n http://www.foundalis.com/res/diss_research.html \n Inspired by these examples I tried my hand at making some Bongard puzzles myself. The modest result is below. If you can solve them, leave the answer in the comments. \n Puzzle 1. \n \n \n Puzzle 2. \n \n \n Puzzle 3. \n \n \n Puzzle 4. \n \n \n solutions"], "link": "http://lkozma.net/blog/bongard-problems/", "bloglinks": {}, "links": {"http://www.lkozma.net/": 1, "http://en.wikipedia.org/": 1, "http://www.foundalis.com/": 2}, "blogtitle": "next big thing syndrome"}]