[{"blogurl": "http://www.databison.com\n", "blogroll": [], "title": "Excel & VBA - Databison"}, {"content": ["Anytime I write VBA code that runs for more than a split second, one of my worries remains that someone will ctrl + break it. You see, I am a very strong supporter of P.E.T.A. (People for Ethical Treatment of Algorithms) and believe that any code, no matter how long it takes (or in my case how badly written it is), must be allowed the dignity to complete. And for those who believe in killing poor little VBA code(s) with a ctrl + break, I just got a neat little trick up my sleeve. Here\u2019s how it goes: Take for example some VBA code that runs for a few seconds. It is important that the user let it run for that duration without stopping code execution since there are a lot of intermediate sheets, rows and columns that the code generates and subsequently deletes before exiting. If the user stops the code execution in between, they are left with a pretty ugly spreadsheet. (\u2026 now I know that opening the workbook again is always an option but hey that wouldn\u2019t be half the fun would it \u2026)  So the trick to prevent VBA code execution by pressing ctrl + break is to insert this magic statement in the VBA code:  1  Application.EnableCancelKey = xlErrorHandler  The statement instructs Excel to not show the \u201cCode execution has been interrupted\u201d message and provides a way for the developer to tap into the ctrl + break action by the user. Essentially there can be three values for Application.EnableCancelKey : xlDisabled, xlErrorHandler and xlInterrupt. By setting Application.EnableCancelKey = xlDisabled , we are essentially telling the application to stop responding to the ctrl + break command from the user. If the code runs haywire \u2026 too bad. The xlInterrupt is the normal course of action where the user can terminate the code and is the value that the application resets to after the code has run its course. The xlErrorHandler is the one that lets the developer instruct the application generate an error (code 18) and then to tap into that error by using error handling . Here is a code that is supposed to run for 5 seconds. If the user tries to stop the code prematurely, the xlErrorHandler kicks in and let the application raise an error. This error is then tapped by the error handler (On Error GoTo MyErrorHandler) and error handing code, after checking for the exact error code (error code 18 in this case), lets the code execution resume from where it left off.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  Sub code_that_runs_5_seconds() On Error GoTo MyErrorHandler: t = Timer Application.EnableCancelKey = xlErrorHandler  Do While Timer - t < 5 Loop  MyErrorHandler: If Err.Number = 18 Then  MsgBox \"Stop hitting ctrl + break !!!\"  Resume Else  'Do something to make your impatient user happy End If End Sub  Another interesting thing to note is that you can have more than one Application.EnableCancelKey instructions in a piece of code. For the portions of the code over which you (the developer) want to exert control, you can have it set to xlErrorHandler and for the other pieces you can let the user retain it by setting it to xlInterrupt later down the line.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  Sub another_code_that_runs_5_seconds() On Error GoTo MyErrorHandler: t = Timer Application.EnableCancelKey = xlErrorHandler  Do While Timer - t < 5 Loop MsgBox 1 Application.EnableCancelKey = xlInterrupt  Do While Timer - t < 10 Loop  MyErrorHandler: If Err.Number = 18 Then  MsgBox \"Stop hitting ctrl + break\"  Resume Else  'Do something to make your impatient user happy End If End Sub  Go ahead \u2013 take control You can download an example here here or click on the button below"], "link": "http://www.databison.com/index.php/prevent-users-ctrl-break-ing-your-vba-code-during-execution/", "bloglinks": {}, "links": {"http://www.databison.com/": 5}, "blogtitle": "Excel & VBA - Databison"}, {"content": ["Heat maps are pretty versatile. They have been used for everything ranging from charting home prices to changes in the stock market.  (Average Listing Price for US states, week ending Feb 17, 2010. Source : www.trulia.com)   (SNP performance, Feb 19, 2010. Source : www.finviz.com/map.ashx) Inspired by the last ball win over the South Africans yesterday night, I wondered if some of that action could be captured in a graph. One of the interesting approaches that came to mind was a heat map. But before we go further, here\u2019s how a normal scorecard would look like at the end of the match.  (Click on image to open the full scorecard) As you can see, this is clear and concise and probably the best thing to use if one were interested in knowing who scored how much and how well the bowlers bowled. But this does not give you quite the feel of how the match went ball by ball. While it does tell you that the match went down to the wire, it does let the user form an idea of what caused it to go went that way.  So here\u2019s what a cricketing heat map would look like.  (This is not a reproduction of the match mentioned above) For how this was done: Tabulate the Match Data  Data above all else !!! So here goes the data into a spreadsheet. Creating the Data Table Read the data from the tabulation sheet and lay out the grid on which the heatmap can be superimposed. We would need to use a few excel formulas out here.  Using Conditional Formatting for Creating a Heat Map While conditional formatting was limited to 3 conditions in Excel 2003 & earlier, Excel 2007 onwards that got changed. So we can have separate color coding for each category on run scored (0 to 6).  Once we have these steps done, we would need to resize the rows, extend the conditional formatting to all the cells and add a color legend."], "link": "http://www.databison.com/index.php/cricketing-heat-map/", "bloglinks": {}, "links": {"http://www.databison.com/": 8}, "blogtitle": "Excel & VBA - Databison"}, {"content": ["Looks like I am not the only one suffering from browse fatigue. Excel guru Dick Kusleika recently made the shift from Firefox to Chrome and he wasn\u2019t very impressed. I myself have been fiddling around with various browsers lately. Right before my earlier computer gave up the ghost and I shifted on to the new one, I had been hell bent on squeezing out the last remaining ounce of performance from it. With 256 MB of some very unreliable RAM and a modest AMD Duron processor, even simple tasks like browsing were a challenge at times. So one day when Internet Explorer crashed right after I had written a part of a particular post, I decided to give Firefox a try. Firefox ran well \u2026 atleast for the first few days and then its RAM hogging tendencies started to show up. While I was thankful for the spell checker and stability, if I were running Firefox, it was the only application my processor would let me run without going molasses.  Enter Chrome. A slightly different look and feel but I was willing to live with it if it delivered the goods. However Chrome again, just like Firefox, bloated after a few weeks of usage. Clearing the temporary files folder did not help and the time to start-up was driving me crazy. Internet Explorer for all its drawbacks, comes up really fast (that it takes eons to render a website after showing up is a different story altogether !! ). So I googled for \u2018fastest browser\u2019 and Opera was listed in the first few results. Now by this time I was willing to give anything a try, even Opera. An 11 MB executable and a 2 minute install later, I had a smile on my face. Opera is fast and has remained so even after a few months of usage. Of all four IE, Opera, FF and Chrome, Opera is by far the fastest to render a website. It is faster starting up than Firefox and Chrome but slightly slower than IE. It has tabbed browsing, resizable tabs, tabs previewing, speed dialing, download counter, password storage, expandable panels, spell checker, inbuilt search engine box and pretty much all that I would need for blogging and surfing. And I am sure there are a ton of other features that I am not even aware of since I go by just fine using only ones listed above.  My own \u2018in-depth\u2019 research has let me to believe that I fall in the tiny 1.57% portion of web surfers who use Opera. But then this number in reality could very well be lower since a lot of those visits may just be my own It could, in all likelihood, perhaps be even lower since this is an Excel blog and Linux users would be under-represented. Either ways, I will continue to stick with Opera although IE remains a useful 2nd in line. I am just wondering if there are others who\u2019ve used Opera? What\u2019s your experience been like?"], "link": "http://www.databison.com/index.php/opera-anyone/", "bloglinks": {}, "links": {"http://www.dailydoseofexcel.com/": 1, "http://www.opera.com/": 1, "http://www.databison.com/": 5}, "blogtitle": "Excel & VBA - Databison"}, {"content": ["So how do you fit multiple scales on a single excel chart? No, we are not referring about the primary and secondary scales on an Excel chart here, we are talking about adding a customized scale for each category in the chart. Take for example the receipts portion of the U.S. federal budget \u2013 a data set with multiple categories such as individual income, social security, excise, estate and other taxes & duties.  Now while all these categories pertain to the same universe and are equally important in their own right, the quantum of each category may differ from others in terms of sheer magnitude. So for example while the receipts from the individual income tax might be $ 1,100 billion in a particular year, the corresponding figure for the estate & gift tax might only be $ 26 billion.  If you put compare both these data points using a single chart scale, it does not really help the reader appreciate the size and the magnitude of change for the smaller data points. Using a log scale is an option worth using in many cases but the log scale does suffer from two shortcomings: a) Log scales do not lend themselves to easy comprehension. b) When the difference in size of two data points is disproportionately large, a log scale may not always help. So what about a chart with customized scales for each category \u2013 something like the one shown below. Methinks that a piece of beauty right there. (If you don\u2019t agree with me, go away and don\u2019t come back \u2026. ever )  So open up your spreadsheets and put on your thinkers cap \u2019cause ladies and gentlemen we are going to \u2026. Make a Multiple Scale Chart in Excel  The data comes first, each and every time. So let\u2019s generate the data grid for the chart. If you look at it carefully, a number of series have been generated. You can broadly classify them into three groups \u2013 the first that help us plot the actual data points, the second that help us plot the scales and the third ones that we use for the legend. The X and Y values for the actual plot values can be structured using formulas so that they fall between 0 and 10 (or any other scale that one may choose to use). (The trick here is to have them converted to a common scale).  Now let\u2019s draw a simple XY chart. Each row will have to be added as a series and has a name, X and Y values. Typically if our original data set had X data points, we would have to plot an additional of 2X the number of series for the labels for the chart scales. (Essentially the highlighted portion gets converted to individual series of the XY chart.)  In order to hide the last two points (we will use them later in the legend), we adjust the vertical scale to start at zero. Since the last two points has a Y-value of -1, the sink below the X-axis. To do this, right click on the chart axis and pick \u2018Format Axis\u2019 and then set the minimum value to 0. While at it, we can also adjust the maximum value of the horizontal scale (X-Axis) and set it to 10. This way the rightmost points align up nicely against the secondary vertical axis. We can obviously the values set of whichever level one wants \u2013 in this case we simply picked up the ones which work for us.  Adding Scales to the Chart Let\u2019s turn on the labels. Right click on any point and select \u2018Format Data Series\u2019 (Excel 2003) or \u2018Format Data Labels\u2019 (Excel 2010). Once you have the labels turned on for the first point, simply use the repeat key (F4) to carry out the same operation on all the other points. Once all the points have been turned on, you will notice that they would typically be positioned towards the right of the point. For the left scale and the first data series, you can have them positioned towards the left (right clicking the first point and on the \u2018Alignment\u2019 tab change the orientation to left).  Add Legend To the Chart  Turn on the legend. By default, you will see a number of entries in the legend and we definately don\u2019t need all of them. The only ones of use are the last two. So one by one, place two slow clicks on each of the legend entries and press the delete key. Once you have reached this point, take a break. Close your eyes for a while. Imagine a good looking girl / guy walking upto, staring deep into your eyes and and complementing you \u2026 on your Excel skills Ok time to wake up and move onto the formatting the chart\u2019s scales. One by one, hide the points on both the vertical scales. That way only the labels remain visible. Now for the interesting part. We can convert the horizontal chart scale (X-Axis) to show \u2018min\u2019 and \u2018max\u2019 strings rather than values from from 0 to 10. How. Simple. You can use custom format to change the original scale on the X-axis of the chart to show any text /string that you want based on the specified criteria. In our case, the X-axis has a scale that goes from 0 to 10. So writing a custom format string like: [=0]\u201c1997\u2033;[=10]\u201c2007\u2033; converts a value of 0 on the scale to \u201cMin\u2019 and a value of 10 on the scale to \u201cMax\u201d. The remaining values on the scale are now all hidden.  The end result of all the tinkering is that we have a chart that looks pretty much how we wanted it to be. As you can see, each category in the chart now has a customized scale of its own. From this point, its just a short hop to adding the chart title (of course), coloring gridlines and generally taking care of the placements.  You can download a copy of the chart with multiple scales here or click on the button below  With Excel, it\u2019s easy !!!"], "link": "http://www.databison.com/index.php/multiple-scale-chart-adding-customized-scale-to-each-category-in-a-chart/", "bloglinks": {}, "links": {"http://www.databison.com/": 14}, "blogtitle": "Excel & VBA - Databison"}, {"content": ["So you have been toiling away on a spreadsheet that must reach the CEO\u2019s desk before the end of the day. Your boss has been after your life to get this done as fast as possible with his frantic phone calls and a rather sharp pitchfork that he uses on special occasions like these. A gazillion formulas, allocations and calculations later, with your body screaming for some coffee, you allow yourself a break. As you return to your desk with a cup-full of the gooey thingy that comes out of the coffee machine, you feel like checking the latest scores from the match your favorite team is playing tonight. \u201c Ok \u2026 looks like we might \u2026. \u201d \u2013 you turn around and there\u2019s your boss standing right behind you. Damn #$#%^%&%$. Excel to the rescue. Did you know that Excel can help you aggregate content from a number of websites in a single spreadsheet? Here\u2019s how. Getting Data From Other Web Sources in Excel  Click on the \u2018Data\u2019 tab on the ribbon and then \u2018From Web\u2019 button (or \u2018 Data \u2018 -> \u2018 Import External Data \u2018 -> \u2018 New Web Query \u2018 in Excel 2003). A \u2018New Web Query\u2019 box will open up with the homepage that you\u2019ve set for Internet Explorer. In the \u2018Address\u2019 box, type in the URL that you would like to get information from (in our case, we choose Willow.tv to get cricking scores). The various tables on the page will be highlighted in as a yellow square. Once the page has fully loaded in the form, select the table which contains the specific portion that you need. The selected portion will get highlighted in a different color.. Click \u2018Import\u2019 and wait for the data transfer from the web page to the spreadsheet to complete.  Once you have the \u2018feed\u2019 placed in a spreadsheet, you can format it, hide columns that you don\u2019t want and make other aesthetic changes.  Now comes the interesting part. Right click on the range and select \u2018 Data Range Properties \u2018. Once the form opens, do the following changes: 1. Turn off \u2018 Adjust Column Width \u2018 (so that the columns do not resize on refresh) 2. Select \u2018 Overwrite Existing Cells with New Data \u2018 (so that the same cells get reused) 3. Change \u2018 Refresh Every \u2018 to a lower value say, once every minute (so that we get the new information as fast as possible)  That\u2019s it. But wait \u2026 there\u2019s more to be done. You can scroll down and start over again with an unused cell. This time around let\u2019s get content from our favorite financial website. So let\u2019s head over to reuters.com and get information from the stock exchanges.  Getting Tweets as Well So now we have both sporting and financial information in a single spreadsheet. Let\u2019s tweet a bit, shall we. Let\u2019s check out what Barrack Obama is saying.  So now we are up-to-the-minute with sports, markets and tweets. Add to this content from your favorite blogs, latest news headlines and throw in a couple of charts n\u2019 pivots and pretty soon we are talking about a pretty serious content aggregator ! So the next time the devil comes calling, tell him that you are still \u2018checking\u2019 it out"], "link": "http://www.databison.com/index.php/the-content-aggregator-called-excel/", "bloglinks": {}, "links": {"http://www.databison.com/": 6}, "blogtitle": "Excel & VBA - Databison"}, {"content": ["Table formulas were something that I discovered recently. Actually our reader m-b commented that he prefers to convert a range to a table and then employ table formulas instead of named ranges . That got me curious enough to explore them further and here\u2019s what I learnt. A Table in Excel A table is a feature in Excel that makes it easier to format and analyze a set of data points in a spreadsheet. Tables were introduced in Excel 2007 as an extension of the \u2018Lists\u2019 feature in the earlier versions. In Excel 2007 onwards, you can also use the table formulas to extract data from a table.  How Does One Create a Table  In Excel 2007 and later, all you have to do to convert a given range to a table is to simply select the range and then click the \u2018Table\u2019 button under the \u2018Insert\u2019 tab on the ribbon. Better still, as our reader Sam pointed out, use the shortcut key CTRL + T . So What Good is the Table For Lots actually.  Formatting: Completely change the look and feel of your data with a few mouse clicks  Summarize by adding row for Total: Just turn on the check box for \u2018Total Row\u2019 and you have a new row inserted just below the data set with the totals. Not only totals, you can select any cell in this row and choose from a number of aggregation options such as count, min, max etc. Export and Share: Export and share the table with other users using SharePoint Provide a Name to the Table: You can give the table a specific name (say \u2018Sales_Data\u2019) and use it later in your formulas. To give a new name to the table, open up the \u2018Name Manager\u2019 under the \u2018Formulas\u2019 tab and then edit the table name. Table Formulas in Excel \u201cFlaming Bisons !!! You made me read all this just to show what an Excel table looks like \u2026 I already know what it is so why don\u2019t you come straight to the point !\u201d Oh! That was rude. Did nobody ever tell you that patience is a kingly virtue? Table Formulas let you access table in a easy and intuitive manner. Let\u2019s begin by converting a range to a table. When you create a new table, Excel will provide with a default name, say something like \u2018Table1\u2032. This may not be most intuitive of names and you may wish to rename it to something else that is easier to remember and comprehend for others. Open the \u2018Design\u2019 tab and overwrite the text in the \u2018Table Name\u2019 box to something like \u2018sales\u2019.  The opens up a whole new box of chocolates ! You can now refer to and use the entire table, individual columns, rows, data range, headers or totals in your formulas. Using a Specific Column from the Table in a Formula Say you wanted to know the average for all items in the \u2018Revenue\u2019 column. Enter something like =AVERAGE(sales[Revenue]) in a cell and smile. The formula is so intuitive that it hardly needs explaining. However being the a** I am, let me be me. The \u2018sales[Revenue]\u2018 string refers the data points in the \u2018Revenue\u2019 column of the sales table. \u2018sales[Target'] would have referred to the \u2018Target\u2019 column of the same table. We can now use this like any other range in any excel formula. So =MAX(sales[Revenue]), =LARGE(sales[Revenue],5) and =COUNT(sales[Revenue]) are all valid formulas. Using a Specific Row from the Table in a Formula What\u2019s good for a column is good for the row. Format, however differ. To refer to a row in a table, we use the @ symbol . So if you want to refer to the the 10th row in the table, write =sales[@] in any cell in the 10th row. So something like =countif(sales[@],\u201d<>\u201d) would give you count of non-blank cells in the particular row of the table. If you copy the same formula to the cell immediately below, the corresponding values from the next row would be returned \u2013 even though the formula hasn\u2019t changed. Using the Entire Table in a Formula What\u2019s good for a column and row must be good for the table To refer to the entire table, use : =sales[#All] To refer to only the data portion of the table, use : =sales[#Data] To refer to the headers, use : =sales[#Headers] Using the SUBTOTAL Formula with the Table Another interesting feature of the Table is the use of SUBTOTAL function. The SUBTOTAL formula has two parts \u2013 the first one indicates the formula to use for aggregation and the second one contains the range to use. So =SUBTOTAL(9,A1:A10) would give the sum of the range from A1:A10 while =SUBTOTAL(1,A1:A10) would provide the average for the same range.  Coming back the the Excel Table, you can aggregate over the entire table (or a portion of it) the values by using the SUBTOTAL formula and providing it with the reference to a particular row, column or the entire table. Just as in the example above, you can get the average of the \u2018Revenue\u2019 column by using =SUBTOTAL(1, sales[Revenue]) .  If you noticed, when we turned on the \u2018Total Row\u2019 option, a new row with the total for columns got added to the table. We can now go ahead and modify the formulas using any of the formula options shown above. So the totals are not limited to just being summing but can very well be extended to averages, min, max, variance etc. Using the Totals for a Particular Column in a Formula To refer to the total for a column in the table, say Revenue, we can now write something similar to =sales[[#Totals],[Revenue]] . Please note that the \u2018total\u2019 value returned may not be the total (SUM) but is determined by the SUBTOTAL function parameter used to aggregate the column. Let\u2019s illustrate this with an example. If the SUBTOTAL formula in the \u2018Total Row\u2019 for the \u2018Revenue\u2019 column contained an aggregation function parameter with a value of 4, the total would have returned maximum value from the column. Now when somebody wants to refer to this total using =sales[[#Totals],[Revenue]], the \u201ctotal\u201d returned would not be a sum of column values but the maximum. I have a feeling that there\u2019s more that can be done with table formulas. Have you tried using them? Care to share ?"], "link": "http://www.databison.com/index.php/table-formulas-in-excel/", "bloglinks": {}, "links": {"http://www.databison.com/": 8}, "blogtitle": "Excel & VBA - Databison"}, {"content": ["Today\u2019s guest post is authored by Daniel Ferry , a longtime professional Excel developer and consultant (and a newbie blogger). A few months ago, I wrote a post on how one can simulate multithreading in VBA using Excel. Daniel picked up a thread from there and commented that he had some good success in marshalling some of windows multithreaded subsystems from within VBA. In this article he describes his approach. Multithreading VBA \u2013 Using VBScript Try as we might to work around it, Excel VBA is a single threaded affair. Still there are times when being able to spin off independent tasks could dramatically speed up processing times, rather than have all tasks follow in order, one after the other, each waiting for the previous one to finish. There are a number of times when data needs to finally get stored in Excel from data sources or using transfer processes which are far slower than the processing capabilities of Excel / VBA. Downloading information or data stored from a website is one such example. Now, VBA is a capable scripting language and certainly up to the task. However when we scrap a website, VBA has to wait for over 90% of the time for the website server to respond with the requested data. Once the html is on the Excel computer, the parsing out of the data is virtually instantaneous. If there ever was a task that could benefit from multithreading in VBA, this is it. In the demo workbook included with this post, the reader will find a tool implementing three different strategies for downloading data from a website using Excel. The demo contains a list of 100 property addresses and the tool retrieves valuation data on these properties from www.realestateabc.com . The demo also includes controls allowing the user to toggle between the three different techniques and to time them.  The first technique instantiates Internet Explorer via OLE. While this allows the user to see the pages being scraped, this is by far the worst strategy. IE is bloated and very slow. The second technique uses MSXML2 as a lightweight alternative that is approximately four times swifter than IE.  These first two techniques are squarely rooted in the single threaded camp, since while they are getting the data Excel is waiting intensely and not able to do much in the meantime. As you can see above, the processing takes place one record at a time and next record is processed only once the previous one has finished. The third innovative technique however, makes this task run much faster and is listed in demo workbook as the Swarm Method. The Windows Scripting Host is a multithreaded subsystem of the Windows OS that runs VBScript programs. My swarm creates a number of VBScript files in the demo workbook folder and runs them all in the Windows Scripting Host simultaneously. Each one of these agents scrapes one record of valuation data from the website, grabs an OLE handle back to the parent workbook, deposits it data to Excel, and kills itself. The Worksheet_Change function senses that a new data record has been entered and creates a new agent to replace the one that just expired, keeping the swarm size in balance.  ( For those interested in knowing more about what a .vbs file is, I recommend reading this explanation before resuming from this point. ) Each agent is programmed with specific range coordinates to deposit the data. The demo includes a control to allow the user to fine tune the number of agents in the swarm. Different computers and versions of Windows can handle different sizes of swarms. Windows Vista seems to have a more robust OLE subsystem, and quite handily tromps on WinXP. On my computer XP performs well with 50 to 60 agents in a swarm, while Vista on the same machine can smoothly handle a couple hundred agents.  The amount of time that can be saved by this multithreaded technique is impressive. It\u2019s a function of the number of simultaneous agents in the swarm. When selecting the swarm method in the demo, please be patient as there will be a few seconds of delay before results start returning. But when they do it comes in tsunami fashion! The VBA code is well commented and fairly straightforward. In my opinion it is well worth the time to study the code to see how the three methods are achieved using VBA, especially the Swarm method. Since the demo will be creating a number of .vbs agent files, it is best to create a folder for the demo workbook.  Daniel Ferry is a professional Excel developer and consultant. He has been developing business solutions with Excel for two decades and did the same with Lotus 123 before Excel existed. He has just started his own blog at excelhero.com/blog , hoping to provide many insights into creating powerful Excel based solutions. Check out his LED RSS News Ticker at his blog for an interesting demonstration of bitmasking in Excel worksheet formulas.   Here\u2019s some basic information on VBScript. What is a .VBS File ? Simply put, a .vbs file is essentially a file containing VBScript code (short for Visual Basic Scripting Edition ). VBScript comes installed with all Windows OS since 1998. What make .vbs useful is its abiity to pack html and VBScript code in a single file which can then be stored as a file with \u201c .vbs \u201d extension. Here\u2019s an example. Open notepad and type in the following lines:  1  MsgBox(\"Hello World\")  I am sure you would have recognized that this is a pretty standard VBA code that anyone would use when writing VBA code. Now save this file as \u201c myfile.vbs \u201c. Now double click on the file and you will see the message box appear with the specified text. When used judiciously, VBScript allows access the DOM (Document Object Model) of a web page and to carry out operations not possible using plain HTML. Where Does VBScript Get Used It can be imbedded in an HTML webpage as a sort of analog to JavaScript. Microsoft developed Internet Explorer early on to use VBScript natively for essentially any task that a website developer might do in JavaScript, such as AJAX, animation, etc. The only problem with using VBScript inside of a webpage to control that page is that the only browser that supports it is Internet Explorer; all other browsers will just ignore the VBScript. In this scenario, VBScript is being interpreted and run by Internet Explorer. The second major use is as the native language used in Active Server Pages (ASP), which was Microsoft\u2019s first server-side script engine for dynamically-generated web pages. Entire web applications can be developed using ASP Classic and VBScript, and millions have been. In this scenario, VBScript is being interpreted and run by Internet Information Services (IIS), Microsoft\u2019s web server. The third major use, and the scenario used in this article, to run VBScript in the Windows OS subsystem called the Windows Scripting Host. In effect, this allows VBScript to act as a modern day batch file on steroids. IT administrators often use VBScript to automate management of company workstations, including the company-wide deployment of updates and new programs, backups, diagnostics, etc. In this scenario, VBScript is being interpreted and run by the Windows Scripting Host on any modern Windows computer. VBScript is a subset of VB6 and VBA. One important difference is that VBScript does not support variable typing, so all variables in VBScript are variants. Click here to go back to the article ."], "link": "http://www.databison.com/index.php/multithreaded-vba-an-approach-to-processing-using-vbscript/", "bloglinks": {}, "links": {"http://www.excelhero.com/blog": 1, "http://www.databison.com/": 6}, "blogtitle": "Excel & VBA - Databison"}, {"content": ["Named Ranges are probably one of the most useful features in Excel. Named ranges can add interactivity, make long formulas shorter and and if used properly, generally provide a clean mechanism to share information across the workbook. I remember being mighty impressed with Peter Rakos 3D rotation model last year and spent a good amount of time trying to understand it. The VBA code is only a few lines with the major work being taken up by the named ranges. ( Take a look at the modified version of the file here ). Considering how useful named ranges are to mankind (especially the ones who work out of cubicles), I am a little surprised that they have gone without getting much focus on this blog. However today changes that. So here are some tips that will make working with named ranges in excel faster and more productive. Creating Multiple Named Ranges in One Go using a Shortcut Normally if one has to create multiple named ranges from a given set of data, the usual course of action is to type in (or select) the address of a named range and then create one after providing it a proper name. However, in many cases where you already have the data headers present in a worksheet, there\u2019s a far simpler option available to create multiple named ranges in one go.  Say for example, we had a set of data points arranged as shown below and we wanted to create four separate named ranges, one for each column. Rather than creating named ranges one by one, you can choose to use the CTRL + SHIFT + F3 shortcut which opens up the \u2018Create Named Range From Selection\u2019 option box. The same can be accessed from the under the \u2018Formulas\u2019 tab as shown above. You can now create more than one named range \u2013 rowwise, columnwise or both.  When you click ok, you can go back and see that four separate named ranges have been created. The column headers are used as names for the named range so created. If needed, you can now go back to the named range namager and quickly edit the addresses. Accessing the Named Range Manager in Excel While Excel 2003 used \u2018Insert\u2019 -> \u2018Name\u2019 -> \u2018Define\u2019 to access this option, Excel 2007 + had \u2018Formulas\u2019 -> \u2018Name Manager\u2019. Another way is to use CTRL + F3 .  Using the OFFSET Function Named ranges would not be half as interesting (and useful) without the OFFSET function . Offset helps positiion and expand a given range. When used as a part of a named range, the result can be potent dynamic range which has the ability to expand, contract or reposition itself.  Use Absolute Reference When Working with Named Ranges To be honest, I don\u2019t know if this is a design feature or a bug but if you use relative reference (A1 insted of $A$1) when defining a named range, it does not stay that way you intended it for long. Let me highlight this with an example. Suppose you wanted to create a named range which OFFSETS cell A1 10 rows downwards. The usual thing to do is to write something like: =OFFSET(Sheet1!A1,10,0) or as shown below:  So far so good. If you had to use this named range in a cell, you would probably pick up a cell (say B1) and enter something similar to = my_named_range where my_named_range is the name that you gave to the named range you create in the previous step.  Now let\u2019s do some random activities \u2013 copy paste cells, draw a chart etc etc. Now go back and revisit the named range (remember to use CTRL + F3). What do you see? The named range has \u2018magically\u2019 changed from =OFFSET(Sheet1!A1,10,0) (the formula that you had entered) to =OFFSET(Sheet1!A2,10,0) (or randomly in other cases to something like =OFFSET(Sheet1!A65536,10,0) ). The cell where you entered the named range (cell B1 in our case), still continues to show the correct value but may error out at a later stage. On the other hand, if one had used absolute reference ($A$1 insted of A1), the named range stays put.  I once overlooked this phenomenon when working with P&L projections and you should have seen the look on people\u2019s faces when they opened the spreadsheet Use F2 to Edit a Named Range Another useful thing to keep in mind to use F2 when editing named ranges. Try using the arrow key to navigate across a named range formula and see what fine mess happens!  Pressing F2 before you use the arrow keys prevents this from happening. Have got any named range tricks of your own? Care to share? Here\u2019s an example of named range with data validation . You can also download it by clicking on the button below:"], "link": "http://www.databison.com/index.php/named-range-a-few-quickies/", "bloglinks": {}, "links": {"http://www.gamasutra.com/": 1, "http://www.databison.com/": 12}, "blogtitle": "Excel & VBA - Databison"}, {"content": ["So you thought you knew every goddam\u2019 Excel shortcut out there? Thought that you were the quickest draw around the office block. Not so fast sunny boy \u2026 not so fast ! You\u2019ve just ventured into the mean and vicious badlands of the Bison. You have two choices \u2013 stop reading this here \u2026 \u2026 OR \u2026 stay back and take up the challenge \u2026. So before I have your ego blown off, I will give you 7 chances to salvage it. Excel Shortcut to Copy Contents of Cell onto Cells Below It So how do you copy the contents of a given cell onto the cells below it?  I know what you are thinking \u2013 something like CTRL + C, then select the range using the SHIFT key and then CTRL + V. Right? Not quite. Simply select the (vertical) range in which the first cell is the one you would like to copy down. Press CTRL + D . Excel Shortcut to Enter a New Value into a Cell and Copy To Others  You have been sent over a partially filled worksheet with some data which unfortunately has some blank cells in it. From your experience you know some of the values and would like to quickly punch in those values and be done with it as fast as possible. Stop right there!!! No entering a value and then copy pasting it over a range is not the quickest way around. Simply select the entire range (even a two dimensional one) and in the first cell , type in the value you would like to copy to all cells of the range. Press CTRL + ENTER . Excel Shortcut To Hide All Objects (Including Charts) in the Worksheet You finally managed to get that dashboard done with a gazillion charts and shapes. However you would like to rework the formulas and formatting. So there go another few hours in moving the charts and other shapes (one by one) around the spreadsheet and then editing the formulas underneath (you were smart, you hid the formulas under a chart so that nobody could see it ). So anything you can do about it?  Simple. Press CTRL + 6 to hide all the objects and work directly with the cells underneath those objects. How do you turn them right back on. Simple again. Press CTRL + 6. Excel Shortcut to Format as Date You imported a ton of data from Oracle or MS-SQL or one of those wired applications that the IT people in your organization use nowadays. The morons sent you the data fine but the date columns come out having values something like 40179, 40180 etc. How do you convert them to date.  I know what you are thinking. You are thinking, hey that\u2019s simple \u2013 Select the column, then right click and open the \u2018Format Cell\u2019 option and then format them as dates. Here\u2019s the better option \u2013 Press CTRL + SHIFT + # . That does it. One can also use : Ctrl + Shift + $ to convert a value to currency and Ctrl + Shift + % to convert to percent format. Excel Shortcuts to Change Font Family and Font Size You have a sentimental attachment to Calibri. You use Calibri when you draft your emails, use them in all your spreadsheets and even say goodnight to your wife in Calibri But that newly recruited analyst has an equally strong affinity for Arial. (He comes from the Arial gene pool). As a result, you spend a good amount of your time converting your spreadsheets to Calibri from Arial. Any shortcuts you remember? Well I have one. Use CTRL + SHIFT + F . That opens up the Font family format option box. Another shortcut that works only with Excel 2003 is CTRL + SHIFT + P which let\u2019s you change the font size (increase / decrease using the arrow key). While at it, any shortcuts to change the fill color of the cell? Again use CTRL + 1 to open the format cell option box and then (after releasing all keys) press \u2018F\u2019 (or \u2018P\u2019 if you\u2019re using Excel 2003). Excel Shortcuts to Draw Borders around Cells Think what if I asked you to draw a border around a cell.  1. You take your hand off the keyboard. 2. Place it firmly on the mouse and then aim it precisely over the draw border  option. 3. Take another split second choosing the correct border option and then press the trigger. And that\u2019s it. Yup you got me there. Fast. Neat work. Not quite. I would use CTRL + SHIFT + & . Go back and check your spreadsheet, I just made two more smoking holes in it Excel Shortcut to Add Comment or Edit It  This one \u2013 this one right here is a single handed trick (and a dirty left handed one at that). How do you enter a comment (or edit an existing one) in a spreadsheet? Before you say \u2013 Right click and Add / Edit Comment \u2013 Zip it. Pressing SHIFT + F2 does it as well. Works for both editing an existing one as well as adding a new comment.  Good that you made it this far cause I sure am done with this post. I know what you\u2019re asking yourself: Do I feel lucky. Well, do ya, punk? (In case you didn\u2019t catch it, the dialog adaptation was from \u201cDirty Harry\u201d, Released: 1971)"], "link": "http://www.databison.com/index.php/so-how-many-of-these-excel-shortcuts-do-you-know-punk/", "bloglinks": {}, "links": {"http://www.databison.com/": 8}, "blogtitle": "Excel & VBA - Databison"}, {"content": ["Here\u2019s a slightly dated chart from NY Times showing volatility on the Wall St across the century. The chart does commendable work in conveying information about a longish time series pretty effectively. I found some great chart design principles at work here that I could utilize for day to day charting needs.  ( Click on image to open larger version. Click here for the original version) Here\u2019s a look at a few of those amazing things that I picked up from this chart (I am sure when you take a closer look, you will find more). I will also attempt to show how they can be reproduced using Excel. The Chart Ought to be Clutter Free The first time you look at the chart, one could probably miss the fact that you are looking at about 100 years worth of data. Everything about the chart characterizes simplification. \u201cAbove all else, simplify\u201d . Here\u2019s the Excel reproduction of the NY Times chart. Please bear in mind that I\u2019ve stripped off a few details, the data is random and the chart isn\u2019t as handsome as the original )  Softer Gridlines \u2013 To Avoid Chartjunk Since the chart covers a long timeline, the gridlines help to break-up the time series into smaller, more digestible pieces. The authors have taken care to keen them subtle and in the background using softer colors. In Excel, you can make the gridlines a little more subtle by first modifying the default palette colors and then using them to paint the gridlines.  X-Axis Labels in Proportion to the Overall Timeframe Covered Oftentimes, when one has too many data points in the chart, the X-axis suffers with data overload. One often sees too many being forced to occupy the same space. This is 100 years of data and all the chart makers have used are 11 X-Axis labels. The result \u2013 more clarity. In Excel you can add custom format the chart\u2019s axis so that they become easier to grasp for the reader. Here\u2019s how we converted something like \u201c 1-Jan-1910 \u201d into \u201c 1910\u2032s \u201c.  ( Note : The label\u2019s on the recreated chart are not perfect (say a 1980\u2032s does not span the range between 1980 and 1990 but actually marks the year 1980). There are ways to get this right but are beyond the scope of this post.) Y-Axis Labels Formatted to Ease Comprehension I\u2019ve been guilty of leaving the labels on the Y-Axis as such without providing the reader with any information on the unit of measurement. A point on the scale which reads \u201c10\u2033 could be anything \u2013 10 years, 10 litres, 10 tons, 10 billion. How many times have you seen people ask the following question in a presentation, \u201c So the units on the Y-Axis represent (something) , right? \u201d I have been asked that question more times than I would wish to remember and I kick myself in the \u2026 you know what \u2026 everytime for missing the obvious. In this case, the labels have been formatted with a % suffix so that one does not have to ask that question. The datum (zero) has been omitted. The same can be achieved in Excel by again using custom formatting. This time around, we take use of three conditions \u2013 the format to use when the number is positive, the format to use when negative and the third one for zero. (In case you missed the link above, here\u2019s a bit of information on the custom format feature in Excel.)  Add Descriptive Information \u2013 But Don\u2019t Overdo I like to pack my charts with as much descriptive information as possible till such time that they don\u2019t interfere with comprehension and readibility. Most of the charts that you see in the corporate world are not exactly as small as sparklines . This means that a typical chart will have a lot of space that can be used for other things \u2013 such as the empty region underneath an area or a line chart. In this case, the empty space below the plot has been used effectively by adding major events descriptions there. Also worth noting is that the minor events have been left out. I think a few other pivotal events could have been included but that\u2019s the point \u2013 you can\u2019t make everybody like what they see. Be bold \u2013 don\u2019t give in the urge to show everything.  You would have also probably noticed that the legend is shown right next to the chart label so that nobody misses it.  Avoid Colors Unless They Convey Information Use colors to show additional information, preferably another dimension of data. Be subtle and be intuitive. Stephan Few has some great thoughts on using colors with charts here. The color range from dark blue to pale brown signifies the return from the index (-25% to +25%). As you would have sensed, periods of low return are typically followed by periods of high volatility.  Like everything else in Excel, there will be a way to add the color phase band to this chart but I leave that challenge to you Here\u2019s a copy of the reproduced volatility chart for download"], "link": "http://www.databison.com/index.php/volatility-chart-in-excel-lessons-in-chart-design-from-ny-times/", "bloglinks": {}, "links": {"http://www.perceptualedge.com/": 1, "http://graphics8.nytimes.com/": 1, "http://www.databison.com/": 13}, "blogtitle": "Excel & VBA - Databison"}, {"content": ["Sometime back I wrote a post on making control charts using Excel . The chart was initially created in Excel 2003. The chart consisted of the plot values, the average line and upper & lower control limits. While the main data series was a line chart, the average, upper and lower control limits were plotted as dots of an X-Y and then were extended into lines using the horizontal error bars. Shown below is a sample.  The main data series referred to a range in the sheet.  The average, upper and lower control limits were dynamic in nature and named ranges were used to provide them with values.   From Excel 2003 to Excel 2007 Coming to the point \u2013 All was hunk dory when I made this in Excel 2003. Then someone pointed it out that the charts did not come out looking all that great in Excel 2007.  On closer inspection, I found that the disproportionately large error values that were used to create the error bars were causing this errant behavior . I had, in all my enthusiasm to make the chart \u2018future-proof\u2019 had provided an error value of 1000.  While that worked well in Excel 2003, it make a caricature of a well meaning chart in Excel 2007. Since the chart\u2019s plot area remained the same, the actual data values (some 42 data points) got squeezed into a proportionately smaller area compared to the 1000 assigned as the error value. The result was that it appeared as if all the actual data points had been aligned to vertical axis ! This was easy to fix however, and when I changed the error values back to 42 (equal to the number of data points) from an earlier value of 1000, the chart regained sanity.  From Excel 2007 to Excel 2010 Note : Please see update below. Guess how the chart we rectified for Excel 2007 turned out in Excel 2010 (beta). Here\u2019s how:   The average, upper and lower control limit lines were all gone. Actually they were there but hidden. I could get them back on changing the visual layout of the chart.   That got us to this point.   But the formatting was gone! There isn\u2019t chance in hell that someone would be able to tell the upper and lower control limits from the gridlines. I noticed another thing that I really could not fathom. While the spreadsheet that we had originally created in Excel 2003, atleast opened up correctly in Excel 2007, when I tried opening it in Excel 2010, the row heights for the rows (where the control chart had been placed) had somehow increased all the way from the default 12.75 pixels in Excel 2003 to something like 409 pixels in Excel 2010). (Apparently the same treatment is meted out to a few other charts as well.)   The result \u2013 dashboards crapped out to the max   Courtesy: www.icanhascheezburger.com Here\u2019s the culprit duly zipped and handcuffed. If you try opening it first with Excel 2003, followed by Excel 2007 and then finally with Excel 2010, you would see what I mean.   Update : Tell you what \u2026 Microsoft wrote back confirming that the issues have been addressed in the latest builds. So much for saying that the MS doesn\u2019t listen \u2026 well they did this time"], "link": "http://www.databison.com/index.php/an-excel-charts-journey-across-versions/", "bloglinks": {}, "links": {"http://icanhascheezburger.com/": 1, "http://www.databison.com/": 15}, "blogtitle": "Excel & VBA - Databison"}]