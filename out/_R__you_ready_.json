[{"blogurl": "http://ryouready.wordpress.com\n", "blogroll": [], "title": "\"R\" you ready?"}, {"content": ["I recently wanted\u00a0to construe a dashboard widget that contains some text and other\u00a0elements using the grid graphics system. The size available for the widget will vary. When the sizes for the elements of the grobs in the widget are specified as\u00a0 Normalised Parent Coordinates the size adjustments happen automatically. Text does not automatically adjust though. The size of the text which is calculated as fontsize times the character expansion factor ( cex ) remains the same when the viewport size changes. For my widget this\u00a0would require\u00a0to adjust the fontsize or cex settings for each case seperately. While this is not\u00a0really an obstacle, I asked myself how a grob that will adjust its text size\u00a0automatically when being resized can be construed. Here I jot down my results in the hope that you may find this useful. \n First I will create a new grob class called\u00a0 resizingTextGrob that is supposed to resize automatically. \n \nlibrary(grid)\nlibrary(scales)\n\nresizingTextGrob <- function(...)\n{\n grob(tg=textGrob(...), cl=\"resizingTextGrob\")\n}\n \n The grob created by the function contains nothing more than a textGrob . In order for the grob class to print something we need to specify the\u00a0 drawDetails method for our class which will do the drawing. The drawDetails method is called automatically when drawing a grob using grob.draw . \n \ndrawDetails.resizingTextGrob <- function(x, recording=TRUE)\n{\n grid.draw(x$tg)\n}\n \n Up to now this will produce the same results as a plain textGrob . \n \ng <- resizingTextGrob(label=\"test 1\")\ngrid.draw(g)\ngrid.text(\"test 2\", y=.4)\n \n  \n Now, before doing the drawing we want to calculate the size of the viewport and\u00a0adjust the fontsize accordingly. To do this we can take the approach to push a new viewport with an adjusted fontsize before the drawing\u00a0occurs. To perfom the calculations and and push the viewport we specify a\u00a0 preDrawDetails method. This method is automatically called before any drawing occures. It gives us the chance to do some modifications, like e.g. pushing a viewport. \n For this purpose first the available height is calculated. Than the fontsize is rescaled according to the available width. The rescaled fontsize is used for the new viewport. Now for a fully developed class we will want to include these parameters in the grob constructor of course. Or we might define a proportion factor argument by which to shrink the text instead. Anyway, to keep things simple this is not done here. \n \npreDrawDetails.resizingTextGrob <- function(x)\n{\n h <- convertHeight(unit(1, \"snpc\"), \"mm\", valueOnly=TRUE)\n fs <- rescale(h, to=c(18, 7), from=c(120, 20))\n pushViewport(viewport(gp = gpar(fontsize = fs)))\n}\n \n To clean up after the drawing the created viewport is popped. This is done in the\u00a0 postDrawDetails which is automatically called after the\u00a0 drawDetails method. \n \npostDrawDetails.resizingTextGrob <- function(x)\n popViewport()\n \n Now the output will depend on the size of the current viewport. When resizing the device the text size will adjust. \n \ng <- resizingTextGrob(label=\"test 1\")\ngrid.draw(g)\ngrid.text(\"test 2\", y=.4)\n \n  \n Let\u2019s compare the standard textGrob with the new class. For this purpose let\u2019s draw a small clock and\u00a0display it using different device sizes. \n \nlibrary(gridExtra)\na <- seq(2*pi, 2*pi/ 12, length=12) + pi/3\nx <- cos(a) / 2\ny <- sin(a) / 2\nsegs <- segmentsGrob(x*.2 + .5, y*.2+.5, x*.3 + .5, y*.3 + .5)\n# the standard approach\ntgs.1 <- textGrob(1:12, x*.4 + .5, y*.4 + .5)\n# the new grob class\ntgs.2 <- resizingTextGrob(1:12, x*.4 + .5, y*.4 + .5)\ngrid.arrange(grobTree(segs, tgs.1), grobTree(segs, tgs.2))\n \n What it looks like at the beginning. \n  \n What it looks like when the device is resized. \n  \n Note how the size of the text of the lower clock adjusts to the device size. The text size in the upper graphs remains the same and becomes too big for the clock while it changes for the lower ones. \n BTW:\u00a0The\u00a0definitive\u00a0guide for \u00a0the grid graphics model is the book\u00a0 R graphics \u00a0by Paul Murrell."], "link": "http://ryouready.wordpress.com/2012/08/01/creating-a-text-grob-that-automatically-adjusts-to-viewport-size/", "bloglinks": {}, "links": {"http://www.ac.nz/": 1, "http://feeds.wordpress.com/": 1, "http://ryouready.wordpress.com/": 4, "http://www.flickr.com/": 1}, "blogtitle": "\"R\" you ready?"}, {"content": ["In this post we collect several R one- or few-liners that we consider useful. As our minds tend to forget these little fragments we jot them down here so we will find them again. \n Subsequently re-calling a function that takes two arguments \n Suppose we wanted to call a function that takes two arguments and use the results as a argument to the same function again. For example may want to sum up the values 1 to 5 Of course the function sum will do this for us, but what if this function didn\u2019t exist? We might of course write: \n \n1 + 2 + 3 + 4 + 5\n \n But how do that in a single function call? Using do.call or the like will not work, as the function \"+\" takes two arguments. \n \ndo.call(\"+\", list(1:5))\n \n The trick is to use the function Reduce . \n \nReduce(\"+\", 1:5)\n> 15\n \n Evaluating an R command stored in a character string \n From time to time, you may encounter situations where you have to evaluate a command which is stored in a character string. For example, let\u2019s assume that we have the following variables: \n \nname1 <- \"Steve\"\nname2 <- \"Bill\"\nvalue1 <- 1\nvalue2 <- 0\n \n Now, what would you do if you have to create a vector with entries whose value is stored in the variables value1 and value2 and entry names whose value is stored in the variables name1 and name2 ? You can write: \n \ncommand <- paste(\"values=c(\",name1,\"=\",value1,\",\",\nname2,\"=\",value2,\")\",sep=\"\")\nvalues <- eval(parse(text=command))\n \n After issuing those command a vector named values is going to be created with named entries and values as follows \n \nSteve\u00a0 Bill\n1\u00a0\u00a0\u00a0\u00a0 0\n \n Creating an empty dataframe with zero rows \n Sometimes I want to fill up a dataframe from the frist row on. It might be useful do start off with a dataframe with zero rows for that purpose. The function numeric or character do the job. In case we wanted to specify a factor with predefined levels also factor may be useful. \n \ndata.frame(a=numeric(), b=numeric())\ndata.frame(a=numeric(), b=character(), c=factor(levels=1:10), stringsAsFactors=F)\n \n \u2026 to be continued. \n Tamas and Mark"], "link": "http://ryouready.wordpress.com/2012/03/18/useful-r-snippets/", "bloglinks": {}, "links": {"http://feeds.wordpress.com/": 1, "http://ryouready.wordpress.com/": 1}, "blogtitle": "\"R\" you ready?"}, {"content": ["Guest post by Daniel Adler . \n Below is a real-time audio-visual multimedia demonstration \u2013 or in short \u2018an intro\u2019 \u2013 written in 100% pure R. It requires no compilation and runs across major platforms via the package rdyncall and preinstalled precompiled standard libraries such as OpenGL and SDL libraries. This \u2018happy-birthday\u2019 production runs about 3 minutes and comprises typical effects of the home computer oldschool demoscene era such as a rotating cube, multi-layer star field, text scrollers, still images and flashes while playing a nice Amiga Soundtracker module tune. Check out the video screen-cast (with sound) or enjoy a smooth framerate using the R version at this website . \n  \n The rdyncall package used for this video facilitates a dynamic middleware between R and\u00a0 C libraries and offers an improved Foreign Function Interface for R. It enables developers to \u2018script\u2019 system-level code in R such as OpenGL visualizations, multimedia applications, computer games or simply to call a single system service without the need for writing C code. The FFI toolkit offered by the package is flexible enough to address low-level C interfacing issues directly in R. R bindings to the C libraries are created dynamically with a single interface function \u2018dynport\u2019 similar to \u2018library\u2019 and the C interface is made available in R as if it is an extension to the language. Support for handling foreign C data types and callbacks is offered by helper utilities. An extendable repository of cross-platform bindings is delivered with the package that contains bindings to OpenGL 1, OpenGL 3, SDL, Expat, ODE, CUDA, OpenCL and more. \n The implementation of rdyncall is based on libraries of the DynCall project that offers a dynamic call facility between interpreted languages and precompiled native code with support for almost all basic C types (in constrast to \u2018.C\u2019 in R). Call kernels \u2013 implemented in Assembly \u2013 offer a Foreign Function Interface solution that is small in size and generic in its application. The libraries have been ported across a large set of processor architectures (i386,AMD64,ARM,PowerPC 32-bit, MIPS 32/64-bit, SPARC 32/64-bit) and operating-systems including major R platforms. \n The rdyncall package comes with a couple of demos, a comprehensive manual and vignette that gives further details. \n Have fun!"], "link": "http://ryouready.wordpress.com/2011/07/29/multi-platform-intro-video-scripted-in-r-using-rdyncall/", "bloglinks": {}, "links": {"http://feeds.wordpress.com/": 1, "http://www.uni-goettingen.de/": 1, "http://dyncall.org/": 1, "http://ryouready.wordpress.com/": 1, "http://dyncall.org": 1, "http://cran.r-project.org/": 4}, "blogtitle": "\"R\" you ready?"}, {"content": ["The first week of April I attended an excellent workshop on biplots held by Michael Greenacre and Oleg Nenadi\u0107 at the Gesis Institute in Cologne, Germany. Throughout his presentations, Michael used animations to visualize the concepts he was explaining. He also included\u00a0 animations in some of his papers. This inspired me to do this post in which I will show how to use LaTex, R and Sweave to include animations in a PDF document. Here is the PDF document we will create (on MacOS the standard PDF viewer may not be able to play the animations, but Adobe Reader will). For this post some basic knowledge about Sweave is assumed. \n First, let\u2019s create a simple animation in R. I will use a neat\u00a0 example Oleg used during the biplot workshop: Pacman eating. Herefore we need a pacman. We use a pie chart to construct him \n pie ( c ( .1 , .9 , .1 )       # a pie chart \n pie ( c ( .1 , .9 , .1 ),      # a pie chart \n col = c ( \"white\" , \"yellow\" , \"white\" ), # resembling pac man \n border = NA , labels = NA ) \n points ( .3 , .4 , pch = 16 , cex = 4)    # adding an eye \n Next, we will produce a series of pictures of Pacman by varying a parameter that specifies how far he opens his\u00a0 mouth. Here, all the single pics are saved in one PDF file, each as one page. \n p <- seq ( 0.999 , .9 , len = 10 )   # parameters for opening mouth \np <- c ( rev ( p ), p )     # add reversed parameters \n pdf ( file = \"pacman.pdf\" )    # open pdf device \n for ( i in 1 : length ( p )){ \n pie ( c ( 1 - p [ i ], p [ i ], 1 - p [ i ]),  # pac man like pie chart \n  col = c ( \"white\" , \"yellow\" , \"white\" ), \n  border = NA , labels = NA ) \n points ( .3 , .4 , pch = 16 , cex =4 )  # add the eye \n } \ndev . off ()       # close pdf device \n Now, each page of the PDF file contains a single frame of an animation. To include it as an\u00a0 animation in LaTex the animate package can be used. Here is the whole code with the Pacman frames being rendered and included via LaTex. \n \\documentclass { article } \n\\usepackage { animate } % for animated figures\n\n \\t itle { Animations in \\LaTeX {} via { \\sf R } and Sweave } \n \\a uthor { Mark Heckmann } \n\n \\b egin { document } \n\\maketitle\n\n << echo = false , results = hide >>= \np <- seq ( 0.999 , .9 , len = 10 )   # parameters for opening mouth \np <- c ( rev ( p ), p )     # add reversed parameters \n pdf ( file = \"pacman.pdf\" )    # open pdf device \n for ( i in 1 : length ( p )){ \n pie ( c ( 1 - p [ i ], p [ i ], 1 - p [ i ]),  # pac man like pie chart \n  col = c ( \"white\" , \"yellow\" , \"white\" ), \n  border = NA , labels = NA ) \n points ( .3 , .4 , pch = 16 , cex = 4 )  # add the eye \n } \ndev . off ()       # close pdf device \n 4 \n\n \\b egin { center } \n \\a nimategraphics [ loop , width = .7 \\linewidth ]{ 12 }{ pacman }{}{} \\\\ \n \\v space {- 5 mm } Click me ! \n\\end { center } \n\\end { document } \n If you click on Pacman in the PDF file, he will start eating. Now let\u2019s create another example and add a panel to control the\u00a0 animation in the PDF. To add controls to the animation use the controls tag in the \\animategraphics command. In the example several values from a uniform\u00a0 distribution are sampled and their mean is calculated. The mean values are plotted in a histogram. The example is supposed to demonstrate the central limit theorem. \n << eval = true , echo = false , results = hide >>= \n pdf ( \"limit.pdf\" )        # open pdf device \nmsam <- NA         # set up empty vector \nns <- 3          # sample size \n for ( i in 1 : 500 ){ \n sam <- runif ( ns ) * 10      # draw sample \n msam [ i ] <- mean ( sam )      # save mean of sample \n h <- hist ( msam , breaks = seq ( 0 , 10 , len = 50 ), # histogram of all means \n   xlim = c ( 0 , 10 ), col = grey ( .9 ), \n   xlab = \"\" , main = \"\" , border = \"white\" , las = 1 ) \n points ( sam , rep ( max ( h$count ), length ( sam )), \n   pch = 16 , col = grey ( .2 ))    # add sampled values \n points ( msam [ i ], max ( h$count ),    # add sample mean value \n   col = \"red\" , pch = 15 ) \n text ( 10 , max ( h$count ), paste ( \"sample no\" , i )) \n hist ( msam [ i ], breaks = seq ( 0 , 10 , len = 50 ),  # ovelay sample mean \n  xlim = c ( 0 , 10 ), col = \"red\" , add = T ,  # in histogram \n  xlab = \"\" , border = \"white\" , las = 1 ) \n } \ndev . off ()          # close pdf device \n 4 \n As a last example we will include a 3D animation created using rgl . Herefore we will create random points and rotate them about the x-axis and then about the y-axis. \n << echo = f , results = hide >>= \n library ( rgl )       # load rgl library \nx <- matrix ( rnorm ( 30 ), ncol = 3 )   # make random points \n plot3d ( x )        # plot points in 3d device \n par3d ( params = list ( \n  windowRect = c ( 100 , 100 , 600 , 600 ))) # enlarge 3d device \n view3d ( theta = 0 , phi = 0 )    # change 3d view angle \nM <- par3d ( \"userMatrix\" )    # get current position matrix \nM1 <- rotate3d ( M , .9 * pi / 2 , 1 , 0 , 0 ) \nM2 <- rotate3d ( M1 , pi / 2 , 0 , 0 , 1 ) \n movie3d ( par3dinterp ( userMatrix = list ( M , M1 , M2 , M1 , M ), \n  method = \"linear\" ), duration = 4 , convert = F , \n  clean = F , dir = \"pics\" )   # save frames in pics folder \n 4 \n The inclusion into LaTex works a bit different this time. This time we do not include the single pages from a PDF as frames but we use singe .png pics that have been geberetaed by movid3d() . The default file name for the frames generated by movie3d is \u201cmovie\u201d plus the frame number. \n \\b egin { center } \n \\a nimategraphics [ controls , loop , width = .7 \\linewidth ]{ 6 } \n { pics / movie }{ 001 }{ 040 } \n\\end { center } \n Here is the whole code for the PDF containing the three animations ready to be Sweaved (make sure to set the directory in the last animation correctly)."], "link": "http://ryouready.wordpress.com/2011/04/18/using-r-sweave-and-latex-to-integrate-animations-into-pdfs/", "bloglinks": {}, "links": {"http://www.gesis.org/": 1, "http://feeds.wordpress.com/": 1, "http://www.uni-goettingen.de/": 1, "http://en.wikipedia.org/": 1, "http://ryouready.wordpress.com/": 4, "http://www.upf.edu/": 1}, "blogtitle": "\"R\" you ready?"}, {"content": ["Yesterday I surfed the web looking for 3D wireframe examples to explain linear models in class. I stumbled across this site where animated 3D wireframe plots are outputted by SAS.\u00a0 Below I did something similar in R. This post shows the few steps of how to create an animated .gif file using R and ImageMagick. Here I assume that you have ImageMagick installed on your computer. As far as I know it is also possible to produce animated .gif files using R only, e.g. with write.gif() from the caTools package. But using ImageMagick is straighforward, gives you control over the conversion and .gif production and is the free standard program for conversion. \n First a simple countdown example. To be sure not to overwrite anything I will create a new folder and set the working directory to the new folder\ufeff. \n dir . create ( \"examples\" ) \n setwd ( \"examples\" ) \n\n # example 1: simple animated countdown from 10 to \"GO!\". \n png ( file = \"example%02d.png\" , width = 200 , height = 200 ) \n for ( i in c ( 10 : 1 , \"G0!\" )){ \n plot . new () \n  text ( .5 , .5 , i , cex = 6 ) \n } \ndev . off () \n\n # convert the .png files to one .gif file using ImageMagick. \n # The system() function executes the command as if it was done \n # in the terminal. the -delay flag sets the time between showing \n # the frames, i.e. the speed of the animation. \n system ( \"convert -delay 80 *.png example_1.gif\" ) \n\n # to not leave the directory with the single jpeg files \n # I remove them. \nfile . remove ( list . files ( pattern = \".png\" )) \n  \n Above a loop is used to do the plotting. A new .png file for each plot is created automatically. The \"%02d\" part in the\u00a0 filenamepart is a placeholder here for a two character counter (01,02 etc.). So we do not have to hard-code the filename each time. \n Now I want a linear model to be visualized as a 3d mesh.\u00a0 A 3D surface can easily be plotted using the wireframe() function from the lattice package (or other functions available in R; also see the rgl package for rotatable 3D output). \n library ( lattice ) \nb0 <- 10 \nb1 <- .5 \nb2 <- .3 \ng <- expand . grid ( x = 1 : 20 , y = 1 : 20 ) \ng$z <- b0 + b1 * g$x + b2 * g$y\n wireframe ( z ~ x * y , data = g ) \n\n # to rotate the plot \n wireframe ( z ~ x * y , data = g , \n   screen = list ( z = 10 , x = - 60 )) \n Now let\u2019s create multiple files while changing the rotation angle. Note that wireframe() returns a trellis object which needs to be printed explicitly here using print() . As the code below produces over 150 images and merges them into one .gif file note that this may take a minute or two. \n # example 2 \n png ( file = \"example%03d.png\" , width = 300 , heigh = 300 ) \n for ( i in seq ( 0 , 350 , 10 )){ \n  print ( wireframe ( z ~ x * y , data = g , \n    screen = list ( z = i , x = - 60 ))) \n } \ndev . off () \n # convert pngs to one gif using ImageMagick \n system ( \"convert -delay 40 *.png example_2_reduced.gif\" ) \n\n # cleaning up \nfile . remove ( list . files ( pattern = \".png\" )) \n \n  \n Now I want the same as above but for a model with an interaction and I want to make the plot a bit more pretty. This time I use .pdf as output file. This is just to demonstrate that other formats than .png can be used. Note that the \"%02d\" part of the filename has disappeared as I only create one .pdf file with multiple pages, not multiple .pdf files. \n # example 3 \nb0 <- 10 \nb1 <- .5 \nb2 <- .3 \nint12 <- .2 \ng <- expand . grid ( x = 1 : 20 , y = 1 : 20 ) \ng$z <- b0 + b1 * g$x + b2 * g$y + int12 * g$x * g$y\n\n pdf ( file = \"example_3.pdf\" , width = 4 , height = 4 ) \n for ( i in seq ( 0 , 350 , 10 )){ \n  print ( wireframe ( z ~ x * y , data = g , \n    screen = list ( z = i , x = - 60 ), \n    drape = TRUE )) \n } \ndev . off () \n # convert pdf to gif using ImageMagick \n system ( \"convert -delay 40 *.pdf example_3_reduced.gif\" ) \n # cleaning up \nfile . remove ( list . files ( pattern = \".pdf\" )) \n  \n The last example is a visual comparison of the interaction and a non-interaction model. Here we now have the models on the same scale. Before I did not specify the scale limits. \n # example 4 \nb0 <- 10 \nb1 <- .5 \nb2 <- .3 \nint12 <- .2 \ng <- expand . grid ( x = 1 : 20 , y = 1 : 20 ) \nz <- c ( b0 + b1 * g$x + b2 * g$y , \n  b0 + b1 * g$x + b2 * g$y + int12 * g$x * g$y ) \ng <- rbind ( g , g ) \ng$z <- z\ng$group <- gl ( 2 , nrow ( g )/ 2 , labels = c ( \"interaction\" , \"no interaction\" )) \n\n png ( file = \"example%03d.png\" , width = 300 , height = 300 ) \n for ( i in seq ( 0 , 350 , 10 )){ \n  print ( wireframe ( z ~ x * y , data = g , groups = group , \n    screen = list ( z = i , x = - 60 ))) \n } \ndev . off () \n # convert pngs to one gif using ImageMagick \n system ( \"convert -delay 40 *.png example_4.gif\" ) \n\n # cleaning up \nfile . remove ( list . files ( pattern = \".png\" )) \n  \n Above I chose a small image size (300 x 300 pts). Smaller steps for rotation and a bigger picture size increases file sizes for examples 2, 3 and 4 to 3-5mb which is far too big for a web format. I am not familiar with image optimization and I suppose a smaller file sizes for the .gif file can easily be achieved by some optimization flags in ImageMagick. Any hints are welcome!"], "link": "http://ryouready.wordpress.com/2010/11/21/animate-gif-images-in-r-imagemagick/", "bloglinks": {}, "links": {"http://feeds.wordpress.com/": 1, "http://www.imagemagick.org/": 1, "http://www.ucla.edu/": 1, "http://ryouready.wordpress.com/": 6, "http://cran.r-project.org/": 1}, "blogtitle": "\"R\" you ready?"}, {"content": ["Abilities of R for creating graphics is great, but one thing I always missed is the possibility of creating interactive plots and being able to look at graphs while changing one ore more parameters. I know that there is rggobi , but so far I always ran into problems with flexibility each time I wanted to use it. So I kept on searching until I found playwith which is \u201can R package, providing a GTK+ graphical user interface for editing and interacting with R plots\u201d as its homepage says. The homepage includes a lot of screenshots with code snippets so this post doesn\u2019t intend to give an extensive review about the possibilities of the playwith package to the reader. All I want to do now is present a small application of it. \n I had some geospatial data I wanted to visualize. The data was a result of a computer simulation and consisted of a set of geographical coordinates and corresponding frequency values expressed in Hz. The values associated to the coordinates \u00a0 tells us the first eigenfrequency of the Earth-ionosphere cavity that would be measured at Nagycenk Observatory in the case of an assumed lightning source at with certain properties. \n At first, as always, we need to load some packages. \n \nlibrary(R.basic) # for creating perspective plot \nlibrary(playwith) # for creating interactive plot \nlibrary(fields) # for plotting a map of the world \n Then, we read in our data (which is available online, so the example must be reproducible): \n \nregs <- list(Africa=\"Africa\",Americas=\"Americas\",Asia=\"Asia\") \ncols <- c(Africa=\"red\",Americas=\"green\",Asia=\"blue\") \nurl <- \"http://storage.ggki.hu/~nattomi/ryouready/20100303\" \nx <- lapply(regs, function(x) {read.table(file.path(url,x),header=TRUE)}) \n Before plotting, I determine the range of the plottted values. \n \ndata(world.dat) # data used for plotting a world map \nzAxs <- unlist(lapply(x,function(x) x$fnERT1)) \nr <- range(zAxs) \n \n And finally, the interactive plot itself: \n \nplaywith({plot3d(world.dat$x,world.dat$y,lowZ,pch=\".\", \nzlim=c(lowZ,upZ),xlab=\"longitude\", \n ylab=\"latitude\",zlab=\"F1 (Hz)\", \ntheta=theta,phi=phi,ticktype=\"detailed\") \nfor (i in regs) { \nd <- x[[i]] \npoints3d(d$Dc,d$Hc,d$fnERT1,col=cols[[i]],pch=\".\") \n}}, \nparameters=list( \ntheta=seq(0,360,by=5), \nphi=seq(0,90,by=5), \nlowZ=seq(r[1],r[2],0.5), \nupZ=seq(r[2],r[1],-0.5))) \n You should see a window popping up with 4 sliders allowing you to set different paramters of the plot, for example vertical and horizontal rotation. You can already see from the example that the syntax of the playwith command is very simple, you specify a set of commands necessary for creating the plot (with possible parameters included such as theta in this example) between curly braces then a list specifying values to be looped through for the parameters. What more could I say? If you are a visual type (or your boss is one) then play with playwith ! \n Remark 1 : Installing the package R.basic goes in a little bit unusual way, see http://www.braju.com/R/ for details. \n Remark 2 : My world map is just a plot of a cloud of points on the plane. It would be nice if the points would be connected accordingly. This can be achieved by using the world() command in the fields package although I wasn\u2019t able to integrate this into the 3d display. Any suggestions are very welcome. The world.dat dataset has an another drawback: it doesn\u2019t include Corsica and Sardinia so this world map is not of too much use for the locals."], "link": "http://ryouready.wordpress.com/2010/03/23/playing-with-the-playwith-package/", "bloglinks": {}, "links": {"http://feeds.wordpress.com/": 1, "http://w.ggki.hu/": 1, "http://www.ggobi.org/": 1, "http://code.google.com/": 2, "http://ryouready.wordpress.com/": 2, "http://www.openstreetmap.org/": 1, "http://www.braju.com/": 1, "http://en.wikipedia.org/": 1}, "blogtitle": "\"R\" you ready?"}, {"content": ["At the institute I\u2019m working quite a lot of people prefer using Matlab and only a few of them know about R. Today one of my colleagues \u2014 who is also an eager user of Matlab \u2014 ran into the following problem: \n \n He had a vector in hand which consisted of elements. \n He wanted to reshape this data into an n\u00d7n matrix , where the element is equal to with and if the condition is satisfied and otherwise. In other words, the first th element of the th row of is equal to the vector and the remaining elements are zero. \n \n He struggled for long minutes of how he should design a loop for doing this task. Of course writing such a loop is not a highly difficult task, but why would we waste our time, if we can get the same result in a single line of R code? \n For the sake of illustration, I\u2019ve generated an input vector for the case of (the value of was 99 in my colleague\u2019s problem as well): \n v <- rep(99:1,times=99:1) \n and used the one-liner \n M <- t(matrix(unlist(tapply(v,rep(1:99,times=99:1),function(x) c(x,rep(0,99-length(x))))),nrow=99)) \n This is the kind of compactness I like pretty much in R. At the end I would like to emphasize that this post is not against Matlab, it just points out how the different logic of the R language can simplify problem solving in many situations. As a bonus let me share the visualization of the resulted matrix using the color2D.matplot function of the plotrix package: \n \nlibrary(plotrix) \ncolor2D.matplot(M,c(0,1),c(1,0),c(0,0))"], "link": "http://ryouready.wordpress.com/2010/02/15/r-vs-matlab/", "bloglinks": {}, "links": {"http://feeds.wordpress.com/": 1, "http://ryouready.wordpress.com/": 1, "http://www.ggki.hu/": 1, "http://cran.r-project.org/": 1}, "blogtitle": "\"R\" you ready?"}, {"content": ["In a previous post I gave some examples of how to make a progress bar in R. In the examples the bars were created within loops. Very often though I have situations where I would like have a progress bar when using apply() . The plyr package provides several apply -like functions also including progress bars, so one could have a look here and use a plyr function instead of apply if possible. Anyway, here comes a wrapper for apply , lapply and sapply that has a progressbar. It seems to work although one known issue is the use of vectors (like c(1,2) with the MARGIN argument in apply_pb() . Also you can see in the performance comparison below that the wrapper causes overhead to a considerable extent, which is the main drawback of this approach. \n ###############################################################\n\n# STATUS: WORKING, but only tested once or twice,\n# tested with most ?apply examples\n# ISSUES/TODO: MARGIN argument cannot take a\n# vector like 1:2 that is more than one numeric \n\n apply_pb <- function(X, MARGIN, FUN, ...)\n{\n env <- environment()\n pb_Total <- sum(dim(X)[MARGIN])\n counter <- 0\n pb <- txtProgressBar(min = 0, max = pb_Total,\n      style = 3) \n\n wrapper <- function(...)\n {\n curVal <- get(\"counter\", envir = env)\n assign(\"counter\", curVal +1 ,envir= env)\n setTxtProgressBar(get(\"pb\", envir= env),\n       curVal +1)\n FUN(...)\n }\n res <- apply(X, MARGIN, wrapper, ...)\n close(pb)\n res\n} \n\n ## NOT RUN:\n# apply_pb(anscombe, 2, sd, na.rm=TRUE)\n\n## large dataset\n# df <- data.frame(rnorm(30000), rnorm(30000))\n# apply_pb(df, 1, sd)\n\n############################################################### \n\n lapply_pb <- function(X, FUN, ...)\n{\n env <- environment()\n pb_Total <- length(X)\n counter <- 0\n pb <- txtProgressBar(min = 0, max = pb_Total, style = 3) \u00a0 \n\n # wrapper around FUN\n wrapper <- function(...){\n curVal <- get(\"counter\", envir = env)\n assign(\"counter\", curVal +1 ,envir=env)\n setTxtProgressBar(get(\"pb\", envir=env), curVal +1)\n FUN(...)\n }\n res <- lapply(X, wrapper, ...)\n close(pb)\n res\n} \n\n ## NOT RUN:\n# l <- sapply(1:20000, function(x) list(rnorm(1000)))\n# lapply_pb(l, mean) \n\n ############################################################### \n\n sapply_pb <- function(X, FUN, ...)\n{\n env <- environment()\n pb_Total <- length(X)\n counter <- 0\n pb <- txtProgressBar(min = 0, max = pb_Total, style = 3)\n\n wrapper <- function(...){\n curVal <- get(\"counter\", envir = env)\n assign(\"counter\", curVal +1 ,envir=env)\n setTxtProgressBar(get(\"pb\", envir=env), curVal +1)\n FUN(...)\n }\n res <- sapply(X, wrapper, ...)\n close(pb)\n res\n} \n\n## NOT RUN: \n # l <- sapply(1:20000, function(x) list(rnorm(1000))\n# sapply_pb(l, mean) \n\n############################################################### \n Nice up to now, but now let\u2019s see what the difference in performance due to the wrapper overhead looks like. \n ############################################################### \n\n> l <- sapply(1:20000, function(x) list(rnorm(1000)))\n> system.time(sapply(l, mean))\nUser\u00a0\u00a0\u00a0\u00a0\u00a0 System verstrichen\n0.474\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0.003\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0.475\n> system.time(sapply_pb(l, mean))\n|======================================================| 100%\nUser\u00a0\u00a0\u00a0\u00a0\u00a0 System verstrichen\n1.863\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0.025\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1.885\n\n> df <- data.frame(rnorm(90000), rnorm(90000))\n> system.time(apply(df, 1, sd))\nUser\u00a0\u00a0\u00a0\u00a0\u00a0 System verstrichen\n7.152\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0.062\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 7.260\n> system.time(apply_pb(df, 1, sd))\n|======================================================| 100%\nUser\u00a0\u00a0\u00a0\u00a0\u00a0 System  verstrichen\n13.112\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0.099\u00a0\u00a0\u00a0\u00a0\u00a0 13.192\n\n ############################################################### \n So, what we see is that performance radically goes down. This is extremely problematic in our context as one will tend to use progress bars in situations where processing times are already quite long. So if someone has an improvement for that I would be glad to hear about it. \n Latest version with more comments on github ."], "link": "http://ryouready.wordpress.com/2010/01/11/progress-bars-in-r-part-ii-a-wrapper-for-apply-functions/", "bloglinks": {}, "links": {"http://github.com/": 1, "http://feeds.wordpress.com/": 1, "http://ryouready.wordpress.com/": 2}, "blogtitle": "\"R\" you ready?"}, {"content": ["Lately, David Smith from REvolution Computing set out to challenge the R community with the reprocuction of a beautiful choropleth map (= multiple regions map/thematic map) on US unemployment rates he had seen on the Flowing Data blog . Here you can find the impressing results. Being a fan of beautiful visualizations I tried to produce a similar map for Germany. \n 1. Getting the spatial country data \n The first step resulted in getting data to draw a map of the German administrative districts. Unfortunately, the maps for Germany do not come along in the map package, which would mean I could easily adopt the code results from the challenge. Getting data: The GADM database of Global Administrative Areas has the aim to provide data of administrative districts for the whole world on different levels (country, state and county level). The data can be downloaded as as a shapefile, an ESRI geodatabase file, a Google Earth .kmz file and very convenient for R users, as an Rdata file.  \n \n 2. Getting socio-demographic data (e. g. unemployment rates by administrative district): A lot of data is available online at www.statistikportal.de . On this site you find links to several data bases. To get the unemployment stats by county I clicked my way through: Regionaldatenbank Deutschland -> Arbeitsmarkt -> Arbeitsmarktstatistik der Bundesagentur f\u00fcr Arbeit -> Arbeitslose nach ausgew\u00e4hlten Personengruppen sowie Arbeitslosenquoten \u2013 Jahresdurchschnitt \u2013 (ab 2008) regionale Tiefe: Kreise und krfr. St\u00e4dte -> Werteabruf -> save as CSV format . This table contains all the information I need, although for some reson, for a few districts there is no data listed. I also looked for another source. On Regionalatlas a nice online visualization tool is offered. In the menu I selected unemployment rate 2008 as indicator. Besides the nice visualization you get, there is a menu button \u201ctables\u201d where you can retrieve a html table of the data. I simply copied and pasted it into a .txt file which gives me a tab seperated value format I can read in R. But still: some districts are not listed. Here is a pdf file containing the data. \n 3. Preparing the data \n Now I have two datafiles: One (gadm) containaing the spatial information, the other one (unempl) containing the unemployment rates. It turns out that the same districts are not always named alike. Sometimes the name comes along with a supplement or in other cases the deviations are more severe so that simple parsing will not do it. \n  \n I decided to take the quick-and-dirty route and do a fuzzy matching, which surely is prone to errors, very slow and not at all elegant\u2026 Well, never underestimate the rawness of raw data. \n 4. Plotting the data \n On Claudia Engel\u2019s Anthrospace blog I found an R script already perfect to make use of the data provided. The Rdata files turn out to contain SpatialPolygonsDataFrame so we can print the data without any further preparation using the sp package. \n ############################################################### \n library(sp)\nlibrary(RColorBrewer) \n\n # get spatial data for Germany on county level \ncon <- url(\"http://gadm.org/data/rda/DEU_adm3.RData\")\nprint(load(con))\nclose(con)\n # plot Germany with random colors \ncol = rainbow(length(levels(gadm$NAME_3)))\nspplot(gadm, \"NAME_3\", col.regions=col, main=\"German Regions\",\n  colorkey = FALSE, lwd=.4, col=\"white\") \n ############################################################### \n \n  \n This looks nice. To produce a color vector to visualize the unemployment rate the two data sets have to be merged. \n ###############################################################\n ### DATA PREP ### \n # loading the unemployment data \nunempl <- read.delim2(file=\"./data/data_germany_unemployment_by_\n      county.txt\", header = TRUE, sep = \"\\t\",\n      dec=\",\", stringsAsFactors=F) \n\n# due to Mac OS encoding, otherwise not needed \ngadm_names <- iconv(gadm$NAME_3, \"ISO_8859-2\", \"UTF-8\")\u00a0 \u00a0 \n\n # fuzzy matching of data: quick & dirty\n # caution: this step takes some time ~ 2 min. \n\n # parsing out \"St\u00e4dte\" \ngadm_names_n <- gsub(\"St\u00e4dte\", \"\", gadm_names) \u00a0 \n\ntotal <- length(gadm_names) \n# create progress bar \npb <- txtProgressBar(min = 0, max = total, style = 3) \n order <- vector() \nfor (i in 1:total){  \n order[i] <- agrep(g adm_names_n[i], unempl$Landkreis, \n      max.distance = 0.2)[1] \n\u00a0 setTxtProgressBar(pb, i) \u00a0  \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 # update progress bar \n} \n\n \n # choose color by unemployment rate \n col_no <- as.factor(as.numeric(cut(unempl$Wert[order], \n      c(0,2.5,5,7.5,10,15,100))))\nlevels(col_no) <- c(\">2,5%\", \"2,5-5%\", \"5-7,5%\",\n     \"7,5-10%\", \"10-15%\", \">15%\")\ngadm$col_no <- col_no\nmyPalette<-brewer.pal(6,\"Purples\") \n\n # plotting \n spplot(gadm, \"col_no\", col=grey(.9), col.regions=myPalette,\nmain=\"Unemployment in Germany by district\") \n\n############################################################### \n  \n It seems that the districts for which no data was available mainly belong to the states Sachsen-Anhalt and Sachsen. Also you can see that east of Germany has got a much higher unemplyoment rate than the west. The same holds true for a north-south comparison. \n Besides ths sp package there are many other ways to produce such a graphic. I will now take another approch using shapefile data which also is available on GDAM. The data is availabe as a .zip file which includes several dBase files for all levels (3=district, 1=state etc.). \n \n ############################################################### \n\n library(sp)\nlibrary(maptools) \n\n nc1 <- readShapePoly(\"./data/DEU_adm/DEU_adm1.dbf\", \n      proj4string=CRS(\"+proj=longlat +datum=NAD27\")) \nnc3 <- readShapePoly(\"./data/DEU_adm/DEU_adm3.dbf\",\n     proj4string=CRS(\"+proj=longlat +datum=NAD27\")) \n\n # col_no comes from the calculations above \npar(mar=c(0,0,0,0)) \n plot(nc3, col=myPalette[col_no], border=grey(.9), lwd=.5)\nplot(nc1, col=NA, border=grey(.5), lwd=1, add=TRUE) \n\n ############################################################### \n  \n What I like about all this, it that it is pretty simple to draw almost any country you like. Besides the very messy part of data preparation it is only a few lines of code and the results are nice."], "link": "http://ryouready.wordpress.com/2009/11/16/infomaps-using-r-visualizing-german-unemployment-rates-by-color-on-a-map/", "bloglinks": {}, "links": {"http://www.statistikportal.de/": 1, "http://flowingdata.com/": 1, "http://www.revolution-computing.com/": 1, "http://gadm.org/": 1, "http://www.stanford.edu/": 1, "http://ims.destatis.de/": 1, "http://ryouready.wordpress.com/": 6, "http://feeds.wordpress.com/": 1, "http://blog.revolution-computing.com/": 2}, "blogtitle": "\"R\" you ready?"}, {"content": ["Most people using LaTex feel that creating tables is no fun. Some days ago I stumbled across a neat function written by Paul Johnson that produces LaTex code as well as LaTex code that can be used within Lyx . The output can be used for regression models and looks like output from the Stata outreg command. His R function that produces the LaTex code has the same name:\u00a0 outreg() . The outreg code can be found on his website or in the PDF copy of the code from his website. \n I took the code, put it into a .rnw file and sweaved it. It worked like a charm and produced beautiful results (see the picture on the left and the PDF ). Below you can find the code for the noweb file (.rnw). Latex code is colored grey, R-code is colored blue. Just have a look at all the results as a PDF file. Besides, Paul Johnson has also created a nice list of R-Tips that can be found on his website as well. \n \n  \n ############################################################### \n\n \\documentclass[a4paper,10pt]{article}\n\n\\title{Regression Tables for LaTex}\n\\auth or{ Mark Heckmann. Code by Paul Johnson }\n\\date{\\today} \n\n\\begin{document}\n\\maketitle\n\n<<echo=FALSE>>=\n x1 <- rnorm(100)\nx2 <- rnorm(100)\ny1 <- 5*rnorm(100)+3*x1 + 4*x2\ny2 <- rnorm(100)+5*x2\nm1 <- lm (y1~x1)\nm2 <- lm (y1~x2)\nm3 <- lm (y1 ~ x1 + x2)\ngm1 <- glm(y1~x1) \n@\n\n<<echo=FALSE, results=tex>>=\n outreg(m1,title=\"My One Tightly Printed Regression\", lyx=F )\n outreg(m1,tight=F,modelLabels=c(\"Fingers\"),\n  title=\"My Only Spread Out Regressions\" ,lyx=F)\n outreg(list(m1,m2),modelLabels=c(\"Mine\",\"Yours\"),\n  varLabels=list(x1=\"Billie\"),\n  title=\"My Two Linear Regressions Tightly Printed\" ,lyx=F)\n outreg(list(m1,m2),modelLabels=c(\"Whatever\",\"Whichever\"),\n  title=\"My Two Linear Regressions Not Tightly\u00a0 Printed\",\n  showAIC=F, lyx=F)\n outreg(list(m1,m2,m3),title=\"My Three Linear Regressions\", lyx=F)\n outreg(list(m1,m2,m3),tight=F,\n  modelLabels=c(\"I Love love love really long titles\",\n  \"Hate Long\",\"Medium\"), lyx=F)\n outreg(list(gm1),modelLabels=c(\"GLM\"), lyx=F)\n outreg(list(m1,gm1),modelLabels=c(\"OLS\",\"GLM\"), lyx=F) \n@\n\n\\end{document} \n \n###############################################################"], "link": "http://ryouready.wordpress.com/2009/06/19/r-function-to-create-tables-in-latex-or-lyx-to-display-regression-models-results/", "bloglinks": {}, "links": {"http://feeds.wordpress.com/": 1, "http://pj.freefaculty.org/": 3, "http://ryouready.wordpress.com/": 4}, "blogtitle": "\"R\" you ready?"}]