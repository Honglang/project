[{"blogurl": "http://onertipaday.blogspot.com\n", "blogroll": [], "title": "One R Tip A Day"}, {"content": ["The 'Summer edition' of the R Journal is out! Get it from here ."], "link": "http://onertipaday.blogspot.com/feeds/6434014496038289409/comments/default", "bloglinks": {}, "links": {"http://journal.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["The new R 2.15.0 is out! You know the drill ! Get the source code from here ."], "link": "http://onertipaday.blogspot.com/feeds/816806667767052605/comments/default", "bloglinks": {}, "links": {"http://onertipaday.blogspot.it/": 1, "http://cran.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["The R Journal Volume 3/2 is available! \nGet it from here ."], "link": "http://onertipaday.blogspot.com/feeds/3386746736540592565/comments/default", "bloglinks": {}, "links": {"http://journal.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["What makes this book different from other books about R is stated clearly by the author Norman Matloff in the introduction: \n \n \"This book is not a compendium of the myriad types of statistical methods that are available in the wonderful R package. It really is about programming and cover programming-related topics missing from most other books on R\". \nMost books about R present a gentle introduction to the language and then jump to practical applications. Norman Matloff, across the 350 pages of this book, accompanies the reader in developing the necessary skills useful to write software in a proper way focusing on the characteristics and idiosyncrasies of the R language. \n \nIn each of the first six chapters of the book the author covers a different R data type: vector, matrix, list, data.frame and factor. Starting from basic examples and progressing to more complex ones each data type is properly introduced and used in the proper context. Furthermore, some extended examples are ameliorated or re-implemented along new type are introduced in order to show the expressivity of the language. The explanation of small details such as the use of the drop=FALSE argument in matrix/data.frame subsetting or the stringsAsFactor=FALSE argument when building up a data.frame are the proverbial icing on the cake which can make your day-by-day workflow more productive. \nChapter 7, 8 and 9 are the heart of the Art of R Programming introducing the structures, idioms, peculiarities and idiosyncrasies of R as programming language. \nChapter 7 presents how the typical programming structures are implemented in R and how to use them correctly: control statements, functions, recursion etc. are explained by clear and appropriate examples of increased complexity and usefulness. \nChapter 8 about doing math and simulation in R is a more 'traditional' chapter depicting the mathematical/statistical facilities embedded in R. Since the main selling-point of R is its statistical capabilities an introduction to their characteristics and use makes perfectly sense. \nChapter 9 covers S3 and S4 the two most commonly used paradigms of object-oriented programming (OOR) implemented in R. If you are going to start designing and developing R software in a proper and reusable form this chapter will provide all the necessary information and a good collection of examples tailored to R mathematical/statistical peculiarities. \nChapter 10 is about I/O and provides all the necessary directions needed to parse data in R locally and from the internet. \nChapter 11 is about string manipulation and it is less technical than former chapters, presenting a sort of cheat-sheet collection of the most common functions to handle string in R. The author covers the string capabilities embedded in base R but advices to take a look at Hadley Wickham's stringr package for a more consistent handling of strings in R. \nChapter 12 introduces graphics in R providing a gentle overview of the huge R graphics capabilities but it doesn't present an in-depth discussion. Fortunately there are a lot of other books (for example Paul Murrel's R Graphics ) dedicated to this subject which is indeed one of the R's strong points. \nChapter 13 about debugging is short but points out almost everything is important to know about debugging R code; furthermore it provides a wide vision about debugging in general: the author Norman Matloff is also the co-author of The Art of Debugging with GDB and DDD and clearly he knows the matter of which he speaks. \nChapter 14 covers strategies to handle the time/space trade-off in order to enhance the performance of R programs. In particular it explains the proper use of vectorization in order to speed up your code. \nChapter 15 and 16 are a sort of follow-up to chapter 14, meaning that they explain how to enhance the performance of your code by integrating R with other language, such as Python and C/C++ (Chapter 15) and by parallelizing your code. Both chapters provide an introductory glance on these topics but present sufficient coverage in order to be useful. \nConclusions: \nIs it worth to buy this book? The short answer is YES. If you are serious in learning R in order to both analyze in the most appropriate and effective way your data (e.g. using the appropriate data type according your specific task) and to develop software, The Art of R programming will be beneficial to you. \nCaveats: since the peculiar approach and aim of this book my advice is to buy this book together with a more statistical oriented, for example Rob Kabacoff's R in Action and one or two about graphics in R (e.g. Hrishi Mittal's R Graph Cookbook or Hadley Wickham's ggplot2 book ). \n \nDisclaimer: No Starch Press provided me a free copy for review."], "link": "http://onertipaday.blogspot.com/feeds/4747761213591587449/comments/default", "bloglinks": {}, "links": {"http://shop.oreilly.com/": 1, "http://www.amazon.com/": 3, "http://nostarch.com/": 2, "http://www.manning.com/": 1, "http://cran.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["Inspired by this tutorial, I thought that it would be nice to have the possibility to have access to weather forecast directly from the R command line, for example for a personalized start-up message such as the one below: \n \nWeather summary for Trieste, Friuli-Venezia Giulia: \nThe weather in Trieste is clear. The temperature is currently 14\u00b0C (57\u00b0F). Humidity: 63%. \nFortunately, thanks to the always useful Duncan Temple Lang's XML package (see here for a tutorial about XML programming under R), it is straightforward to write few lines of R code to invoke the google weather api for the location of interest, retrieve the XML file, parse it using the XPath paradigm and get the required informations: \n \n address=\"Trieste\"\nurl = paste( \"http://www.google.com/ig/api?weather=\", URLencode(address), sep=\"\" )\nxml = xmlTreeParse(url, useInternalNodes=TRUE) # take a look at the xml output:\n# Get the required informations:\ncondition=xpathSApply(xml,\"//xml_api_reply/weather/current_conditions/condition\",xmlGetAttr,\"data\")\ntemp_c=xpathSApply(xml,\"//xml_api_reply/weather/current_conditions/temp_c\",xmlGetAttr,\"data\")\nhumidity=xpathSApply(xml,\"//xml_api_reply/weather/current_conditions/humidity\",xmlGetAttr,\"data\")\ncat( paste(\"The Weather in \", address, \" is \", condition, \". The temperature is \", temp_c, \"\u00b0C. Humidity is \", humidity, \"%.\") )\n \n \nTimes ago I came to the conclusion that the best way to organize my R code is to create packages even for basic tasks. I know that It seems too much effort for this trivial task (and it was in the past) but fortunately, thanks to the Hadley Wickham's devtools package development It has become a piece of cake process (sort of)! \n \nBelow I present the minimal workflow I used to create this simple package. For a proper introduction to package development using devtools take a look at this link . \n \nFirst create the skeleton for the project using the package.skeleton() function: \n package.skeleton(\"pkg\") \nRead './pkg/Read-and-delete-me' file, compile the DESCRIPTION fiels according to your needs and delete './pkg/Read-and-delete-me'. \nNow the devtools magic: \n library(\"devtools\")\npkg <- as.package(\"pkg\") # pkg is the directory containing the structure created using package.skeleton() \nCreate your functions and documentation following the roxygen literate programming paradigm: basically you write your functions together with its documentation using in the preamble tags such as @param, @example , etc. to indicate the different constituents of the functions and devtools automagically will create the functions' documentation (.Rd files). \nThen you test your code, try your examples, verify that your package passes the check without errors and warnings, build it and, if you like, you can ftp it directly to CRAN (disclaimer: I didn't check this feature)! \n load_all(pkg, reset=T) # to reload the package without having to restart R\ndocument(pkg) # to be used together with roxygen2 to creating the corresponding Rd files\nrun_examples(pkg) # to check the examples for the different functions\ndevtools:::check(pkg) # to verified if your package raises errors or warnings\ndevtools:::build(pkg)\ninstall(pkg) # install your package\n# release()\n \n \nFinal consideration: the devtools package improved significantly my day-by-day workflow and I want to thank Hadley Wickham for this and all the other valuable packages he gifted the R community! \nP.S. If you like to install the RWeather package I created using devtools, you can do it by typing: \n install.packages(\"RWeather\", repos=\"http://R-Forge.R-project.org\") \nor download the source code from here . \nP.S.2 I'd like to thank Kay Cichini for this post which explains how to set-up the syntax-highlighting for the R code on Blogger. \n \nUpdate: Thanks to the useful info I got from this Python module, now RWeather can show weather information from Yahoo! Weather , Google Weather and NOAA APIs . \nFrom now the stable version of the package can be installed directly from CRAN: \n install.packages(\"RWeather\")"], "link": "https://r-forge.r-project.org/src/contrib/RWeather_0.1.tar.gz", "bloglinks": {}, "links": {"https://github.com/": 1, "http://thebiobucket.blogspot.com/": 1, "http://developer.yahoo.com/": 1, "http://had.co.nz/": 1, "http://www.omegahat.org/": 1, "http://graphical.weather.gov/": 1, "https://r-forge.r-project.org/": 1, "http://code.google.com/": 1, "http://roxygen.org/": 1, "http://www.w3schools.com/": 1, "http://papermashup.com/": 1, "http://cran.r-project.org/": 2}, "blogtitle": "One R Tip A Day"}, {"content": ["The new R 2.14.0 is out! Get the source code from here . \n \nTake a look at these posts for some miscellaneous advices to make the upgrade easier. \n \nAlso this thread on stackoverflow and this post contributed by Tal Galili can be of some value to make the procedure less painful. \n \nFeel free to contribute with suggestions about how to upgrade your R installation."], "link": "http://onertipaday.blogspot.com/feeds/2894431254305368608/comments/default", "bloglinks": {}, "links": {"http://www.r-statistics.com/": 2, "http://stackoverflow.com/": 1, "http://onertipaday.blogspot.com/": 1, "http://cran.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["A word cloud (or tag cloud ) can be an handy tool when you need to highlight the most commonly cited words in a text using a quick visualization. Of course, you can use one of the several on-line services, such as wordle or tagxedo , very feature rich and with a nice GUI. Being an R enthusiast, I always wanted to produce this kind of images within R and now, thanks to the recently released Ian Fellows' wordcloud package, finally I can! \nIn order to test the package I retrieved the titles of the XKCD web comics included in my RXKCD package and produced a word cloud based on the titles' word frequencies calculated using the powerful tm package for text mining (I know, it is like killing a fly with a bazooka!). \n \n library(RXKCD)\nlibrary(tm)\nlibrary(wordcloud)\nlibrary(RColorBrewer)\npath <- system.file(\"xkcd\", package = \"RXKCD\")\ndatafiles <- list.files(path)\nxkcd.df <- read.csv(file.path(path, datafiles))\nxkcd.corpus <- Corpus(DataframeSource(data.frame(xkcd.df[, 3])))\nxkcd.corpus <- tm_map(xkcd.corpus, removePunctuation)\nxkcd.corpus <- tm_map(xkcd.corpus, tolower)\nxkcd.corpus <- tm_map(xkcd.corpus, function(x) removeWords(x, stopwords(\"english\")))\ntdm <- TermDocumentMatrix(xkcd.corpus)\nm <- as.matrix(tdm)\nv <- sort(rowSums(m),decreasing=TRUE)\nd <- data.frame(word = names(v),freq=v)\npal <- brewer.pal(9, \"BuGn\")\npal <- pal[-(1:2)]\npng(\"wordcloud.png\", width=1280,height=800)\nwordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal, vfont=c(\"sans serif\",\"plain\"))\ndev.off() \n \n \n \nAs a second example, inspired by this post from the eKonometrics blog, I created a word cloud from the description of 3177 available R packages listed at http://cran.r-project.org/web/packages . \n require(XML)\nrequire(tm)\nrequire(wordcloud)\nrequire(RColorBrewer)\nu = \"http://cran.r-project.org/web/packages/available_packages_by_date.html\"\nt = readHTMLTable(u)[[1]]\nap.corpus <- Corpus(DataframeSource(data.frame(as.character(t[,3]))))\nap.corpus <- tm_map(ap.corpus, removePunctuation)\nap.corpus <- tm_map(ap.corpus, tolower)\nap.corpus <- tm_map(ap.corpus, function(x) removeWords(x, stopwords(\"english\")))\nap.tdm <- TermDocumentMatrix(ap.corpus)\nap.m <- as.matrix(ap.tdm)\nap.v <- sort(rowSums(ap.m),decreasing=TRUE)\nap.d <- data.frame(word = names(ap.v),freq=ap.v)\ntable(ap.d$freq)\npal2 <- brewer.pal(8,\"Dark2\")\npng(\"wordcloud_packages.png\", width=1280,height=800)\nwordcloud(ap.d$word,ap.d$freq, scale=c(8,.2),min.freq=3,\nmax.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)\ndev.off() \n \n  \n \nAs a third example, thanks to Jim's comment, I take advantage of Duncan Temple Lang 's RNYTimes package to access user-generate content on the NY Times and produce a wordcloud of 'today' comments on articles. \nCaveat: in order to use the RNYTimes package you need a API key from The New York Times which you can get by registering to the The New York Times Developer Network (free of charge) from here . \n require(XML)\nrequire(tm)\nrequire(wordcloud)\nrequire(RColorBrewer)\ninstall.packages(packageName, repos = \"http://www.omegahat.org/R\", type = \"source\")\nrequire(RNYTimes)\nmy.key <- \"your API key here\"\nwhat= paste(\"by-date\", format(Sys.time(), \"%Y-%m-%d\"),sep=\"/\")\n# what=\"recent\"\nrecent.news <- community(what=what, key=my.key)\npagetree <- htmlTreeParse(recent.news, error=function(...){}, useInternalNodes = TRUE)\nx <- xpathSApply(pagetree, \"//*/body\", xmlValue)\n# do some clean up with regular expressions\nx <- unlist(strsplit(x, \"\\n\"))\nx <- gsub(\"\\t\",\"\",x)\nx <- sub(\"^[[:space:]]*(.*?)[[:space:]]*$\", \"\\\\1\", x, perl=TRUE)\nx <- x[!(x %in% c(\"\", \"|\"))]\nap.corpus <- Corpus(DataframeSource(data.frame(as.character(x))))\nap.corpus <- tm_map(ap.corpus, removePunctuation)\nap.corpus <- tm_map(ap.corpus, tolower)\nap.corpus <- tm_map(ap.corpus, function(x) removeWords(x, stopwords(\"english\")))\nap.tdm <- TermDocumentMatrix(ap.corpus)\nap.m <- as.matrix(ap.tdm)\nap.v <- sort(rowSums(ap.m),decreasing=TRUE)\nap.d <- data.frame(word = names(ap.v),freq=ap.v)\ntable(ap.d$freq)\npal2 <- brewer.pal(8,\"Dark2\")\npng(\"wordcloud_NewYorkTimes_Community.png\", width=1280,height=800)\nwordcloud(ap.d$word,ap.d$freq, scale=c(8,.2),min.freq=2,\nmax.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)\ndev.off()"], "link": "http://onertipaday.blogspot.com/feeds/2091308031120843775/comments/default", "bloglinks": {}, "links": {"http://www.tagxedo.com/": 1, "http://ekonometrics.blogspot.com/": 2, "http://developer.nytimes.com/": 1, "http://www.omegahat.org/": 1, "http://1.blogspot.com/": 1, "http://www.wordle.net/": 1, "http://en.wikipedia.org/": 1, "http://4.blogspot.com/": 2, "http://cran.r-project.org/": 4}, "blogtitle": "One R Tip A Day"}, {"content": ["Being a big fan of XKCD and, of course, of the R programming language, I thought that a package which allows to display my favorite strips would something (useless) but cool! \nSo, mimicking the approach (and the code) of the fortunes package (thanks Achim Zeileis!), I created a simple package (names RXKCD) which allows the user to displays his favorite XKCD strip by selecting the specific number, randomly or simply displaying the current strip. \nYou can install the package using: \n if (!require('RJSONIO')) install.packages('RJSONIO', repos = 'http://cran.r-project.org')\nif (!require('png')) install.packages('png', repos = 'http://cran.r-project.org')\nif (!require('ReadImages')) install.packages('ReadImages', repos = 'http://cran.r-project.org')\ninstall.packages(\"RXKCD\", repos=\"http://R-Forge.R-project.org\") \nAnd you can use it by typing: \n library(RXKCD)\nsearchXKCD(\"someone is wrong\")\ngetXKCD(386) \n Below the result ( xkcd license ): \n \n \n \n \n Update : The updated version of the package , which is available from CRAN (just type install.packages(\"RXKCD\") ), allows the user to save the xkcd metadata database in a local directory ( .Rconfig ) and update it in order to have access to the latest XKCD info: see ?saveConfig and ?updateConfig ."], "link": "http://onertipaday.blogspot.com/feeds/8904773746941290624/comments/default", "bloglinks": {}, "links": {"http://1.blogspot.com/": 1, "http://xkcd.com/": 2, "http://cran.r-project.org/": 2}, "blogtitle": "One R Tip A Day"}, {"content": ["In a few days I'm going to attend a Bioconductor Course ; I was requested to install on my MacBook (Mac OS X 10.5.8) a developer version of R (plus ad hoc Bioconductor packages). In order to keep my old R installation ((2.13) along side the new one (2.14) I decided to use the RSwitch app (you can download from here ) and the instructions you can read here . \nIn practical term, you type the following commands in Terminal: \n \n sudo pkgutil --forget org.r-project.R.Leopard.fw.pkg \nsudo pkgutil --forget org.r-project.R.Leopard.GUI.pkg \nsudo pkgutil --forget org.r-project.R.Leopard.GUI64.pkg \n \nYou install the alternative version of R (for example, following the procedure depicted here ) and then you can switch between the different version using the RSwitch GUI (see the below screenshot). So easy!"], "link": "http://onertipaday.blogspot.com/feeds/843042180264650504/comments/default", "bloglinks": {}, "links": {"http://3.blogspot.com/": 1, "http://users.unimi.it/": 1, "http://onertipaday.blogspot.com/": 1, "http://r.att.com/": 1, "http://cran.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["The new R 2.13.0 is out! Get the source code from here . \n \nTake a look at these posts for some miscellaneous advices to make the upgrade easier. \n \nAlso this thread on stackoverflow and this post contributed by Tal Galili can be of some value to make the procedure less painful. \n \nFeel free to contribute with suggestions about how to upgrade your R installation."], "link": "http://onertipaday.blogspot.com/feeds/3383084128293271156/comments/default", "bloglinks": {}, "links": {"http://www.r-statistics.com/": 2, "http://stackoverflow.com/": 1, "http://onertipaday.blogspot.com/": 1, "http://cran.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["A thread depicting how to insert a png image in a plot, thanks to Stackoverflow : plotting-images-on-a-grid . \nA very basic tip, still useful to someone."], "link": "http://onertipaday.blogspot.com/feeds/6476819501504794803/comments/default", "bloglinks": {}, "links": {"http://stackoverflow.com/": 2}, "blogtitle": "One R Tip A Day"}, {"content": ["The last gift of 2010: R Journal 2/2 is out! Get it from here ."], "link": "http://onertipaday.blogspot.com/feeds/9128340063255991395/comments/default", "bloglinks": {}, "links": {"http://journal.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["Since I got the chance to access to both Google Storage for Developers and Google Prediction API (more details here and here ), I decided to create a simple wrapper (just 4 basic functions until now) to be capable to play with the Google Prediction API from R. \n Here you can find the github repository for the project and below few lines of code reproducing an example you can find on the Google Prediction API website. \n \nDownload the source code from here . \nEither source the functions contained in the R directory or install the package typing (from the command line in a Unix-like environment): \nR CMD INSTALL predictionapirwrapper_1.0.tar.gz \n# start R and type (code highlighting thanks to Revolution Analytics Pretty R syntax highlighter ): \n library ( predictionapirwrapper ) \n ## The first stage of using the API is to acquire an authorization token. This can be done via this command: \ntoken <- GetAuthToken ( email= \"user@gmail.com\" , passwd= \"mypassword\" ) \n ## This command begins training on data that has been previously uploaded to Google Storage. \nGoogleTrain ( auth_token=token$Auth , mybucket= \"data_languages\" , mydata= \"language_id.txt\" ) \n ## Once training has started, this command checks the status of the training job and gets meta-information on the model (if available). \nGoogleTrainCheck ( auth_token=token$Auth , mybucket= \"data_languages\" , mydata= \"language_id.txt\" ) \n ## When training has finished, this command issues a request for a new prediction from the model. \nGooglePredict ( auth_token=token$Auth , mybucket= \"data_languages\" , mydata= \"language_id.txt\" , myinput= \"La idioma mas fina\" )  \nAll comments, corrections, alternative code are more than welcome! \n \nUpdate: a more complete and functional alternative can be found here ."], "link": "http://onertipaday.blogspot.com/feeds/8151770415465694451/comments/default", "bloglinks": {}, "links": {"https://github.com/": 2, "http://code.google.com/": 3, "https://code.google.com/": 1, "http://www.inside-r.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["The new R 2.12.0 is out! Get the source code from here . \nTake a look at these posts for some miscellaneous advices to make the upgrade easier. \nAlso this thread on stackoverflow can be of some value. \nFeel free to contribute with suggestions about how to upgrade your R installation."], "link": "http://onertipaday.blogspot.com/feeds/1122168198961190052/comments/default", "bloglinks": {}, "links": {"http://stackoverflow.com/": 1, "http://onertipaday.blogspot.com/": 1, "http://cran.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["Here you can find a collection of cheat sheets useful to R developers. \nVisit the devcheatsheet homepage to inspect cheat sheets and quick reference card for other programming languages and applications."], "link": "http://onertipaday.blogspot.com/feeds/1305553166738506240/comments/default", "bloglinks": {}, "links": {"http://devcheatsheet.com/": 2}, "blogtitle": "One R Tip A Day"}, {"content": ["R Journal 2/1 is out! Grab it from here ."], "link": "http://onertipaday.blogspot.com/feeds/3105625302230495138/comments/default", "bloglinks": {}, "links": {"http://journal.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["The new R 2.11.0 is out! Get it from here . \nTake a look at these posts for some miscellaneous advices to make the upgrade easier. \nAlso this thread on stackoverflow can be of some value. \nFeel free to contribute with suggestions about how to upgrade your R installation."], "link": "http://cran.r-project.org/src/base/R-2/R-2.11.0.tar.gz", "bloglinks": {}, "links": {"http://stackoverflow.com/": 1, "http://onertipaday.blogspot.com/": 1, "http://cran.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["Following Tal Galili example and using part of his code, I want to plot the balloonplot you can see here using R and the excellent ggplot2 package by Hadley Wickham . \n \n ### I retrieve the data from the google document you can find here using Tal Galili code:\n## I slightly modified Tal code to include popularity stats:\nsupplement.popularity \n ## For reproducibility I add the cardio data.frame so you can use it right away\ncardio \n library(ggplot2)\nmyTheme \n s"], "link": "http://onertipaday.blogspot.com/feeds/7062722482977267687/comments/default", "bloglinks": {}, "links": {"http://www.talgalili.com/": 1, "http://www.informationisbeautiful.net/": 1, "http://had.co.nz/": 1, "http://1.blogspot.com/": 1, "http://cran.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["For italian speaking people only (sorry!). \n \nCarlo il curatore dell'ottimo podcast tecnologico Tecnica Arcana mi ha intervistato sulla mia professione e su R. Qui potete scaricare l'intervista in formato mp3."], "link": "http://onertipaday.blogspot.com/feeds/6476622474529086725/comments/default", "bloglinks": {}, "links": {"http://www.tecnicaarcana.com/": 2}, "blogtitle": "One R Tip A Day"}, {"content": ["Ravi from this post (via Revolutions blog) wanted to check the code that produces the left panel of the Figure 3 from this article taken from the current issue of the R Journal . Below my attempt to reproduce the plot: \n \n  \n \n rv <- seq(1.3, 2.9, .1) \nrv <- rv[-grep(\"1.6\", rv)] # remove R version 1.6 \npckg.num <- c(110,129,162,219,273,357,406,548,647,739,911,1000,1300,1427,1614,1952) \nrv.dates <- c(\"2001-6-21\", \"2001-12-17\",\"2002-06-12\",\"2003-05-27\", \n\"2003-11-16\",\"2004-06-05\",\"2004-10-12\",\"2005-06-18\",\"2005-12-16\", \"2006-05-31\", \n\"2006-12-12\",\"2007-04-12\",\"2007-11-16\",\"2008-03-18\",\"2008-10-18\",\"2009-09-17\") \npckg.fit <- lm(pckg.num~rv) \npng(\"CRAN_packages.png\") \npar(mar=c(7, 5, 5, 3), las=2) \nplot(as.POSIXct(rv.dates), pckg.num, xlab=\"\",ylab=\"\",col=\"red\", log=\"y\", pch=19, axes=F) \naxis.POSIXct(1, 1:16, rv.dates, format=\"%Y-%m-%d\") \nmtext(\"Date\", side=1, line=5, las=1) \naxis(2, at=c(100,200,300,400,500,600,800,100,1200,1500,2000)) \nmtext(\"Number of CRAN Packages\", side=2, line=3, las=3) \naxis.POSIXct(3, rv.dates, rv.dates, labels=as.character(rv)) \nmtext(\"R Version\", side=3, line=3, las=1) \naxis(4, pckg.num) \nabline(v=as.POSIXct(rv.dates), col=\"lightgray\", lty=\"dashed\") \nabline(h=pckg.num, col=\"lightgray\", lty=\"dashed\") \nbox() \nabline(lm(log10(pckg.num)~as.POSIXct(rv.dates)), col=\"red\") \ndev.off()"], "link": "http://onertipaday.blogspot.com/feeds/5513522438218158180/comments/default", "bloglinks": {}, "links": {"http://journal.r-project.org/": 2, "http://1.blogspot.com/": 1, "http://blog.revolution-computing.com/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["R Journal 1/2 is out! Grab it from here ."], "link": "http://onertipaday.blogspot.com/feeds/2338603786364437375/comments/default", "bloglinks": {}, "links": {"http://journal.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["I would like to suggest to my readers to take a look and bookmark a new blog named R-bloggers which aims to be \"a central hub of content collected from bloggers who write about R\". It seems a nice idea to me to have a centralized source of information for the R blogger community. Good Luck, Tal!"], "link": "http://onertipaday.blogspot.com/feeds/8247104182323681500/comments/default", "bloglinks": {}, "links": {"http://www.r-bloggers.com/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["I was invited to review the book R in Action written by Rob Kabacoff. Since I consider the Quick-R website, created by the same smart guy, one of the most valuable resources about R, It is both an honor and a pleasure to have the opportunity to take an early look at his book and to express some thoughts about it. First, this book is distributed under an early access policy that means, as it is stated on the editor's web site , that: This Early Access version of the book enables you to receive new chapters as they are being written. You can also interact with the authors to ask questions, provide feedback and errata, and help shape the final manuscript on the Author Online . This is a nice publishing approach, the editor settled up an ad-hoc forum which allows real-time feedback from early adopters. This beta-test sort of approach is convenient both to the author that can fix errata and improve contents before the final version is published and to the early adopters that can access to useful contents in advance and receive valuable explanations directly from the author. Since only the initial part of the book is available, this short review will be at most incomplete and present only preliminary thoughts. I'm going to update the review as soon as I have the possibility to read the rest of the book. R in Action, as mimicked in its structure, aims to guide the new adopters from the vary basics of the language through to the most advanced features by a progressive task-driven approach carefully curated by the author. In the initial part of the book, Kabacoff covers all the basic features of the language from data manipulation to the basic statistics required to make sense of the data plus the most common and useful graphical methods for visualizing them. The author makes large use of working example. This is one of the most effective teaching technique, in my opinion, because it encourages readers to apply immediately the knowledge acquired. An other nice ingredient of Kabacoff method is to introduce effective high quality packages from the huge R collection to solve a proposed task. For example, in chapter three the author introduces the rename function from the awesome reshape package to rename the columns of a data.frame. This is a very trivial task, that can be easily managed by standard R (as the author shows shortly afterward); but the smoothly introduction of this useful package, explained and used more extensively in the forthcoming chapters, represents a nice touch that both means to manage the task in a more elegant way and introduces the user to a powerful tool. In this fashion, the tasks presented in the text are addressed using several different packages in order to depict the various alternative methods available in R. Furthermore, the numerous notes accompanying the explanations serve both to make easier the understanding of the described concepts and to provide useful insights about R features and idiosyncrasies. To sum up, the chapters I had the opportunity to examine are a solid base for people getting started with R. I'm impatient to dig through the forthcoming chapters of the book which deal with advanced statistics and graphics! I warmly recommend this book even in this early stage: if you are new to R programming this is a valid approach to start being familiar with the language and make effective use of it in from day one."], "link": "http://onertipaday.blogspot.com/feeds/3392176773150086667/comments/default", "bloglinks": {}, "links": {"http://www.manning.com/": 2, "http://www.statmethods.net/": 1, "http://www.manning-sandbox.com/": 1, "http://had.co.nz/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["For all bioinformaticians and R users out there: the Bioconductor project for the analysis and comprehension of genomic data is out! A lot of interesting new stuff! See the full announcement here ."], "link": "http://onertipaday.blogspot.com/feeds/3512612777431919876/comments/default", "bloglinks": {}, "links": {"http://www.bioconductor.org/": 1, "https://mailman.ethz.ch/": 1}, "blogtitle": "One R Tip A Day"}, {"content": ["The new R 2.10.0 is out! Get it from here . \nIf you like take a look at these posts for some miscellaneous advices to make the upgrade easier. \nFeel free to contribute with suggestions about how to upgrade your R installation."], "link": "http://onertipaday.blogspot.com/feeds/6033197343469871302/comments/default", "bloglinks": {}, "links": {"http://onertipaday.blogspot.com/": 1, "http://cran.r-project.org/": 1}, "blogtitle": "One R Tip A Day"}]