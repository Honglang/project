[{"blogurl": "https://gephi.org\n", "blogroll": [], "title": "Gephi"}, {"content": ["We recently finished to deploy a continuous integration environment at Gephi and I\u2019m excited to share some of the highlights. \n The Gephi developer team has been hard at work to change the way we iterate and create releases at Gephi. Developer productivity has been an important theme for this year\u2019s focus and we already made several improvements. At the end of last year we migrated our code to GitHub and improved the documentation. We then focused on plugin developers and made it really easy to create new plugins with the Plugin Bootcamp and the new gephi-plugins repository. Finally, we\u2019re now introducing a completely automated build and release production system. \n Our objective was to automate the way releases are created and tested. Previously, creating a release was a manual process and included error prone tasks like updating configuration files, unzipping translations in the right folder or creating installers. Open-source tools like Maven , Jenkins and Nexus can help to make this process seamless and always have the latest deliverables available. \n Maven migration \n We migrated our code base from Ant to Maven . Gephi is based on the\u00a0 Netbeans Platform and has more than 80 different modules with dependencies and third-party librairies. Maven makes it easy to manage a large number of dependencies and put all configuration parameters in one place. Maven has also a large number of plugins and is very well integrated in Netbeans and Eclipse IDE. \n Highlights: \n \n A full application package, all Javadocs and sources are now produced and uploaded online with a single command. \n Dependencies are all defined in one place. It is also much easier to update to the latest version of the Netbeans Platform. \n All library JARs are dependencies to Maven Central or 3rd party repositories. No library JARs are directly included in the sources anymore. \n The Gephi project is now a standard multi-module Maven project. It can therefore be opened and built in Eclipse or IntelliJ, as well as Netbeans out of the box \n It facilitates module reuse in other projects like the Gephi Toolkit . Any other project can easily depend on any (or all) Gephi modules. \n \n Jenkins server \n Jenkins is the continuous integration server we chose to automate building and testing Gephi. It is configured to build and test Gephi every night based on the latest version of the code on GitHub. If the build fails, developers are informed something needs to be fixed. \n Highlights: \n \n Fully automated build in a stable environment. If something is wrong, it must be the code. \n In addition of Gephi itself, we\u2019re also building the Gephi Toolkit every night. Eventually, we\u2019ll be able to build and test plugins as well. \n Artifacts produced are uploaded to Nexus. \n \n Nexus \n Nexus is a repository for artifacts, which could either be librairies Gephi is using or release binaires like the latest release. At any time, beta testers can download the nightly build and test new features. We just announced a new beta testing program, which couldn\u2019t be possible without the availability of the nightly build. \n Highlights: \n \n All 3rd party librairies have been uploaded to Nexus. Maven is using Nexus as a source for librairies. \n The nightly build packages are available for download. \n It also hosts the latest set of NBMs and Javadocs . \n \n \nWe learnt a lot during this project and will continue to strengthen the developer and beta-tester environment to scale up Gephi development. So far, we\u2019ve done the Maven migration on a separate GitHub repository but we\u2019ll soon convert the main repository and soon after release a 0.8.2 Gephi version. We\u2019ve created a new Continuous Integration section on the Dev Portal and documented this project. \n Plugin development remains the same for now and all plugins should be compatible with the new code base. In the next few months we would like to bring continuous integration to plugin developers as well. Testing at scale a large number of plugins at each new Gephi version remains a challenge and we would like to improve that. Also, we\u2019ve seen issues where different plugins use different version of the same library and eventually\u00a0cause crashes. Stay tuned for some news on that. \n In the next few weeks we\u2019ll update the documentation at various places how to build Gephi and work with the code. Developers interested to try this new system out should follow the instructions on GitHub or reach to us on the developer mailing-list . \n Last but not least, we would like to say kudos to Maven, Jenkins and Nexus contributors for their huge and excellent work!"], "link": "https://gephi.org/2012/continuous-integration-at-gephi/", "bloglinks": {}, "links": {"http://gephi.org/": 1, "https://github.com/": 4, "http://nexus.gephi.org/": 4, "http://netbeans.org/": 1, "http://jenkins-ci.org/": 1, "http://en.wikipedia.org/": 1, "https://gephi.org/": 4, "http://maven.apache.org": 1, "http://wiki.gephi.org/": 2, "http://ant.apache.org/": 1, "http://maven.apache.org/": 1, "http://www.sonatype.org/": 1}, "blogtitle": "Gephi"}, {"content": ["Hi all, today we are announcing a new program and it\u2019s all about testing the latest\u00a0versions\u00a0of Gephi. Anyone can join the program and test the development version, send feedback and discuss features. We want to build a team of beta-testers who the developers can work with to detect issues before the software reaches the standard users. \n So far, testing has been done by a small group of developers and users but we would like to extend it to a larger\u00a0audience. There are many different versions of Windows , Mac OS X and Linux Gephi supports. Testers will help to detect compatibility issues specific on a single platform and overall participate in testing new features. \n To make this effort successful, we\u2019re making it super easy to test the latest development version without requiring to know about programming or how Gephi is built . We\u2019re introducing a nightly build package which gets updated automatically every night with the latest version of the code. Once downloaded and installed, this version of Gephi will ask you to update itself every time a new version is available so you don\u2019t have to download and install Gephi over and over again. If you\u2019re already familiar with Gephi\u2019s auto update capability, this is using the same system. \n \n How to get started? \n \n \n \n \n \n Join the gephi-tests@lists.gephi.org mailing list \n Developers and testers will discuss on this list. \n Fill this questionnaire online. \n Cuple of questions on your hardware and software configurations. \n \n \n \n \n Questions? Feel free to stop by on this forum thread."], "link": "https://gephi.org/2012/beta-tester-program-starts/", "bloglinks": {}, "links": {"http://gephi.org/": 1, "https://forum.gephi.org/": 1, "http://wiki.gephi.org/": 1, "https://docs.google.com/": 1}, "blogtitle": "Gephi"}, {"content": ["My name is Min WU and during this Google Summer of Code I have worked on the project to interconnect Gephi Graph Streaming API and the GraphStream library. My mentors are Yoann Pign\u00e9 and Andr\u00e9 Panisson . \n This project aims at interconnecting the GraphStream \u2019s dynamic graph event model with Gephi in order to have Gephi to visualize an ongoing graph evolution and measurement. Based on this project, users can model and simulate complex systems with GraphStream while observing the output with the visual tools offered by Gephi. \n \n GraphStream is written in Java. In order to use streams of graph events in other languages, GraphStream provides the NetStream framework , i.e. a network interface, such that other projects written in other language can use GraphStream. The NetStream framework consists of three parts, receiver, sender and the NetStream Protocol. The receiver is responsible for receiving graph events from the network and dispatching them to pipes. It works within only one thread, listening at a given address and port while receiving graph events from several streams, actually several threads or clients. The sender encodes graph events into messages according to the NetStream protocol and send them to a defined receiver with given port, host and stream ID. Every message contains sourceId, timeId and event context, among which the combination of sourceId and timeId is dedicated to distinguish between several streams and solve the synchronization issue. Finally the NetStream protocol specifies the message format at byte level. \n Gephi also supports the idea of \u201cstreams of graph events\u201d. It has a framework for graph streaming in Gephi plugin built by Andr\u00e9 Panisson during the 2010 GSoC, through a multi-threaded socket server. Other applications can push graph data to the Gephi server through the network, and have it visualized. In this graph streaming project, operations (a concept similar to event) are invoked through HTTP requests made by the client to the server, based on a JSON format . \n Work done \n In my project, I interconnected Gephi and GraphStream based on Andr\u00e9\u2019s Graph Streaming plugin. Since NetStream on GraphStream side works on NetStream protocol while Graph Streaming API on Gephi side works on JSON protocol, we have to make them compatible with each other. Considering the flexible interoperability and language agnostic properties, I have chosen the JSON protocol to do the interconnection and implement a sender part and a receiver part. \n The sender part (JSONSender) is responsible for sending events from GraphStream to Gephi. GrpahStream works as a client and Gephi works as a server. Every time the graph in GraphStream changes, a corresponding event is sent to Gephi. Gephi handles the event and changes its own graph. In this way, the sender part works as a sink of the GraphStream graph, so it must implement the sink interface which contains methods to deal with graph element events and attribute events. In each method, we first encode the event message into a JSON string, and then send it to Gephi. We connect to Gephi and use \u201cupdateGraph\u201d operation to send events. The corresponding URL is \u201chttp://host:port/workspace?operation=updateGraph\u201d. The host and port must match with the Gephi sever and the workspace is a destination workspace of Gephi, for example an URL can be \u201chttp://127.0.0.1:8080/workspace0?operation=updateGraph\u201d. The Gephi server and client are built with the \u201cGraph Streaming API \u201d in the Gephi-plugin. \n The receiver part (JSONReceiver) is responsible for receiving events from Gephi. It listens to Gephi and waits for events. Every time the graph in the Gephi changes, a corresponding event will be send to GraphStream. Then the GraphStream handles the event and changes its graph object. In this way, the receiver part works as a source of the GraphStream graph. In order to listen to Gephi events, we use a URL within \u201cgetGraph\u201d operation to connect to Gephi. The corresponding URL is \u201chttp://host:port/workspace0?operation=getGraph\u201d. \n With these two classes, we can interconnect GraphStream and Gephi in real-time. Two tutorials are given to show how to do real-time connection between GraphStream and Gephi, see the video below. If you are interested in the detail implementation, please refer to the manual page. \n \n The first class is GraphSender, which aims at loading a graph in GraphStream and dynamically displays it on a Gephi workspace. We need to create a graph instance and a JSONSender instance, and plug the JSONSender instance as a sink of the graph instance. Since then, when we generate the graph, or load the graph from a file, Gephi will display it in real-time. \n The other class is LinLogLayoutReceiver. The Lin-Log layout in GraphStream is dedicated to find communities in graphs. This tutorial shows the execution of a Lin-Log layout in GraphStream and the sending of the layout information to Gephi in real time. We first load a graph in Gephi, display it and apply some algorithms. Then we send the graph to GraphStream and apply the Lin-Log layout on the graph on the GraphStream side. Meanwhile we visualize the layout process on the Gephi side in real time. To achieve it, we create a graph instance and a JSONReceiver instance, and then get the ThreadProxyPipe instance and plug the graph instance as an ElementSink of the pipe instance. Then we apply the Lin-Log layout, and create a new thread in which to create a JSONSender instance and plugin it as a sink of the graph layout. \n Distribution \n This project is distributed under MIT license . You can refer to the code on Github . By the way, I feel very appreciative for my mentors\u2019 supervision. Thank you very much!"], "link": "https://gephi.org/2012/gsoc-interconnect-gephi-graph-streaming-api-and-graphstream/", "bloglinks": {}, "links": {"https://github.com/": 2, "http://www.unito.it/": 1, "http://pigne.org/": 1, "http://graphstream-project.org/": 3, "https://gephi.org/": 1, "https://wiki.gephi.org/": 1}, "blogtitle": "Gephi"}, {"content": ["My Name is Eduardo Gonzalo Espinoza Carreon and during this summer I developed the new Legend Module for Gephi, with the mentoring of Eduardo Ramos and S\u00e9bastien Heymann. This article will give you an overview of the work done. \n Problem statement \n Currently Gephi offers the possibility of visualizing graphs, but what about legends? Legends provide basic and extra information related to the graph and they are useful when interpreting any kind of network map. If a person is not familiar with the content of a graph, missing or wrong legends could lead to misleading interpretations and sometimes wrong decisions. When a visualization is used by multiple people for discussing, analyzing or communicating data, legends are of great importance. \n For instance, the following graph represents the coappearance of characters in the novel Les Miserables. After performing a visual analysis we could only conclude that the graph has 9 groups. This is probably a little of the information the creator wanted to transmit. The graph has no information related to the number of nodes explored, or what the groups represent and how many elements each group has, etc. \n  \n A current workaround to solve this problem is to export the graph as an image, and then manually add the legends using Inkscape, Adobe Illustrator or another graphics editor. However this task is time-consuming and can be automated. The new Legend Module proposes a solution to this problem. \n Solution \n We propose an extension to the Preview module for generating legend items. The following legend items are available: Table, Text, Image, Groups and Description . They can be added using the Legend Manager, which is shown in a new tab under the Preview Settings: \n  \n After selecting a type of legend, the user chooses a sub-type builder, e.g. \u201cTable\u201d > \u201cPartition interaction table\u201d, or \u201cTop 10 nodes with greatest degree\u201d, as shown in the following figure: \n  \n When a new Legend item is added, it is displayed in the list of active legend items, where the user can edit its properties. The user can also edit its label and assign a user-friendly name to remember the content of the legend easily. \n  \n Every item has a set of common properties: label, position, width, height, background color and border, title, description; and also each type of item has its own properties and data. The values of those properties are editable through a Property Editor like the one used in the preview settings. \n  \n Some properties like scale and translation can be modified using the mouse like most of the graphic design applications. All legend items are designed with a smart way of autoresize. It\u2019s not the common scale feature, e.g. if the text included in the Text Item is bigger than the size assigned, then the Text Renderer overrides the text font defined by the user and decreases the font size until the text is able to fit in the specified dimensions. The results of this feature are shown in the next figure: \n  \n Workflow \n The legend builder retrieves the graph data (partitions, node labels, edge labels, etc) and creates a new Legend item for each of them. Then a legend renderer makes use of these information, plus the properties set by the user, to render the Legend item to the specified target: PNG, PDF or SVG. \n For developers \n The renderers can be extended. For instance, the default Group Renderer is: \n  \n Using external libraries like JFreeChart, we can extend it to create a Pie Chart Renderer like as follows: \n  \n Other types of items can be created by combining other available Legend Items or by extending Legend Item, Legend Item Builder and Legend Item Renderer. \n The Legend Module also provides a save/load feature. So you can save your legends for future editing. \n  \n Limitations \n Currently there are some limitations like selecting a specific renderer for each type of item, and also exporting legends to SVG format is not done automatically like PNG and PDF, e.g. Exporting an Image (they will be embedded in the SVG file). \n Conclusions \n I would like to thank Eduardo Ramos and S\u00e9bastien Heymann for their support and feedback, which was critical during the development of this new module. The Legend module will be available as core feature in next Gephi release. \n This GSoC was a great opportunity to learn and it also represents my first important contribution to the open-source community."], "link": "https://gephi.org/2012/gsoc-legend-module/", "bloglinks": {}, "links": {"https://gephi.org/": 9}, "blogtitle": "Gephi"}, {"content": ["My name is Taras Klaskovsky and during this Summer Of Code I have implemented the Force Directed Edge Bundling algorithm. \n Force Directed Edge Bundling (FDEB) is an edge layout algorithm. Gephi already has node layouts, which are placing the nodes (usually using force-directed algorithms). FDEB helps to further improve graph visualization by changing shapes and colors of the edges to merge them in bundles, analogous to the way electrical wires and network cables are merged into bundles along their joint paths and fanned out again at the end. This reduces visual clutter, inevitable in large graphs, allowing to find high-level edge patterns and get an overview of the graph just by looking at it. As example, US flights graph below, with nodes as airports and edges as flights. \n The algorithm \n Edges are modeled as flexible springs that can attract each other while node positions remain fixed. A force-directed technique is used to calculate the bundling and it is relatively slow. On small graphs it works pretty fast due to optimizations, but consumes large amount of memory to store precomputed similar pairs of edges; for average and large graphs a special slow low-memory mode implemented. After every iteration preview is being refreshed, so it\u2019s possible to observe formation of bundles in real-time. \n Full algorithm description can be found on this research paper . \n  \n \n \n \n \n Renderer Modes \n FDEB has 3 renderer modes: \n \n Simple renderer: Draws all edges with the same color and transparency (color, transparency and thickness are set in the preview settings in the bottom-left panel), bundles are emphasized by combined transparency. \n Gradient renderer: Draws all edges with color from gradient slider. Edges that are similar to higher number of other edges get higher color. \n Gradient slow renderer: Uses more precise method to determine intensity of edge (needs precalculate points checkbox and to be re-runned) to set personal color for every segment. \n \n FDEB can be customized with lots of options and they all have descriptions, some of the most influential on result are: \n \n Use inverse-qudratic model: Makes more localized bundling \n Compatibility threshold: Ignore pairs of edges that are not similar enough, which makes FDEB faster (ignored in low-memory mode) and bundling become more localized. \n \n To make FDEB faster it\u2019s also possible to decrease number of cycles/subdivision points increase rate. \n  \n The Edge Layout API \n An edge layout API has been created to simplify the integration of other edge layouts into Gephi. This API is very similar to the existing node layout API, with the following additions. Since edge layouts do not only change shapes of edges, but are also responsible for their visualization, a modifyAlgo() is called each time when the Preview is refreshed, to control the modification of parameters. The edge layout data, which is accessible for each edge, provides polyline points and it\u2019s colors for all renderer modes. \n How to get the FDEB algorithm \n It will be available in the next release of Gephi. The current source code is available on Github ."], "link": "https://gephi.org/2012/gsoc-force-directed-edge-bundling/", "bloglinks": {}, "links": {"https://github.com/": 2, "http://www.tue.nl/": 1, "https://gephi.org/": 5}, "blogtitle": "Gephi"}, {"content": ["No rest for the community this summer! This is a digest of our activity. \n New plugins: \n \n DAG Layout \n Export To Google Earth (KMZ file format) \n \n New Web articles: \n \n By @gnovelli : Divud is a GPL tool, born for social researchers and web marketers. \n By @MartPasquier : The Singaporean Leisure blogosphere revealed. \n By @seinecle : Eonydis: read a csv file and turns it into a dynamic graph in Gephi. \n By @RiederB : New netvizz feature: bipartite like networks from Facebook. \n By @fabien_gandon : Cities bigger than 500000 habitants linked according to their language. \n By @blogsir : Monitoramento do #12M utilizando o Gephi: projeto Cartografar as controv\u00e9rsias na Internet. \n By @patrick_mj : Very simple PHP class for building GEXF files. \n By @arstechnica : Novel text analysis uses PageRank to identify influential Victorian authors. \n By @eekim : What does \u201cCollaboration\u201d look like? Network analysis of LinkedIn skills. \n By @meinstream : Social Graphs of Movies with the help of some Gephi and Sigmajs. \n By @erich_owens : @newsle\u2019s related people system. (400k nodes!). \n By @jbmoreno : Conseguir enlaces de la red de la competencia con Gephi. \n Visualizando la evasi\u00f3n fiscal del 1%. \n By @_aileenrose : Stunning Olympics Graph Visualizations. \n By @f_ficarola : A new version of gexf4j has been released: 0.3.2-ALPHA. \n By @NewArabella : One 18thc tavern in London, 40 kinds of fish. \n By @bkeegan : Analysis of Wikipedia collaboration in response to Aurora shooting. \n By @Cloudera : Adverse Drug Event Analysis using Hadoop, R, and Gephi. \n By @RegardsCitoyens : All tweets from OLDP mapped with Gephi reveal geog clusters of participants. \n By @brendangriffen : The Graph Of Beer \n By @ateliercarto : French Civil Code map with sigma.js by Jacques Verrier \n By @UmbertoGriffo : Graphs generated by Mobility Models Gephi Plugin. \n By @brendangriffen : Graphing Every* Idea In History. \n By @psychemedia : Mapping Related Musical Genres on Wikipedia/DBPedia. \n By @psychemedia : Generalising the mapping of topic areas in wikipedia using Gephi. \n \n New research papers: \n \n D R. Farine, C J. Garroway, B C. Sheldon: Social network analysis of mixed-species flocks: exploring the structure and evolution of interspecific social behaviour , in Animal Behaviour \n R. Nagarajana, A. T. Kalinkab, W. R. Hogan: Evidence of community structure in Biomedical Research Grant Collaborations , in Journal of Biomedical Informatics \n R. Laue, M. Becker: Evaluating Social Tagging for Business Process Models \n A. Maireder, J. Ausserhofer, A. Kittenberger: Mapping the Austrian Political Twittersphere , CEDEM 2012 \n I. Olaizola et al.: Trace transform based method for color image domain identi\ufb01cation \n J. E. Joseph et al.: The changing landscape of functional brain networks for face processing in typical development , in NeuroImage \n B. Chen, M. Scardamalia, M. Resendes: Promisingness Judgments by Grade 3 and 4 \n C. P\u00e9rez-Penichet, A. Conde, A. Moreira: Human mobility analysis by collaborative radio landscape observation , in Proceedings of the AGILE\u20192012 International Conference on Geographic Information Science \n M. Imbeault, K. Gigu\u00e8re, M. Ouellet, M. J. Tremblay: Exon Level Transcriptomic Profiling of HIV-1-Infected CD4+ T Cells Reveals Virus-Induced Genes and Host Environment Favorable for Viral Replication , in PLoS Pathogens 8(8): e1002861. doi:10.1371/journal.ppat.1002861 \n F.G. Laxe, M.J. Freire Seoane, C.P. Montes: Maritime degree, centrality and vulnerability: port hierarchies and emerging areas in containerized transport (2008\u20132010) , in Journal of Transport Geography, Volume 24, September 2012, Pages 33\u201344 \n P. Cerveroa, M. Himmela, M. Kr\u00fcgerb, S. Lindera: Proteomic analysis of podosome fractions from macrophages reveals similarities to spreading initiation centres , in European Journal of Cell Biology \n R. Kasprzyk: Di\ufb00usion in Networks \n D. Zinoviev, D. Stefanescu, L. Swenson, G. Fireman: Semantic Networks of Interests in Online NSSI Communities , WebSci 2012"], "link": "https://gephi.org/2012/summer-news/", "bloglinks": {}, "links": {"http://www.ac.at/": 1, "http://www.eldiario.es/": 1, "https://vimeo.com/": 1, "http://www.nit.eu/": 1, "http://twitter.com/blog": 1, "http://blog.ouseful.info/": 2, "http://arstechnica.com/": 1, "http://www.sciencedirect.com/": 5, "http://homogastronomicus.blogspot.fr/": 1, "http://griffsgraphs.com/": 2, "http://www.plospathogens.org/": 1, "http://www.visualizing.org/": 1, "https://github.com/": 4, "http://www.caterdev.de/": 1, "http://www.brianckeegan.com/": 1, "http://wimmics.inria.fr/": 1, "http://arxiv.org/": 1, "http://www.labic.net/": 1, "http://moviegalaxies.com": 1, "http://www.lafabriquedelaloi.fr/": 1, "http://people.illinois.edu/": 1, "http://groupaya.net/blog": 1, "http://ateliercartographie.wordpress.com/": 1, "https://martinpasquier.wordpress.com/": 1, "http://bodongchen.com/": 1, "http://thepoliticsofsystems.net/": 1, "http://divud.tumblr.com/": 1, "https://gephi.org/": 2, "http://twitter.com/": 23, "https://twitter.com/": 1, "http://agile.tu-dresden.de/": 1, "http://www.jbmoreno.es/": 1}, "blogtitle": "Gephi"}, {"content": ["It\u2019s been a long time that the Gephi team is looking to the web as a platform for network visualization: \n \n The Gephi Toolkit enables the use of Gephi on servers. \n The Seadragon Export plugin facilitates interactive publishing (quickly followed by great plugins from the community). \n The GraphGL experiment has advanced our understanding of WebGL, a promising technology. \n A Web gallery with easy publishing system from Gephi is under development. \n \n But so far we focused on the Gephi software itself. Part of our team is now willing to create a novel online platform which will benefit from our experience in making Gephi. With a focus on network sketching, easy data gathering and publishing facilities across various devices, we aim at democratizing the investigation and reporting of real-world networks: organisations, lobbying, government spending, crime networks, financial and human migration flows, social media, and more. \n We believe that network thinking is of tremendous importance in investigative journalism : the media industry is facing big challenges, yet citizens need comprehensive stories on the complex situations that shakes our societies at a high pace (e.g. the Euro debt crisis , the Arab Spring, etc.). Investigating these events takes time and journalists struggle with scientific tools like Gephi to explore data and produce clear visuals. We lack of a new tool, open to everyone, to investigate networks and reveal evidences easily. \n Hence we propose to develop NodeLink.io , an online platform for investigative reporters which makes node-link data actionable by easily sketching and publishing network visuals on various media. Journalists will gain a powerful tool to explain complex stories, and citizens will gain a better understanding of the mechanics that rule our societies. \n We are applying for the Knight News Challenge to support this project. The Knight Foundation aims at accelerating media innovation by funding breakthrough ideas in news and information. Watch the introduction below or go directly to read our short proposal (500 words), and leave us a comment here to claim your support . Proposals are evaluated on the light of these discussions as well, so please give us early feedback! \n Follow @nodelinkio"], "link": "https://gephi.org/2012/supporting-the-nodelink-io-project-intuitive-tools-enable-investigative-reporters-to-visualize-networks/", "bloglinks": {}, "links": {"https://www.nytimes.com/": 1, "https://twitter.com/": 1, "http://newschallenge2.tumblr.com/": 1, "http://newschallenge.tumblr.com/": 2}, "blogtitle": "Gephi"}, {"content": ["The monthly news give the important news to the people who don\u2019t have a Twitter account or who don\u2019t connect to it each regularly. \n New plugins: \n \n Export graphs to Latex in TikZ format \n Java class dependencies \n Image Preview \n \n New Web articles: \n \n By @toddstavish : InfiniteGraph REST Server posting Gephi Streaming API JSON \n By @lgarulli : OrientDB 1.1.0 supports Gephi \n By @orbis_stanford : Discover ORBIS, the Stanford Geospatial Network Model of the Roman World \n \u201cLinks, Web & Influence by Duncan Watts\u201d : Finding influencers on Twitter networks doesn\u2019t work well for marketing \n By @justinrbriggs : How to Visualize Open Site Explorer Data in Gephi \n By @eDiasporasAtlas : Mapping diasporas on the Web \n By @p_barbera : Visualizing the Twitter mention network of the US Congress w/Gephi + JavaScript \n Videos and material of the Gephi workshop at #compsocsci12 now available \n Using #Drupal as a graph datasource \n Scott Weingart demystifies networks for Digital Humanities \n Elijah Meeks warns against over interpretation of network visuals \n By @gvegayon : rgexf is now on CRAN \n \n New research papers: \n \n B.S. Penmana, S. Guptaa, C.O. Buckeeb: The emergence and maintenance of sickle cell hotspots in the Mediterranean , in Infection, Genetics and Evolution, Available online 12 June 2012 \n N. Dokoohaki, M. Matskin: Mining Divergent Opinion Trust Networks through Latent Dirichlet Allocation \n J. Huhtam\u00e4ki, M.G. Russell, K. Still, N. Rubens: A Network-Centric Snapshot of Value Co-Creation in Finnish Innovation Financing , Technology Innovation Management Review \n V.M. Smith: Social Networks Matter , Master Thesis in Urban Planning, Columbia University \n L.M. Aiello, M. Deplano, R. Schifanella, G. Ruffo: People Are Strange When You\u2019re a Stranger: Impact and In\ufb02uence of Bots on Social Networks , Proceedings of the Sixth International AAAI Conference on Weblogs and Social Media (ICWSM) \n S.P. Imberman, M.E. Kress, D.P. McCloskey: Using Frequent Pattern Mining to Identify Behaviors in a Naked Mole Rat Colony , Proceedings of the Twenty-Fifth International Florida Artificial Intelligence Research Society Conference \n R. R. Salvatierra: Option analysis for the evolution of the Clean Development Mechanism to engage developing countries in a post 2012 Kyoto commitment , Master thesis, Utrecht University \n Z. Huang, B. Yuan, X. Hu: Understanding the Top Grass Roots in Sina-Weibo \n A. Markham, S. Lindgren: From Object to Flow: Network analysis, symbolic interactionism, and social media , Studies in Symbolic Interaction, volume 39 \n J. Devezas and A. Figueira: Finding Language-Independent Contextual Supernodes on Coreference Networks , IAENG International Journal of Computer Science \n K. Slaninov\u00e1, T. Kocyan, J. Martinovic, P. Dr\u00e1zdilov\u00e1, V. Snasel: Dynamic Time Warping in Analysis of Student Behavioral Patterns"], "link": "https://gephi.org/2012/monthly-news-2/", "bloglinks": {}, "links": {"http://boyuan.global-optimization.com/": 1, "http://web.kth.se/": 1, "http://markham.internetinquiry.org/": 1, "http://cran.r-project.org/": 1, "http://www.yurulin.com/": 1, "http://igitur-archive.uu.nl/": 1, "http://www.aaai.org/": 2, "http://www.iaeng.org/": 1, "http://timreview.ca/": 1, "http://justinbriggs.org/": 1, "http://www.sciencedirect.com/": 1, "https://github.com/": 1, "http://www.swissinfographics.com/": 1, "http://journalofdigitalhumanities.org/": 2, "http://academiccommons.columbia.edu/": 1, "https://forum.gephi.org/": 1, "http://www.pablobarbera.com/": 1, "https://code.google.com/": 1, "http://ceur-ws.org/": 1, "http://www.e-diasporas.fr/": 1, "https://gephi.org/": 3, "http://twitter.com/": 7, "http://orbis.stanford.edu/": 1}, "blogtitle": "Gephi"}, {"content": ["Francesco Ficarola is a Computer Engineer and a Ph.D. student at the Sapienza University of Rome. In addition he is been working for an Italian company as R&D Engineer for one year. His main research interests are Wireless Sensor Networks, Social Networking and whatever concerns \u201cInternet of Things\u201d. \n Gephi supports the 1.2draft of GEXF file format since version 0.8. Until now, if you are a Java developer, you couldn\u2019t use any up-to-date Java library to manage this version of the format. The only available library for building GEXF graphs was gexf4j-core v.0.2.0-ALPHA by J. Campanini. Unfortunately that library implemented GEXF 1.1draft only, and is no longer maintained. So I have decided to update that library in order to work and build GEXF 1.2draft compliant graphs. This version introduced many improvements, see the changelog . \n The latest version of gexf4j (currently 0.3.1) supports new XML attributes and data types to encode dynamic networks: \n \n timeformat or spell \n open intervals (startopen/endopen) \n double \n date \n xsd:dateTime \n \n In addition, the javadoc has been added and all methods have now meaningful names for their parameters. \n Creating a GEXF file with gexf4j is very simple and requires very few lines of code: read the two examples in the project README file , or find them in the \u201c it.uniroma1.dis.wiserver.gexf4j.examples \u201d project package. \n Finally, if you would like to support this project, please let me know, you are welcome\u2026 and if you want to stay informed about the latest news on gexf4j, just follow me on Twitter: @f_ficarola \n Checkout code \n Run \n git clone git://github.com/francesco-ficarola/gexf4j.git \n Report issues \n Simply go to the Issues tab. \n Have a nice \u201cGEXF graph\u201d! \n Francesco Ficarola"], "link": "https://gephi.org/2012/gexf4j-a-new-java-library-to-handle-gexf-file-format/", "bloglinks": {}, "links": {"http://www.linkedin.com/": 1, "https://twitter.com/": 1, "https://github.com/": 5, "http://gexf.net/": 2}, "blogtitle": "Gephi"}, {"content": ["The first release of the Gephi\u2019s Python Console plugin is finally available for download . Through this plugin, you can execute queries and manipulate the graph structure by typing commands on a scripting console, making it a very powerful and concise tool to work with. \n This console started as a joint proposal with the GUESS project which aimed at porting the Gython language as a console plugin for Gephi during the Google Summer of Code 2011 program . This project was mentored by Eytan Adar, from the GUESS project, and co-mentored by Mathieu Bastian, from Gephi. \n After installation , the plugin can be accessed through the left slide on Gephi\u2019s UI or through the Window > Console. \n \n Among the features available through the console scripting language are: \n \n Inspired by the Gython language from the GUESS project (i.e. additional operators for manipulating graphs). \n Based on Jython 2.5.2, which implements the Python 2.5 specification. \n Graph structure and attributes manipulation. \n Filtering support. \n Support for running layouts. \n Export API support (i.e. generate PDF/GEXF/PNG exports from within the console). \n Batch scripts support for automating tasks. \n Loads third-party Python libraries. \n \n For example, if you would like to filter the male persons from your social graph and make the result visible, you could simply type the following command: \n visible = g.filter(gender == \"male\") \n If you want set this subgraph nodes\u2019 color to blue, you could just type: \n g.filter(gender == \"male\").nodes.color = blue \n Or, even better, if you want to color both the nodes and edges of this same subgraph, just type: \n (gender == \"male\").color = blue \n Implementing batch scripts for automating tasks is very easy. Just save the script as a file with the py extension and load it with the execfile function. For instance, a batch script for creating a random graph with 50 nodes would look like this: \n \n And to run the script, you would call the following command on the console: \n >>> execfile(\"C:\\\\Users\\\\user\\\\Documents\\\\script.py\") \n Installation \n The Scripting Plugin can be installed through the Gephi\u2019s Tools/Plug-ins menu: \n \n Go to the Tools > Plug-ins menu on Gephi\u2019s user interface. \n Open the Available Plugins tab. \n Click the \u201cReload Catalog\u201d button, to make sure you have an up-to-date catalog. \n Select the \u201cScripting Plugin\u201d on the list and click the Install button. \n \n After installation, the plugin can be accessed through the left slide on Gephi\u2019s UI (as shown in the image below) or through the Window > Console menu. \n \n Documentation \n The console\u2019s documentation at the wiki has instructions for downloading and installing the plugin. \n Feedback and Contributing \n This plugin has been developed by Luiz Ribeiro since the Google Summer of Code 2011 program and we\u2019re really looking forward to see what you\u2019ll be able to do with this new tool. \n The plugin\u2019s source code is hosted on GitHub and is open to your contributions. If you find any bugs or have requests or feature ideas make sure to open a new ticket on the Issues Tracker ."], "link": "https://gephi.org/2012/python-scripting-console-for-gephi/", "bloglinks": {}, "links": {"http://graphexploration.cond.org/": 1, "http://wiki.gephi.org/": 1, "https://github.com/": 2, "https://gephi.org/": 2}, "blogtitle": "Gephi"}]