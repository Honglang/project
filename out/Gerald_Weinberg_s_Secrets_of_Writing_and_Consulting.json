[{"blogurl": "http://secretsofconsulting.blogspot.com\n", "blogroll": [], "title": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["When \"selling\" their methods, Agile evangelists often stress the strength of Agile methods at removing, and even preventing, errors. I used to do this myself, but I always wondered how people could resist this sales pitch. I would plead, \"Don't you want quality?\" And, of course, they always said, \"Yes, we want quality,\" but they didn't buy what I was selling. Eventually, I learned the reason, or at least one of the reasons. In today's blog, I want to help today's evangelists (coaches, team leaders, managers, or whomever) by sharing what I've learned about why Agile methods can be so difficult to sell.   Another Story About Quality  In a prior essay, I told a story that demonstrated how \"quality\" is relative to particular persons. To test our understanding of this definition, as well as its applicability, let's read another story, one that illustrates that quality is not merely the absence of error. One of the favorite pastimes of my youth was playing cribbage with my father. Cribbage is a card game, invented by the poet Sir John Suckling, very popular in some regions of the world, but essentially unknown in others. After my father died, I missed playing cribbage with him and was hard pressed to find a regular partner. Consequently, I was delighted to discover a shareware cribbage program for the Macintosh: \"Precision Cribbage\" by Doug Brent, of San Jose, CA. Precision Cribbage was a rather nicely engineered piece of software, I thought, especially when compared with the great majority of shareware. I was especially pleased to find that it gave me a challenging game, though it wasn't good enough to beat me more than 1 or 2 games out of 10. Doug had requested a postcard from my home town as a shareware fee. I played many happy games of Precision Cribbage, so I was pleased to send Doug this minimum fee. Soon after I sent the card, though, I discovered two clear errors in the scoring algorithm of Precision Cribbage. (Perhaps the word \"precision\" in the name should have been a clue. If it was indeed precise, there was no need to call it \"precision.\" The software would have spoken for itself. I often use that observation about product names to begin my evaluation of a project. For instance, whenever a product has the word \"magic\" in its title, I steer clear of the whole mess.) One error in Precision Cribbage was an intermittent failure to count correctly hands with three cards of one denomination and two of another (a \"full house,\" in poker terminology). This was clearly an unintentional flaw, because sometimes such hands were counted correctly. The second error, however, may have been a misunderstanding of the scoring rules (which were certainly part of the \"requirements\" for a program that purported to play a card game). It had to do with counting hands that had three cards of the same suit when a fourth card of that suit turned up when the deck was cut. In this case, I could actually prove mathematically that the algorithm was incorrect. So what makes this story relevant? Simply this: even with two scoring errors in the game, I was sufficiently satisfied with the quality of Precision Cribbage to a. keep on playing it, for at least several of my valuable hours each week b. pay the shareware \"fee,\" even though I could have omitted payment with no fear of retribution of any kind In short, Precision Cribbage had great value to me, value which I was willing and able to demonstrate by spending my own time and (if requested) money. Moreover, had Doug corrected these errors, it would have added very little to the value of the software.   What's Happening to Quality?  My experience with Precision Cribbage took place some years ago, and occured in a more-or-less amateur piece of shareware. Certainly, with all we've learned over the past few decades, the rate of software errors has diminished. Or has it? I've conducted a small survey of more modern software. Software written by professionals. Software that I use regularly. Software I paid real money for. And not software for playing games, but software used for serious tasks in my business. Here's what I found: Out of the 20 apps I use most frequently, 16 have bugs that I have personally encountered\u2013bugs that have cost me at least inconvenience and sometime many hours of fix-up time, but at least one hour for each occurence. If I value my time at a conservativer $100/hour (I actually bill at $500/hour), these bugs cost me approximately $5,000 in the month of August. That's $60,000 a year, if I maintain that average. If I consider only the purchase prices, those 20 apps cost me about $3,500. In other words, over one year, the purchase price of the software represents less than 10% of what it costs me. (And these are selected apps. The ones that are even buggier have been discarded any time I can find a plausible substitute.) In other words, since quality is value, there's a large negative quality associated with this set of applications. And that's only for one person. In the USA, there must be at least 100,000,000 users of personal computers. My hourly rate is probably higher than the average, so let's just estimate $10/hour, roughly minimum wage for the average person. That would give us an estimate $6,000/year per person for buggy software, which adds up to about $600,000,000,000 for the annual cost to United States workers. Even if my estimates are way off, that's not chump change.  Why Is Improving Quality So Difficult?  If they payoff is so huge, why aren't we raising software quality to new levels? We could ask the same question about improving auto safety, where tens of thousands of human lives are destroyed every year in the United States. You might think that's more motivation than any number of dollars, but it doesn't work that way. Unless the person killed in the car is someone we know, we've heard about so many traffic deaths that we've grown immune to the terrible cost. In other words, it's precisely because traffic deaths are so common that we don't get awfully excited about them. And, I believe, it's the same with software failures. They're so common that we've learned to take them with an accepting shrug. We simply reboot and get back to work. Very seldom do we even bother to switch to a different app. The old one, with all its bugs, is too familar, too comfortable. In fact, some people obtain most of their job security precisely because of their familiarity with software bugs and ways to work around them. In other words, we're surprised that people don't generally feel motivated to improve quality because we vastly underrate the value of the familiar. And that observation explains an interesting paradox. Agile advocates are often so eager to prove the value of Agile methods that they strive to create products with all sorts of wonderful new features. But each new feature, no matter how potentially valuable, has a downside \u2013a negative quality value because of its unfamiliarity. The harder we strive to produce \"higher quality,\" the lower the quality we tend to produce. It's a classic catch-22. To convince people of the value of Agile, we need to produce software that is full of wonderful features that the old software didn't possess, at the same time the new software functions exactly the way the old software did. No wonder change is difficult."], "link": "http://secretsofconsulting.blogspot.com/feeds/6828763080879194362/comments/default", "bloglinks": {}, "links": {}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["Some Agile writers have called me \"the grandfather of Agile.\" I choose to interpret that comment as a compliment, rather than a disparagment of my advanced age. As a grandfather, much of my most influential writing was done long before the Agile movement appeared on stage. As a result, newcomers on the scene often fail to see the connection between those writings and today's Agile movement. I'm planning to use my blog to correct that situation, with a series of articles relating specific material to Agile basics. I'm starting with this blog entry about my definition of \"quality\"\u2013often quoted by not always understood. The essay is adapted from the very first chapter of How Software is Built , which in turn is adapted my the first volume of  Quality Software Management . < http://www.geraldmweinberg.com/Site/QSM_vol_1.html >       A Bug in the Family  My sister's daughter, Terra, is the only one in the family who has followed Uncle Jerry in the writer's trade. She writes fascinating books on the history of medicine, and I follow each one's progress as if it were one of my own. For that reason, I was terribly distressed when her first book, Disease in the Popular American Press , came out with a number of gross typographical errors in which whole segments of text disappeared. I was even more distressed to discover that those errors were caused by an error in the word processing software she used\u2013CozyWrite, published by one of my clients, the MiniCozy Software Company. Terra asked me to discuss the matter with MiniCozy on my next visit. I located the project manager for CozyWrite, and he acknowledged the existence of the error. \"It's a rare bug,\" he said. \"I wouldn't say so,\" I countered. \"I found over twenty-five instances in her book.\" \"But it would only happen in a book-sized project. Out of over 100,000 customers, we probably didn't have 10 who undertook a project of that size as a single file.\" \"But my niece noticed. It was her first book, and she was devastated.\" \"Naturally I'm sorry for her, but it wouldn't have made any sense for us to try to fix the bug for 10 customers.\" \"Why not? You advertise that CozyWrite handles book-sized projects.\" \"We tried to do that, but the features didn't work. Eventually, we'll probably fix them, but for now, chances are we would introduce a worse bug\u2013one that would affect hundreds or thousands of customers. I believe we did the right thing.\" As I listened to this project manager, I found myself caught in an emotional trap. As software consultant to MiniCozy, I had to agree, but as uncle to an author, I was violently opposed to his line of reasoning. If someone at that moment had asked me, \"Is CozyWrite a quality product?\" I would have been tongue-tied. How would you have answered?   The Relativity of Quality  The reason for my dilemma lies in the relativity of quality . As the MiniCozy story crisply illustrates, what is adequate quality to one person may be inadequate quality to another.   Finding the relativity  If you examine various definitions of quality, you will always find this relativity. You may have to examine with care, though, for the relativity is often hidden, or at best, implicit. Take for example Crosby's definition: \"Quality is meeting requirements.\" Unless your requirements come directly from heaven (as some developers seem to think), a more precise statement would be: \"Quality is meeting  some person's  requirements.\" For each different person, the same product will generally have different \"quality,\" as in the case of my niece's word processor. My MiniCozy dilemma is resolved once I recognize that a. To Terra, the people involved were her readers. b. To MiniCozy's project manager, the people involved were (the majority of) his customers.   Who was that masked man?  In short, quality does not exist in a non-human vacuum, but every statement about quality is a statement about some person(s) . That statement may be explicit or implicit. Most often, the \"who\" is implicit, and statements about quality sound like something Moses brought down from Mount Sinai on a stone tablet. That's why so many discussions of software quality are unproductive: It's my stone tablet versus your Golden Calf. When we encompass the relativity of quality, we have a tool to make those discussions more fruitful. Each time somebody asserts a definition of software quality, we simply ask,  \"Who is the person behind that statement about quality.\"  Using this heuristic, let's consider a few familiar but often conflicting ideas about what constitutes software quality:   a. \"Zero defects is high quality.\"  1. to a user such as a surgeon whose work would be disturbed by those defects 2. to a manager who would be criticized for those defects   b. \"Lots of features is high quality.\"  1. to users whose work can use those features\u2013if they know about them 2. to marketers who believe that features sell products   c. \"Elegant coding is high quality.\"  1. to developers who place a high value on the opinions of their peers 2. to professors of computer science who enjoy elegance   d. \"High performance is high quality.\"  1. to users whose work taxes the capacity of their machines 2. to salespeople who have to submit their products to benchmarks   e. \"Low development cost is high quality.\"  1. to customers who wish to buy thousands of copies of the software 2. to project managers who are on tight budgets   f. \"Rapid development is high quality.\"  1. to users whose work is waiting for the software 2. to marketers who want to colonize a market before the competitors can get in   g. \"User-friendliness is high quality.\"  1. to users who spend 8 hours a day sitting in front of a screen using the software 2. to users who can't remember interface details from one use to the next   The Political Dilemma  Recognizing the relativity of quality often resolves the semantic dilemma. This is a monumental contribution, but it still does not resolve the political dilemma:  More quality for one person may mean less quality for another.  For instance, if our goal were \"total quality,\" we'd have to do a summation over all relevant people. Thus, this \"total quality\" effort would have to start with a comprehensive requirements process that identifies and involves all relevant people. Then, for each design, for each software engineering approach, we would have to assign a quality measure for each person. Summing these measures would then yield the total quality for each different approach. In practice, of course, no software development project ever uses such an elaborate process. Instead, most people are eliminated by a prior process that decides: Whose opinion of quality is to count when making decisions? For instance, the project manager at MiniCozy decided, without hearing arguments from Terra, that her opinion carried minuscule weight in his \"software engineering\" decision. From this case, we see that software engineering is not a democratic business. Nor, unfortunately, is it a rational business, for these decisions about \"who counts\" are generally made on an emotional basis.   Quality Is Value To Some Person  The political/emotional dimension of quality is made evident by a somewhat different definition of quality. The idea of \"requirements\" is a bit too innocent to be useful in this early stage, because it says nothing about whose requirements count the most. A more workable definition would be this:  \"Quality is value to some person.\"  By \"value,\" I mean, \"What are people willing to pay (do) to have their requirements met.\" Suppose, for instance, that Terra were not my niece, but the niece of the president of the MiniCozy Software Company. Knowing MiniCozy's president's reputation for impulsive emotional action, the project manager might have defined \"quality\" of the word processor differently. In that case, Terra's opinion would have been given high weight in the decision about which faults to repair.   The Impact on Agile Practices  In short, the definition of \"quality\" is always political and emotional , because it always involves a series of decisions about whose opinions count, and how much they count relative to one another. Of course, much of the time these political/emotional decisions\u2013like all important political/emotional decisions\u2013are hidden from public view. Most of us software people like to appear rational. That's why very few people appreciate the impact of this definition of quality on the Agile approaches. What makes our task even more difficult is that most of the time these decisions are hidden even from the conscious minds of the persons who make them. That's why one of the most important actions of an Agile team is bringing such decisions into consciousness, if not always into public awareness. And that's why development teams working with an open process (like Agile) are more likely to arrive at a more sensible definition of quality than one developer working alone. To me, I don't consider Agile any team with even one secret component. Customer support is another emphasis in Agile processes, and this definition of quality guides the selection of the \"customers.\" To put it succinctly, the \"customer\" must actively represent all of the significant definitions of \"quality.\" Any missing component of quality may very likely lead to a product that's deficient in that aspect of quality. As a consultant to supposedly Agile teams, I always examine whether or not they have active participation of a suitable representation of diverse views of their product's quality. If they tell me, \"We can be more agile if we don't have to bother satisfying so many people, then they may indeed by agile, but they're definitely not Agile."], "link": "http://secretsofconsulting.blogspot.com/feeds/8243344753554979742/comments/default", "bloglinks": {}, "links": {"http://4.blogspot.com/": 1, "http://www.geraldmweinberg.com/": 3}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["I am a music box. Though I embody the finest science and craft, made entirely by hand, I exist only to create beauty and pleasure. I can be played closed, as a mystery. I can be played open, when every part is open for inspection. Yet though every part can be seen, I cannot be understood as a mechanical object. I need the touch of human fingers to wind me with energy, adjust my gears, and start my music. Without human contact, I am merely a lifeless decoration."], "link": "http://secretsofconsulting.blogspot.com/feeds/1405669723153471895/comments/default", "bloglinks": {}, "links": {}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["We all make mistakes.   We all try to eliminate mistakes.   But sometimes, mistakes are our best friends.   One of most common mistakes is arrogance\u2014the belief that we know what we're doing. When we're arrogant, we think our knowledge is complete\u2014particularly in our own work.   Here's an example. Johanna Rothman asked me to write a foreword for her terrific book, Hiring the Best . As I read the book, I realized that Johanna had made a horrible mistake in marketing the book. She said the book was for managers who do the hiring, but what she failed to see about her own work was an even bigger audience: people trying to be hired. Fortunately, that mistake, that omission, could be easily corrected.   Of course, I never make such mistakes, right?   Wrong!   I recently began publishing a series of books on Experiential Learning . In response to the second volume, Jason Reid wrote the following letter:   I participated in PSL this past May. ... I recently had the opportunity to conduct \"project debriefs\" with several coworkers. We didn't have a standard at my company for how these meetings should run, so I was free to design the agendas. I don't recall what sparked the connection, but I eventually thought of your book, Experiential Learning 2: Invention , and of some of the knowledge invention activities we performed during PSL. I figured that those activities were designed to assist learning after hands-on experiences, and I thought, \"What's more hands-on than actual work?\" So I determined that my goal for the debriefs would be to help my coworkers learn from their experiences on their projects, and your book was a gold mine for questions to ask them.   Each meeting went very well and I enjoyed them immensely. I lost count of the number of times I heard, \"That's a great question!\" from the person I was helping. While the mechanics of the meetings were limited to one-on-one discussion, I look forward to incorporating more of the activities in your book into future debriefs.   I now have a bruise on my forehead, from slapping myself when I read Jason's letter. He had caught me making the same mistake I had caught Johanna making: underestimating the market for my own book.   Fortunately, from now on, I will remind people that Experiential Learning 2 : Invention is \"a gold mine\" of questions and exercises useful for conducting retrospectives. If that leads people to read the book, then I have managed to profit from a friend pointing out my arrogance and stupidity.   Are your friends helpful in this way?"], "link": "http://secretsofconsulting.blogspot.com/feeds/4379000102585764478/comments/default", "bloglinks": {}, "links": {"http://www.jrothman.com/": 1, "http://leanpub.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["Well, I'm writing my blog again, now that my book, Experiential Learning: Inventing , is now published on LeanPub.com. But after only one week, the feedback has started, and I feel a need to respond. My friend and colleague, Markus Gaertner was the first to write, all the way from Germany:  \"I just started reading your second book on Experiential Learning. One thing that confused me is in the chapter Design and Development Inventions where you make a positive reference to agile processes. This confused me since you usually write in a timeless manner, and I don't consider agile processes to be timeless in--say--20 years or so.\"  The passage in question read like this: -----  Sometimes the specification turns on the meaning of a word, such as \u201csupport,\u201d or \u201cheight.\u201d The trouble is, you don\u2019t know in advance which word it turns on ... that depends on the design possibilities. Therefore, an organization or process that discourages back-and-forth communication will generally do a poorer job of designing things. That\u2019s one of the reasons agile processes can work so well. ----- My first reaction to Markus's comment was that he was exactly right. My half-century of experience tells me that in 20 years, the \"agile\" craze will have petered out, just like so many before it--structured programming, HIPO, Nassi-Schneiderman charts, and dozens of others. So most readers in 2030 or so, won't even recognize the word \"agile\" as a code. Yet forgetting the code doesn't mean that \"agile\" principles will have disappeared as good programming practices. I was specifically referring to two sentences from the Agile Manifesto (you know, that document that a dozen of the guys worked out a decade ago, without the help of any women):  1. \"Business people and developers must work together daily throughout the project.\"  2. \"The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.\"  That's what I meant by \"back-and-forth communication,\" and I believe those sentences will still describe effective programming practice a generation from now (as they did a generation ago, and two generations ago). So Markus is right. There's no reason for me to date my book by using the code word, \"agile.\" I published my Experiential Learning series with LeanPub.com so it could be a dynamic e-book, changing as the world changed and I learned to be smarter. So, I will update the next version with something like Markus's suggested wording: \"That's one of the reasons that software development works so well with bi-directional communication in place.\"  (I'll also make a batch of changes suggested by Dani--who didn't even recognize the code word, \"agile,\" in 2012--plus whatever other wisdom arrives from my readers.) But, as usual, I'm not finished responding to Markus and Dani. In a later blog, I'm going to continue with some thoughts about what is \"agile\" really."], "link": "http://secretsofconsulting.blogspot.com/feeds/5631583544931952177/comments/default", "bloglinks": {}, "links": {"http://leanpub.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["Regular readers of this blog have probably noticed a reduction in my posting frequency in recent weeks. Perhaps you'll all forgive me when I tell you I've been distracted from blogging by finishing volume 2 of my Experiential Learning series, called Inventing or Invention, I can never remember which. Anyway, it says \"invention\" on the cover, and can be found here . Anyway, it's about the part of experiential learning that comes after the experience--the part where we invent the learnings we've found during the experience. It's what converts an ordinary experience into a learning experience. If you're teaching experientially, you'll want to learn how to facilitate invention--but that's not all. The book is full of techniques I personally use to extract learnings from all my experiences, whether in a class or in life. As we say in life-learning, \"First you pay the tuition, then the learning is optional.\" If you want to take advantage of the learning you've paid for with your life, Experiential Learning: Volume 2, Invention is the book for you."], "link": "http://secretsofconsulting.blogspot.com/feeds/172504674938333299/comments/default", "bloglinks": {}, "links": {"http://leanpub.com/": 2}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["A Correspondent Writes I have taken over a group of folks that I need to shape into a team. There are many issues including getting developers to write unit tests consistently, training my test engineers and deploying more test automation. More worrisome is that they do not want to change out of a poor pattern of behaviors. I suppose since they hit their delivery schedule they think things are OK. On the plus side, they say they are committed to quality.  What would you look more into? Tackle first? Is there an inspiring story I might share at my upcoming team building event to highlight the need to change?  Any advice is welcome and greatly appreciated.  Jerry Replies Well, you're certainly experiencing a classical problem, one I've described in a number of places, including my Becoming a Technical Leader (in terms of my pinball expertise). They're stuck on a plateau, and it's going to take some skilled leadership to move them up to the next level.  The first thing you have to do is create a safe environment that will protect them while they are changing to new practices. Although those practices must be designed to improve the quality of their work, there is no doubt that at first they will slow them down and probably hurt quality. That's why they need protection.  Start small, with some step that ideally they will choose from a list you develop together. Choose something that's as sure to succeed as possible, and it will help them in some obvious way. In other words, you want to start with a guaranteed success, and then build up from there.   Beyond that, I suggest you read my books on change  - BECOMING A CHANGE ARTIST - CHANGE: Planned & Unplanned - Change Done Well"], "link": "http://secretsofconsulting.blogspot.com/feeds/1442435175264943778/comments/default", "bloglinks": {}, "links": {"http://4.blogspot.com/": 1, "http://1.blogspot.com/": 2, "http://www.geraldmweinberg.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["I recently received an email containing the following paragraph: \"A tester peer of mine here in town recently told me a great story of how your book, Perfect Software , helped save one of his tester's jobs. He gave the book to his Manager and it changed the manager's mind about testing and the need for good testers. I've encouraged my peer to contact you with the story in more detail and will keep doing that.\"   I love to hear stories of how my writing is influencing real people to change their world (for the better, I hope). I specifically intended Perfect Software and Other Illusions about Testing for the purpose of educating managers and others who require a better understanding of software testing if they are to do a better job.  Do You Have a Story? I'd love to hear your story of how one of my writings helped you do a better job. I'd even like to hear your story of how one of my writings led you to do a worse job. I need this kind of feedback if I'm to do a better job myself.  In fact, I'd even like to hear stories about how other authors' writings helped or hindered your work. Or, even better, about writings that helped improve your life. Or made it worse.  I suppose I should give an example. Okay, like many smart people, I used to use my intelligence to think of reasons I should be miserable. That kind of thinking made me a rather miserable person. Then I read Bertrand Russell's little book, The Conquest of Happiness . Russell's words showed me that I could use my intelligence to be happy, not miserable. They changed my life.  They say that the pen is mightier than the sword. Well, we don't use pens much any more (or swords, for that matter), but there's still plenty of power in our keyboards. With all that power, we need to know if we're using it to people stronger or to lop off their heads.  So, let me hear from you, and I'll try to pass your feedback on to the whole world of writers."], "link": "http://secretsofconsulting.blogspot.com/feeds/2190159256152193527/comments/default", "bloglinks": {}, "links": {"http://3.blogspot.com/": 3, "http://www.geraldmweinberg.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["Regular readers of this blog may have noticed that I slow down from time to time, which may signify that either (a) I'm sick or (b) I'm finishing a project. This time, it was a bit of both: (a) when I fell on my head and (b) when I was finishing a new book\u2014Experiential Learning: Beginning. If you are a writer, you may find my publication method interesting: LeanPub.com .   Those of you who teach should find my newest book interesting.    The Title is Experiential Learning: Beginning .  Experiential Learning the first volume in a series that collects and organizes more than fifty years of experience by many learning leaders using the experiential method to aid students in a variety of subjects, including, at least the following subjects:  * software development * software testing * anthropology * physics * writing * design * project management * education * medicine * business administration * architecture * biology * chemistry * communication * economics * environmental science * family therapy * computer science   Where Can The Series Be Helpful? At present, the Experiential Learning series is planned for three volumes. The first volume\u2014Beginning\u2014concerns getting started: starting using the experiential method, starting to design exercises, and getting a particular exercise off to a good start.  It should be particularly helpful for short classes\u2014a day or two, or even an hour or two\u2014though it could be for starting to use experiential parts of a longer workshop consisting of both short and long experiential pieces as well as more traditional learning models.  The second volume\u2014Class\u2014guides the reader in constructing, delivering, and\u2014most importantly\u2014debriefing classes consisting entirely (or almost entirely) of one or more experiential exercises.  Volume Three\u2014Simulations\u2014takes up the possibilities for longer classes and longer exercises.  What Can Be Learned from the Series? At the beginning of our classes, we generally gather the students' hopes for what will happen as a result of the class. (You can read more about this practice in the section called Requirements Gathering.) We haven't figured out how to gather requirements from each reader of a book, but we do offer a class about experiential learning, and from the participants in these classes, we've developed some ideas of what most of our students want.  So, what can you hope to gain from reading these volumes? We've made a list of hopes distilled from these classes:  Learn practical knowledge about designing experiential exercises. Expand my understanding of what participants experience during experiential exercises. Unlearn things that interfere with effective experiential learning. Help to expand my \"big picture\" about this topic. Link to other knowledge to help increase my effectiveness. Figure out if students are really learning. We've used this list to guide us in deciding what to include, and as with any experiential exercise, this book may lead its readers to many additional lessons we never planned for them.  Experiential Exercises In the final analysis, a book about the effectiveness of experiential exercises may seem to be a paradox, but there's a learning there, too.  We are not claiming that the experiential method is the only way to learn. We're not even claiming that experiential exercises always teach anything worthwhile, or that students never take away erroneous or vacuous learnings. We're merely saying that we have found this approach to be one more tool for our teaching repertoire\u2014a tool that has been strikingly effective for us as both teachers and learners. We hope it turns out that way for you, as well."], "link": "http://secretsofconsulting.blogspot.com/feeds/2514743654850865561/comments/default", "bloglinks": {}, "links": {"http://leanpub.com/": 2, "http://1.blogspot.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["As promised, here's the rest of Michael Mahlberg's interview:   Michael: One of your books that comes to mind after experiencing the learnings of the AYE is titled The Psychology of Computer Programming . How do you see the role of psychology in todays software industry?  Jerry: Quite simple, software is an industry based on mental processes, not physical ones. Our products are not made of metal or plastic, but are entirely mental constructs. Psychology is the study of our \"production facility\"--our brains. How we think and feel form the only true \"software science.\"  Michael: You have written non-fiction books for decades and in this century you have started to write more fiction than non-fiction - what is the appeal of writing fiction for you?   Jerry: I see fiction as a natural extension of all my work. Stories allow me to create appealing and memorable lessons about life in general, but software thinking in particular. For many readers, stories are the best way to learn, other than through expensive personal life lessons (which often don't teach anything because they're too entangled with personal life issues. Fiction stories give some readers the \"distance\" they need to see the lessons, while offering the \"closeness\" to make the reading simulate true life.  Also, for me personally, fiction writing is a new challenge, the kind of challenge I've always sought to further my lifelong learning.  Michael: In the early days of your career computers and software were used only on very few, very special projects - the Mercury Project, where you played a vital role, comes to mind - whereas nowadays computers are everywhere and even for the most mundane tasks software gets written. How would you say that this has changed the way our profession is conducted?   Jerry: First of all, nowadays, 99% of software developers are not \"professionals.\" Still, the remaining 1% constitue a far larger population of professionals than we had when I started, more than 50 years ago. Those days, I basically knew every software pro in the USA, if not the world. So, the larger group of professionals gives us the opportunity to create a much more powerful community for learning and sharing (as long as we are able to distinguish the professionals from the amateurs).  Michael: Between writing novels, preparing conferences, conducting workshops - do you still find time to do consulting work? And if so, could you tell us a bit about current trends in software development as you perceive them in your consulting work?   Jerry: Consulting is the essential third leg of my business. From consulting, I learn what is really going on among the best organizations (the worst would never voluntarily hire a consultant, though I've met a few who were involved in non-performance lawsuits). From my consulting, I learn what I should be teaching (the second leg). And, through my teaching, I learn how to offer the significant lessons in the most effective way, and these ways are what leads to my books.   As far as current trends are concerned, I'm not too interested. Why? Because \"current trends\" have almost always turned into fads. What I seek is clients who are actually using some of the important things we've learned in the past 50 years. There aren't many of those, but the organizations who do them (rather than talk about the latest fads), are consistently the best.  Michael: Thank you very much for this interview!  Jerry: And thanks for the great questions. You've done a great job, Michael. ------------------- end of interview ----------------------------------"], "link": "http://secretsofconsulting.blogspot.com/feeds/2009204903943089953/comments/default", "bloglinks": {}, "links": {"http://3.blogspot.com/": 2, "http://1.blogspot.com/": 3, "http://www.geraldmweinberg.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["At November's AYE Conference, participant Michael Mahlberg asked if he could interview me for a German magazine. The interview and his article about AYE have now been published, but in German, so I thought I'd make the English version available to my readers whose German language skills are no better than mine. It's a long interview, so I'll probably use several blog entries to cover it all.  Michael: I thank you very much that you take the time for this Interview. You just came back from the 12th AYE - Amplifying Your Effectiveness - conference if I have counted correctly.  Looking back on twelve years of AYE Conferences, why do you think that this unusual format proved so successful and durable?  Jerry: Several reasons come to mind, in no particular order: 1. We designed the conference in reaction to a number of conferences we hosts had just attended. We kept what we thought was good (such as, a few interactive sessions; some rare meal-time interaction; comfortable accommodations)  2. We discarded what we thought was bad (such as: overcrowding that really eliminated participant-participant interaction; segregation of presenters from participants; non-interactive presentations, such as power-point reading by presenters; a few big-name presenters who thought they knew all there was to know; amateur presenters who simply didn't know how to handle crowds [which were too big, anyway]; expensive accommodations; irrelevant activities such as nightclub events, stand-up comedians, shopping trips; third-party event planners who did not know the audience and/or topics).  3. We limited participation to 75, which after experimentation proved to be a number that kept down overcrowding and maximized interaction opportunities, while providing sufficient energy to run all sorts of experiential sessions.  4. We forbade power-point altogether, and required every session to be experiential.  5. We trained ourselves to be good designers and presenters of experiential sessions.  6. We kept prices low so independents would be able to come and add their viewpoint to the interactions.  7. We were not trying to make a pile of money, but instead were attempting to show what a conference would be like if we shed all the commercialism that has crept ahead of the espoused purposes of other conferences.  All in all, we've tried to do unto others as we would have others do unto us\u2014and not just \"unto\" others, but with the full participation of others. ________________end of first question\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013  Note: The 2012 AYE Conference will be held in Raleigh, North Carolina, Sunday, November 4 through Thursday November 8, 2012. You can read details at http://www.ayeconference.com"], "link": "http://secretsofconsulting.blogspot.com/feeds/6173280314536895673/comments/default", "bloglinks": {}, "links": {"http://www.ayeconference.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["Perhaps the nicest feature of WIGGLE charts is the way they can be used with just about anybody's diagrammatic technique. The following figure shows a Hierarchic WIGGLE, or a WIGGLE Visual Table of Contents (WVTOC) for use with a HIPO system. In this application of the WIGGLE the overall size of the boxes can be used to indicate (roughly) how big an effort we anticipate in building this box. Alternatively, it can be used to approximate how much execution time or other resource we expect to be consumed here.      A WIGGLE visual table of contents from a HIPO system (Each box has input on left end, output on right.)   Figure 27 shows a Nassi-Shneiderman WIGGLE. In this chart, the size of the wiggles in the diagram indicates roughly how uncertain we are of the particular part of the design.   Figure 27. A Nassi-Shneiderman WIGGLE  The vertical loop wiggle is quite small, perhaps indicating we're not sure if the loop is to be done N or N+ 1 times. Similarly, the slanted wiggles on the decision are small, indicating perhaps we don't yet know just where the \"equal\" case will go. But the large wiggles dividing the right branch of the decision into three boxes are very large, indicating great uncertainty about the functions to be performed here. All these conventions may be applied to sides of boxes, regardless of the shape of the box, as well as to arrows or other lines connecting boxes. Each of these charts should be sufficiently \"clear\"\u2014as sketches\u2014to readers who can read the original, unwiggled, chart. Just for completeness, Figure 28 shows a key to the use of the WIGGLE. Using this figure, you should be able to begin sketching your favorite design pictures using the WIGGLE, even if you're still in love with good old flowcharts.   Figure 28. The WIGGLE system condensed to a few simple rules applicable to any graphic scheme       Source  This material on WIGGLE charts is adapted from my book, Rethinking Systems Analysis and Design ."], "link": "http://secretsofconsulting.blogspot.com/feeds/2178971146837875979/comments/default", "bloglinks": {}, "links": {"http://2.blogspot.com/": 1, "http://www.geraldmweinberg.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["Today's idea is embodied in a medal established in Austria. According to Wikipedia, the military order of Maria Theresa. \"It was specifically given for 'successful military acts of essential impact to a campaign that were undertaken on [the officer's] own initiative, and might have been omitted by an honorable officer without reproach.' This gave rise to a popular myth that it was awarded for (successfully) acting against an explicit order.\"    The Order of Maria Theresa is a marvel of bureaucratic invention, but it's not unique. Every successful organization\u2014nation, business, or neighborhood kite club\u2014has rules for breaking its own rules. The only unusual aspect of the Order of Maria Theresa is that the rule was written down and officially recognized.   When Jefferson was drafting the United States Constitution, he naturally wrote an article concerning amendments. But when asked to write something granting the people the right to throw out the Constitution entirely and start afresh, Jefferson refused. He argued\u2014correctly, I think\u2014that the people had such a right whether or not it was written in the Constitution. It was a right superseding any government and any written rules of government. It was, in effect, a tautology, for without the consent of the governed, there is no government. A shadow, perhaps, but no government.   The same is true in any modern bureaucracy. Rules are not made to be broken, but neither are they made to be not broken. Rules are made so that the organization operates more effectively. The rule above all other rules is \"Do what is necessary to operate effectively.\" You ultimately get punished for not operating effectively, but not for breaking the rules.    It seems to me the problem with bureaucracies is this: the obverse side of this coin isn't so shiny. If you obey the rules and things turn out badly, you don't get punished. In war, the problem may be easier, because if things turn out badly you may be dead and not have to face the Empress. In the XYZ Pork and Bean Factory, your life is not usually at risk\u2014even if your customers are taking their lives in their hands every time they pick up a pork fork.   I'd be interested in pursuing the biographies of Maria Theresa winners after they won the medal. I know that in the United States\u2014where the Medal of Honor is often given under similar circumstances\u2014many winners wind up, as civilians, trying to get a few cents for their medals in a pawn shop. Even medal-winning is a short-lived glory in the best of circumstances.  When I started to write this essay, I hoped to conclude by recommending each organization install an Order of Maria Theresa to counteract the conformist tendencies infecting even the best-managed organizations. But as my thoughts developed, I realized medals are not the answer. If you're on top of a large organizational pyramid and want protection from your own mistaken orders, you're going to have to work harder than Maria Theresa. You can start by ensuring nobody is punished merely for discussing the merits of a particular order of yours. Even if you don't punish discussion, you'll need a long time to overcome the fears people have learned throughout their long careers in other organizations. But the long wait will be worth it, for then you will be relieved of the burden of perfection\u2014a burden no person and no nation can long endure.   You might think your next step would be to encourage people to disobey orders they think are wrong or foolish, but they won't need any encouragement if the climate for talking is right. At least some of them won't, and the others will be watching to see what happens to the pioneers.  So your second problem comes when someone disobeys\u2014and fails! Now you have the perfect opportunity to play \"I told you so,\" but if you do, there won't be any further games. Instead, you must convince the person to tell you why the order was disobeyed. It might have been a stupid order, destined to fail even if it had been carried out. Or it might have been misunderstood\u2014a most likely alternative.  And once you've understood the reasons for the disobedience, drop the whole matter! Everyone is entitled to make a mistake now and then. If people never make mistakes, it means they're never trying and never thinking, which is the most horrible fate a bureaucracy can contemplate. Only if the same person disobeys orders over and over will you have to take any action\u2014and by then your course of action should be obvious.   But won't the repeated failures create a disaster? Perhaps, but then you can take comfort from the Austrian motto: The situation is hopeless but not serious.   In the programming business, we have the comfort of a large cushion of safety in what we do. We make many mistakes, but we have procedures designed to detect them and remove them before they cause too much harm. If those procedures are working well, it gives us some breathing room in which to make mistakes\u2014the same room we need in order to learn. In such situations, we shouldn't need medals to keep us disobeying foolish orders.    This essay is adapted from a chapter in the book,  Understanding the Professional Programmer . The book is actually a series of such essays, all aimed at the often difficult task mentioned in the title."], "link": "http://secretsofconsulting.blogspot.com/feeds/7920808686774832923/comments/default", "bloglinks": {}, "links": {"http://4.blogspot.com/": 1, "http://2.blogspot.com/": 2, "http://www2.blogger.com/": 1, "http://1.blogspot.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["On a recent \ufb02ight out of Chicago, I found myself seated next to Jack, a IT manager in a medium-sized company. Jack was on his way to interview for the IT manager in a larger corporation. He explained that he had reached the limit of his present job, and his only chance to advance himself was with a company with a larger organization.  \"Why don't you stay with your present organisation and move into general management?\" I asked.   \"That was my goal when I took this job three years ago,\" Jack said, \"but there's not a chance. The president of the company sees me as a technical specialist, lacking skills to become a 'real' executive. So I'm looking for someplace else, where I'll be appreciated.\"   \"But three years isn't a very long time with one company,\" I said. \"Perhaps they don't feel you've had enough time to prove yourself to them.\"  \"I've done a lot for them in three years, but they don't appreciate how much work it takes to manage in the present crisis environment.\"   \"What do you mean?\"   Before I could hear his answer, one of the cabin attendants came by to ask for our choices for lunch. She beckoned the other attendant to come over and refresh our drinks. By the time all the fuss was over, we had our lunches, but I had forgotten their was an unanswered question still suspended between us. But Jack hadn't forgotten. He seemed eager to dump his woes on me while I picked at my sirloin tips.   \"Technology is changing every month, and I can't \ufb01nd good people. It's impossible to keep a technical staff together long enough to make improvements in present systems, let alone keep up with the new technology. Junior programmers demand in\ufb02ated salaries, and if they don't get them, they jump ship to some other company that is desperate enough to pay them. And senior programmers ...\" He stopped talking and unrolled his cutlery.   \"What about senior programmers?\" I asked.   \"Why talk about it?\" Jack said bitterly. \"There's no sense even thinking about hiring a senior person, let alone starting to search for one. You give them the moon, and a year later they want the sun. They seem to think they could get rid of us managers and run the place without us.\"   I could see why Jack was so bitter. In effect, he was being squeezed from both top and bottom. His management did not want to let him advance, and he felt the pressure of his own employees trying to advance up from below. Still, I had a hard time feeling sorry for Jack. I'm always suspicious of managers who speak badly of their employees.   I almost told Jack the Army saying: \"There are no bad soldiers, only bad of\ufb01cers.\" Instead, I dipped the tiny spoon into my dessert custard. I had a feeling Jack wouldn't appreciate Army wisdom.   Of course Jack has problems with employees. But a manager's iob is to deal with such problems, so if Jack complains about bad people, he's telling me he's not doing his job. Jack says his people were leaving for better salaries, but salaries are roughly tenth on the list of reasons technical people switch jobs. The first reason they leave jobs is poor management. Probably the second and third reasons, too.   Jack himself was leaving his job because his own management did not understand him. They would not give him the opportunity he thought he deserved, nor would they guide him to the self-improvement he needed to advance his career.   Jack complained that his bosses never supported his requests for management training, but when I asked him about training his own people, he said: \"Why invest in training them? They are going to leave before I get a return on my investment. My staff is turning over at a rate of 25 per cent a year. Technical people have no company loyalty whatsoever.\"   By changing jobs every three years, Jack himself was \"turning over\" at a rate of 33 per cent a year. His management, knowing that \"technical people have no company loyalty,\" refused to take Jack's own executive aspirations seriously.   Jack, like so many IT managers, was locked in a \"disloyalty cycle.\" His management did not take him seriously as a person, so he was not loyal to them. Because he was not loyal to them, they refused to take him seriously as a person. In his own career, Jack was modelling the problem he was having with his own staff.   Not every IT manager has Jack's problems. Some have broken the \"disloyalty cycle,\" or stayed out of it in the \ufb01rst place. They are not panicked by the pace of technology, but insist on developing their own employees.   They may hire experienced people, but do not try to \"buy\" instant expertise. They know that the expertise they buy is more likely to be bought again by someone else. They have excellent technical staffs, with low turnover, but their pay scales are merely competitive, not exceptional.   Their employees tend to be loyal to their companies because they know their managers are also loyal to their companies. One of my clients has a IT manager who budgets a minimum of 20 days per year of training per employee, and woe to one of his managers who fails to reach that minimum for each employee. He does not \"waste\" this investment because most employees want to stay at a company that actively demonstrates loyalty to them. Sure he has some turnover, but around six per cent, rather than Jack's 25 per cent. Moreover, he tends to turn over the people he would rather lose, rather than the ones he would rather retain.   IT managers like Jack cannot have it both ways. If they want to become \"real\" executives, they will have to start acting like real executives. That means taking responsibility, rather than blaming their employees. It means developing good people, not trying to pirate them from other companies and then griping about how other companies are pirating from them.   But Jack does not have time to develop his employees. If he does not get promoted in three years, he will not be around to reap the bene\ufb01ts of his investment in them. He will be out looking for a new job that will show him more \"loyalty.\"   \"Real\" executives take the long view. They are the kind of people who, at age 60, can be found planting trees. IT managers who think that fast moving technology requires short-term quick \ufb01xes are stuck in a middle management mentality. They will never become real executives.     Managing Yourself and Others"], "link": "http://secretsofconsulting.blogspot.com/feeds/4081176823377381260/comments/default", "bloglinks": {}, "links": {"http://1.blogspot.com/": 1, "http://www.geraldmweinberg.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["I've been slow posting on this blog for the past few weeks, and now you know why:  I've been finishing the next novel in my Residue Class Mystery Series:  Where There\u2019s a Will There\u2019s a Murder      You can buy it now for Kindle, Nook, or at Smashwords for any other reader format. Just click the link above.   Note on PSL  Problem Solving Leadership Workshop for May is almost full. We are considering a session for the overflow, so if you want in, get in touch with me right away. Jerry Weinberg"], "link": "http://secretsofconsulting.blogspot.com/feeds/1218410059812398224/comments/default", "bloglinks": {}, "links": {"http://4.blogspot.com/": 1, "http://t.co/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["Wiggle Charts (Part 2) Perhaps the nicest feature of WIGGLE charts is the way they can be used with just about anybody's diagrammatic technique.  The following figure shows a Hierarchic WIGGLE, or a WIGGLE Visual Table of Contents (WVTOC) for use with a HIPO system. In this application of the WIGGLE, the overall size of the boxes can be used to indicate (roughly) how big an effort we anticipate in building this box. Alternatively, it can be used to approximate how much execution time or other resource we expect to be consumed here.      A WIGGLE visual table of contents from a HIPO system (Each box has input on left end, output on right.)   The next figure shows a Nassi-Shneiderman WIGGLE. In this chart, the size of the wiggles in the diagram indicates roughly how uncertain we are of the particular part of the design.        A Nassi-Shneiderman WIGGLE  The vertical loop wiggle is quite small, perhaps indicating we're not sure if the loop is to be done N or N+ 1 times. Similarly, the slanted wiggles on the decision are small, indicating perhaps we don't yet know just where the \"equal\" case will go. But the large wiggles dividing the right branch of the decision into three boxes are very large, indicating great uncertainty about the functions to be performed here.   All these conventions may be applied to sides of boxes, regardless of the shape of the box, as well as to arrows or other lines connecting boxes. Each of these charts should be sufficiently \"clear\"\u2014as sketches\u2014to readers who can read the original, unwiggled, chart.   Just for completeness, the next figure shows a key to the use of the WIGGLE. Using this figure, you should be able to begin sketching your favorite design pictures using the WIGGLE, even if you're still in love with good old flowcharts.      The WIGGLE system condensed to a few simple rules applicable to any graphic scheme     Source  This material is adapted from my book, Rethinking Systems Analysis and Design ."], "link": "http://secretsofconsulting.blogspot.com/feeds/1033703024520059098/comments/default", "bloglinks": {}, "links": {"http://4.blogspot.com/": 1, "http://2.blogspot.com/": 2, "http://1.blogspot.com/": 1, "http://www.geraldmweinberg.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["This year I created a Christmas present for all my faithful readers. It's about one of the characters in my series of novels, The Stringers\u2013Ember, a blind girl with extraordinary powers. The story is titled \"The Blind Warrior,\" and it's free. I wanted to put the story free on Amazon.com, but Amazon took a long time to make it a free story. They finally did, but now it's too late for Christmas, so I'm doing it anyway. To obtain your copy of The Blind Warrior, go to smashwords.com. You will find the story at this address: http://www.smashwords.com/books/view/106977?ref=JerryWeinberg Or, on Kindle, it's at    http://www.amazon.com/dp/B006CDQEYK  And it's even on Barnes and Noble, for you Nooknicks:  http://www.barnesandnoble.com/w/the-blind-warrior-gerald-m-weinberg/1107956526?ean=2940032888451 It's free of all charges, and you can download the story in any format you need (Smashwords has 'em all, or in more than one format). You can read the story on your computer, or you can transfer it to any other device. Of course I have an ulterior motive. I hope you will like the story so much that you will want to read more about Ember and her Stringer friends. Or maybe you'll write a one-or-two sentence review. Find all my books through http://www.geraldmweinberg.com , including the Stringer Series, so far."], "link": "http://secretsofconsulting.blogspot.com/feeds/1157154769066869608/comments/default", "bloglinks": {}, "links": {"http://3.blogspot.com/": 1, "http://www.smashwords.com/": 1, "http://www.geraldmweinberg.com/": 1, "http://4.blogspot.com/": 2, "http://www.amazon.com/": 1, "http://www.barnesandnoble.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["WIGGLE Charts\u2014A Sketching Tool for Designers  There's no sense being precise about something when you don't even know what you're talking about. - John von Neumann   For systems designers, it is the best of times and the worst of times. For years we muddled through with a few simple graphic tools for design and documentation\u2014flowcharts, block diagrams, and perhaps decision tables. Then came the diagram explosion, with HIPO, HIPO/DB, Warnier-Orr diagrams, Softech's SADT, Nassi-Shneiderman charts, Petri nets, Constantine structure charts and data flow diagrams, Jackson data structure diagrams, and coding schemes. And for each of these diagrams, you need only bend a line or add a symbol to become known as the inventor of yet another graphic design tool.   Although the choice is large, it is really not very wide. Each of these diagrammatic schemes shares the characteristic of precision \u2014wonderful when you know what you're talking about, but time-consuming and thought-stifling when you don't. And, since most design work is spent thinking roughly, few of these diagrams are of much help through large parts of the design process.   In other design fields, such as architecture, the rough sketch is the most frequently used graphic device, and precise detailed drawings are rarely used at all until the creative part of the design work is finished. The rough sketch has several advantages over the precise drawing:   1. It can be drawn much faster, thus using less time.   2. It represents less investment of time, so we're not afraid to throw it away and try something else.   3. It's very roughness conveys important information about where we are in the design process.   In information processing, rough sketches have always existed, but have never been glorified by a name or by favorable publicity. Schools of architecture offer courses in sketching. The student architect who makes clear quick sketches is much admired by faculty and peers alike. It's time we learned from more mature disciplines and put sketching up on a pedestal.   For many years, I've taught a method of sketching usable with most of the diagrammatic techniques now used in information processing. Although it's been received with enthusiasm, it's never received much publicity, perhaps because:   1. It doesn't require a template.   2. It doesn't have a name.   Although I'll continue to resist the template forces, I've decided to bring the baby to life with a catchy acronym, WIGGLE Charts, for Weinberg's Ideogram for Generating Graphics Lacking Exactitude . A WIGGLE is merely a box, or block, or line, with one or more rough edges. The rough edges indicate what parts represented by the box or line are imprecisely known. For instance, the following figure is a sketch of a system using a block diagram form     A WIGGLE block diagram  Each box represents input coming from the left, processing inside, and output going to the right. Box 1 has a straight line at its left side, indicating the input to Box 1 is clearly defined somewhere. The right side, however, is rough, indicating we haven't decided what its output will be. As indicated in the diagram, some output will be passed to a second box. but we don't know exactly what. The top and bottom of Box 1 are rough lines, indicating we don't know exactly what this process will be.   Box 2 has undefined input and output, but its process is well known to us, and clearly delimited in scope. Perhaps we have decided to use an off-the-shelf sort, though we don't know which one, so we haven't decided upon a record format.   Box 3 takes the unknown output of Box 2 as its unknown input. By a process that's not yet well defined, it produces two outputs, one well defined and one known only roughly. Perhaps the first report is defined by legal requirements, or by input needs of another system, while the second output is an error report whose format is left open at this stage of the design process. The rough arrows between the boxes indicate we haven't yet decided how control will pass from one box to another. They could be subroutines of the same master routine, or steps in the same job, or separate steps manually coordinated. Taken together, these three WIGGLE boxes and their arrows give a sketch of the overall design we have in mind. Perhaps more important is what they don't do:   1. They don't give us or any reader an unjustified feeling of precision.   2. They don't intimidate anyone who has an idea about changing something to improve the design.   3. They haven't wasted a lot of time drawing with templates.    Perhaps the nicest feature of WIGGLE charts is the way they can be used with just about anybody's diagrammatic technique. In the second half of this blog post, we'll look at a few more examples of how WIGGLE charts can be used. (to be continued)    Source This material on WIGGLE charts is adapted from my book, Rethinking Systems Analysis and Design ."], "link": "http://secretsofconsulting.blogspot.com/feeds/4712436340994094371/comments/default", "bloglinks": {}, "links": {"http://2.blogspot.com/": 1, "http://1.blogspot.com/": 1, "http://www.geraldmweinberg.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["Today, I'm revisiting a post I put here almost exactly three years ago. At that time, I was announcing the resumption of PSL (Problem Solving Leadership Workshops). Today, I'm announcing the continuation of what has become a treasured tradition.  We're giving the next offering of the famous Problem Solving Leadership (PSL) on May 19-25, 2012, in Albuquerque, NM led by me, Esther Derby, and Johanna Rothman  The workshop's purpose is to learn and practice a consultant's most valuable asset: the ability to think and act creatively. We have designed this workshop to be practical and applicable to the modern workplace. Your problems and concerns provide a frame of reference for all the workshop activities. What you will learn . to be a leader while being a member of a team . to focus your thinking while in chaos . to make change a productive, creative event . to build truly effective teams . to design projects people really want to work on . to observe exactly what is happening . to use tools of effective communication . to handle conflict in problem solving groups The workshop provides five and a half days of intensive focus on developing your unique consulting style and abilities.  Graduates Answer: \"What Did You Learn in PSL?\"    Janet:  My PSL course made me realize that observation alone is not enough. Sometimes you need to get in and ask questions and listen to really know what's going on.   Amy:  It's interesting to reflect on this fourteen years after the fact (Sept. 1997) of what was a profound experience. My biggest observation was my tendency to pick problems that are too big to be solved\u2014or at least solved all at once or on the term initially envisioned. And my lesson was that I could turn to others and ask for help parsing the problem into resolvable packets. I'm still using that one every day. . . when I remember to step back and observe the observer observing.    Jim (who sent me the panda picture):  I took PSL in 1983 (Jacksonville, Fl.). At the time I learned a valuable lesson about myself. I have a tendency to cling to an obsolete and inappropriate technology long after it is no longer effective. Years later, taking training facilitated by amateurs (managers saving money on their training budget) I learned how important it is to have qualified trainers and good exercises.  Marjie:  I learned so many ways to help my teams back home become self - sufficient problem solvers by teaching. I became far more self-aware of my own behavior which was to just solve the problem and try to make life easier for everyone else when in fact, it was much more relaxing to give people the skills to solve their own problems (at least the tricks I learned at PSL) and to watch them do great things.  I learned that Jerry's expression, \"expect brilliance\"\u2014became the motto of my management style.  Sharon:  Big lessons, life-changing, agreed. The immediate lesson was: respond. That is, I found that sometimes, in the heat of the moment, I would listen, hear, see, take in and wait, processing the inputs. That was good. But most important was once I did that, I should give feedback, respond, react. Even if other people are responding, get into the mix and say what needs to be said.  The long-term lesson was that there is a fabulous community around us all. Jerry and others became part of an extended community that has vastly changed what work I do, how I do it, and to whom I reach for support.   Becky:  Sharon, I like your point about community! I've connected with delightful, smart and engaging people who shared a similar path through JerryWorld. Not to mention the wizards who helped lead us down the path\u2014all of those who encouraged us to be our own wizards. Gee - I hadn't thought of that.   PSL - the gift that keeps on giving.   David:  I started learning to listen to myself, instead of asking others for validation before believing myself. Something that has served me well since then, and that I'm still learning to do better.\"   Rachel:  I think I'm still unpacking lessons from PSL :)  I signed up for PSL because I was uncomfortable with taking on leadership roles. I feel happier about taking the lead nowadays. For me the key is sharing passion and vision for what's possible and make it easy for people to contribute in their own way. It's important to step back and let others shape things whilst caring how things are done and being there as support when people get stuck.  I'd love to do PSL over again and also connect up with people I met there.   Jason:  I seem to have 'aha' moments often since PSL in May 2011. A couple things stand out for me. One, how Jerry talked about having fun and learning at work. So simple, yet something I live by. If I'm not having fun or learning, I move on.  Second was observing the difference in outcomes between a controlling culture and cultivation culture. I'm also amazed at in a short period of time how many people I became very close to. It was a fantastic experience.   Zeger:  Hi all, I took PSL in May last year, and what has stuck with me, well... that's still evolving. I was an observer during the VerseWorks exercise and it struck me how much you can see and learn about what is going on in teams if you just take a step back and observe. When you're too involved, you become blind for things that are apparent to outsiders. Noticing all that going on and refraining from commenting or pointing out was quite hard. That was quite a epiphany for me.  I also became aware of the power of silence. Doing or saying nothing can also be an act of problem-solving leadership, helping the team forward. Sometimes, less is truly more. That was a pretty sobering insight too.    Jerry:  I've \"taken\" PSL many, many times, and I'm still learning lessons with every workshop. Mostly, I keep learning how many wonderfully creative people are out there, always ready to take one more step toward their full potential.  If you would like more information about in this unique workshop experience, email to  jr@jrothman.com and/or take a look at http://www.estherderby.com/workshops/ProblemSolvingLeadership.htm"], "link": "http://secretsofconsulting.blogspot.com/feeds/7582016772945388582/comments/default", "bloglinks": {}, "links": {"http://2.blogspot.com/": 1, "http://3.blogspot.com/": 1, "http://www.estherderby.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["A book (or a blog) can give you only what the author has to tell. But the learning that comes through self-knowledge has no limit. To learn through your own self-knowledge is to know how to listen, how to observe, and therefore you learn from everything: from music, from what people say and the way they say it, from anger, greed, ambition. - Jiddu Krishnamurti  The biggest benefit from change artistry comes when you start teaching other people to be change artists. The Challenge Your challenge is to make up a change artistry challenge of your own, one that will give you practice in an area you need most. Accept your own challenge and offer it to others. Source  This is the last of the dozen challenges from Becoming a Change Artist . Additional exercises in the book may help you, but from now on, your job is to practice, practice, practice."], "link": "http://secretsofconsulting.blogspot.com/feeds/4272079305123402097/comments/default", "bloglinks": {}, "links": {"http://2.blogspot.com/": 1, "http://www.geraldmweinberg.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["There's nothing more practical than a good theory. - Kenneth Boulding Reading a book is one thing. Applying what you learn is quite another. If you don't apply it soon, it simply fades away. The same is true of any educational experience. If you come back from a class and don't start using some of the material, you may as well not have gone in the first place. The Challenge Your challenge is to review the chapters in any of the four Quality Software Management volumes concerning specifics of the Anticipating organization and consider each idea in terms of the artistry that you can use to introduce it to your organization. Try to create at least one specific action item that will advance the transformation to that way of doing things. Experiences 1. I started a brown bag special-interest group on our new CASE tool as a place for people who were using it to share learnings, and as a low-risk place for those who weren't using it to find out about it. The hardest part for me\u2014and the real challenge\u2014was to be the first speaker. I haven't been a person who enjoys speaking in front of groups, but I got some support and made myself do it. The group now runs on its own\u2014with little nudges from me once in a while\u2014and there's no trouble getting speakers. It has tripled in size as our use of the tool has grown, and people think that without the group the tool would have died in the original group, or at least not spread. 2. I set out to measure something that would be useful to upper management and to the people whose work was being measured. After a few false starts, I hit upon measuring resolution time for failures found in test. I set up a system to capture this data from our bug database and to plot it automatically week by week. One of the surprising things it showed was the way the new configuration management system actually slowed down resolution time. Since I was advocating the new system, I was rather disappointed, but I resisted the temptation to fudge the figures. Management wanted to throw the system out, but I invoked the Satir Change Model to get a few weeks grace period. With the help of some investigation into the causes of Chaos, the graph improved. In about three weeks, the resolution time was back to what it was before the tool, and after six weeks, the time was cut by 32%. This was the first time anyone had ever demonstrated the value of a new tool in our organization. 3. My challenge to myself was to open up information in my organization. To do this, I decided to be the model by using Public Project Progress Posters for the three projects I'm managing. I was surprised by the emotional reactions\u2014mine and others'. I was apprehensive and defensive, yet proud of my courage. One of the other managers came into my office, shut the door, and started screaming obscenities at me for embarrassing him (because he wasn't going to post his progress). The people in the projects were generally accepting, though I spent a lot of time in the next two weeks explaining how to read the posters, what certain slippages meant, and what I was going to do about them. It was a lot more trouble than I anticipated, but now that things have settled down, it seems to be worth it. Reference  This post is part of the series, adapted from the book, Becoming a Change Artist ."], "link": "http://secretsofconsulting.blogspot.com/feeds/7657910195442849312/comments/default", "bloglinks": {}, "links": {"http://www.geraldmweinberg.com": 1, "http://1.blogspot.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["The liberation of a tree is not the freedom from its roots.- Rabindranath Tagore The Grand Tour shows you what's going on now, but perhaps more interesting to a change artist is how things got the way they are. The Challenge Your challenge is to discover the history of some practice that you consider non-productive. Experience#1 1. Darn you! This assignment almost got me fired. I started questioning why we chose our LAN software and then it came out that my boss was the one who made the study that led to the decision. We got into a BIG argument over what I considered a dumb choice that was really hurting communication around here. He gave me a copy of his original study (actually, he practically shoved it down my throat) and I grudgingly read it. I was halfway into it when I realized that they really had chosen the best that was available at that time. The system I was favoring didn't even exist then. I don't think the company that makes it even existed then. I didn't know that; I didn't even think of that. Well, I learned a couple of things: \u2022 Don't argue with the boss until you have all your facts straight. (I suppose I knew this, but needed reinforcing.) \u2022 Everybody really is doing the best they can, with what they have, at the time they do it. \u2022 I'm likely to make the same mistake (if it really is a mistake) of not seeing far enough into the future. \u2022 An apology actually works with my boss, and doesn't kill me (though it embarrasses me). Experience#2 While studying how we used consultants in the past, I learned that we have a pattern of paying them a lot, putting in a lot of work with them, and then putting their reports on the shelf. I don't know what I'm going to do about this, but obviously something has to change. Perhaps we won't hire consultants any more, or we'll hire different ones, or we'll work with them differently. Maybe we're expecting too much from a report. Experience#3 I found out why we put quarters in the bowl at meetings when somebody interrupts someone else. That started before I came to this group. Now we give that money to charity, but originally it was used for beer after the meeting. I've re-instituted the beer-sharing\u2014we really needed some kind of team-building, or team-repairing like that. Don't worry, though. We still give the quarters to charity, and just take turns buying the beer. Experience#4 I wanted to find out what really happened to the previous two process groups. I did. I'm going to make a few changes, right away. Experience#5 Well, I couldn't do this assignment. I wanted to study the history of our weekly status meetings, but I couldn't find anyone who remembered how they got started. I couldn't find anyone who remembered why they got started. I couldn't even find anybody who knew why we were still doing them. So we're not doing them any more. But I didn't do the assignment. Reference  This post is part of the series, adapted from the book, Becoming a Change Artist ."], "link": "http://secretsofconsulting.blogspot.com/feeds/5837653611588084824/comments/default", "bloglinks": {}, "links": {"http://www.geraldmweinberg.com": 1, "http://1.blogspot.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["There are many reasons why a program brought out of hibernation could incur costs: 1. The hardware environment has changed. 2. The system software environment has changed. 3. The size or format of the data has changed. 4. The human environment has changed. 5. Some part of the program or its supporting material has been lost or damaged. So it does cost to rerun an \"unchanged\" program, and the longer the period of hibernation, the greater the cost. But you already knew this\u2014we all know this. Then why, oh why, do we keep tumbling into the same trap? Part 2 I believe the answer lies in our unwillingness or inability to feed-back the true costs of programming and program maintenance to our users. Among our service bureau clients, the problem seems to have been brought to manageable proportions by the following steps: 1. When a program is commissioned, the lifespan and the number of executions must be specified. 2. If there is uncertainty about either of these \ufb01gures, contingent prices are given, re\ufb02ecting the differing costs. 3. The contract is written stating that the program will be destroyed after a certain time and/or number of runs, whichever comes \ufb01rst. 4. The program remains the property of the service bureau, unless the customer takes ownership\u2014in which case a much higher cost is placed on the job, in order to pay for preparing the program to be taken over by other than the original programmers. 5. The customer is notified when the program is about to be destroyed, and is given the option (at a substantial and realistic price) of having the program rebuilt for further use. 6. If the program is a \"one-time\" program, no notification is given, but the program is destroyed\u2014literally\u2014as soon as the customer agrees to accept the results. When working with inexperienced users, it is not difficult to get these terms accepted. Neither is it difficult with very experienced users, who know quite well the realities of \"one-time\" programs that turn out to be \"N-time\" programs. Only the in between users have difficulty accepting these conditions, for they believe they understand about programming, but actually have no solid basis for understanding. After a few costly lessons, they are more than willing to sit down in advance and decide whether they want to invest in an N-time program or merely in a disposable program that will actually be disposed of. In internal data processing situations, especially where there is no true chargeback for programming or program maintenance, these lessons are difficult to teach. There is no cost to the users of specifying a one-time program and then asking that it be run N times. Without cost, there is no motivation to learn. Where there is chargeback, it is possible to do what good, professional service bureaus do. Without chargeback, you can sometimes achieve some relief by manipulating the one parameter you have available\u2014time. You request the user to specify a one-time or N-time program and then give different time estimates for each. The one-time estimate is shorter, but carefully spells out the procedure that will be followed in destroying the program after its \ufb01rst use. At \ufb01rst, users will not believe this procedure will be enforced. After a few lessons, they will begin to understand and devote some energy to the decision. Of course, some users will simply attack the computing center manager, or the programmer, with an axe, literal or \ufb01gurative. Such are the perils of our profession. Besides, even an axe in the forehead is better than the pain in some lower anatomy caused by an immortal one-time program."], "link": "http://secretsofconsulting.blogspot.com/feeds/6093083392188923173/comments/default", "bloglinks": {}, "links": {}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["In many IT installations today, the number one problem is program maintenance. Although the total problem is far from simple, there are a number of relatively simple ideas that can be applied immediately to furnish \"prompt relief.\" One such idea is the disposable program. The idea of disposable programs is not new. Every programmer has written code that was to be used once and then thrown away\u2014codes such as: 1. First-cut subroutines, as for simple, quick formatting of output. 2. One-time reports. 3. Test drivers. 4. Research programs to probe some peculiar feature of the programming language, operating system, database, or other \"black box.\" 5. Engineering assist programs, to help diagnose a particular hardware malfunction. If you consider these \ufb01ve examples relative to your own experience, you will notice two categories: KEPT: \ufb01rst-cut routines, and one-time reports, and DISPOSED: test drivers, research programs, and hardware testers. That is, though all are thought of as single use programs, the KEPT routines tend to be held, somewhere, \"just in case.\" Only the DISPOSED programs are actually discarded, whether they should be or not. Can you recall an instance when you wished you had actually retained a discarded program? And can you recall cases of KEPT programs you devoutly wish you had destroyed when you had the chance? These are the programs you see and curse almost every day, as their user phones, pleading for \"just one little change.\" Perhaps we would immediately begin improving the maintenance situation by applying two simple rules about \"one- time\" programs: 1. If you are about to throw it away, keep it. 2. If you are about to keep it, throw it away. Unfortunately, applying these two rules together creates an in\ufb01nite recursion. All programmers would be instantly paralyzed. There must be a better way. (Or do you believe that instant paralysis of all programmers would be of great benefit to the human species?) Consider the examples once again; you'll notice that the underlying principle seems to be: If the programmer is responsible for the decision, the program is discarded; but if the user is responsible the program is kept. But why not just keep all programs, for all time? There are many reasons why a program brought out of hibernation could incur costs: 1. The hardware environment has changed. 2. The system software environment has changed. 3. The size or format of the data has changed. 4. The human environment has changed. 5. Some part of the program or its supporting material has been lost or damaged. So it does cost to rerun an \"unchanged\" program, and the longer the period of hibernation, the greater the cost. But you already knew this\u2014we all know this. Then why, oh why, do we keep tumbling into the same trap? And how do we get out, or stay out, of the trap. Well, we'll watch for readers' ideas on these questions, and next blog entry, I'll give a few ideas of my own."], "link": "http://secretsofconsulting.blogspot.com/feeds/8618448661940268770/comments/default", "bloglinks": {}, "links": {}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}, {"content": ["Today, I give the rest of the story as it actually happened, then consider some of the astute comments given already. What the Consultant Did The consultant was astonished by the programmer's response: \"That's not an error. Actually, the formula was in error, so I corrected it. The formula I programmed is correct, whereas the original formula was simply wrong.\" The consultant understood, which the programmer did not, that a program error occurs when the program does not do what the customer wanted, not what the programmer thinks the customer should have wanted. That was the programmer's first mistake. The programmer's second mistake was not understanding who his customer was. He seemed to think that the French were the customer, but the actual customer was the consultant . (NOTE: If the actual customer had been the French, the programmer's action was still wrong, because of his first mistake. If a programmer thinks his customer has asked for the wrong thing, he could, politely, bring this thought to the customer's attention. So, if the French had been the customer, the programmer's third mistake was not bringing his thought to them. And even if the customer had been correctly identified, the programmer's fourth mistake was being rude and arrogant. That's simply not the way to get your point across, especially if your point is that your customer has been wrong.) What the Consultant Said \"You didn't understand your assignment,\" the consultant said. \"We're trying to simulate the precise formula used in France so we can compare it to the formula used in other countries. It's not a question of right or wrong, but merely of matching the existing French formula.\" \"Well,\" the programmer replied, \"anyone with half a brain and a smattering of knowledge of inventory theory can see immediately that the French formula cannot possibly be correct, so what's the sense of programming it? Tell them to use my formula, if they want to improve their inventory management.\" The management consultant decided to try another approach with the recalcitrant programmer. \"That's a good idea. If you're right, I'm sure they'll really appreciate getting a better formula. In the meantime, it will help them to accept the new formula if they can see how it compares with their original one on this data, so I'd appreciate having their formula programmed as soon as you can manage.\" \"You don't seem to understand,\" the programmer insisted, \"Why should I waste my valuable time on a formula I know is wrong? Just show them my formula and they'll understand.\" At this point, the management consultant gave up on the programmer and got himself another one. The French formula was programmed and found to give the claimed results which were, in fact, superior in many circumstances to the approaches used in other countries. It turns out that the programmer's fifth mistake was overestimating the \"correctness\" of \"inventory theory.\" Readers' Comments A number of readers correctly (I believe) said they would try talking with the programmer. In the actual case, the consultant tried this, but learned that the programmer was not going to listen. Perhaps this was the consultant's fault in the way he tried to talk to the programmer, but in any case, if your employee (and the programmer was, of course, working for the consultant) won't talk with you about a situation, then you have to get rid of that employee. So, attempting to talk is a good approach, in that it gives you essential information even if the programmer refuses to talk. Other readers warned the consultant to consider his own role carefully, and to consider myriad possible interpretations of what's going on. This is always good advice for a consultant. Several readers correctly identified one or more of the programmer's mistakes (above). Clearly, someone needs to educate the programmer about what his job is, and how to do it, but evidently the consultant lacked the skill to accomplish that. So, again, the consultant needs to consider his own role, at least for the future. In a similar situation, for example, he might take more care in choosing the programmer and/or making the programmer's task much clearer from the outset. Those who advised the consultant to get \"on the ground\" with the inventory application were also on a productive track. In this case, the consultant was in the USA, and meekly accepted the refusal to pay him to travel to France and study the French approach first hand. If the consultant knew what he needed but didn't insist on having it, he made a major consulting mistake. If you insist, but your client won't supply it (time, or access, or money, or whatever), then the consultant should simply resign from that assignment. Using specific examples rather than simply theory\u2014what a good idea. Both the consultant and the programmer were probably \"intuitives\" in the MBTI sense, so they kept the discussion on the level of theory, which often misses some crucial data. In this case, if the French formula actually worked in practice, that would have thrown an entirely different light on the discussion. Next Steps All in all, the case example seems to have done its job\u2014namely, stimulating an outpouring of darn good advice about consulting and programming. Now that you have the \"whole story,\" what further observations would you like to make as comments?"], "link": "http://secretsofconsulting.blogspot.com/feeds/1848019982727338254/comments/default", "bloglinks": {}, "links": {"http://4.blogspot.com/": 1, "http://1.blogspot.com/": 1}, "blogtitle": "Gerald Weinberg's Secrets of Writing and Consulting"}]